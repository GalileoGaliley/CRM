[{"/Users/nicole/rrrr/crm/src/index.tsx":"1","/Users/nicole/rrrr/crm/src/router.ts":"2","/Users/nicole/rrrr/crm/src/store.ts":"3","/Users/nicole/rrrr/crm/src/App.tsx":"4","/Users/nicole/rrrr/crm/src/funcs.ts":"5","/Users/nicole/rrrr/crm/src/components/Icon.tsx":"6","/Users/nicole/rrrr/crm/src/components/NotificationsWidget.tsx":"7","/Users/nicole/rrrr/crm/src/components/HelpMenu.tsx":"8","/Users/nicole/rrrr/crm/src/components/AccountMenu.tsx":"9","/Users/nicole/rrrr/crm/src/pages/Dashboard.tsx":"10","/Users/nicole/rrrr/crm/src/pages/Auth.tsx":"11","/Users/nicole/rrrr/crm/src/pages/Tickets.tsx":"12","/Users/nicole/rrrr/crm/src/pages/Booking.tsx":"13","/Users/nicole/rrrr/crm/src/pages/Schedule.tsx":"14","/Users/nicole/rrrr/crm/src/pages/support/faq.tsx":"15","/Users/nicole/rrrr/crm/src/pages/support/tickets.tsx":"16","/Users/nicole/rrrr/crm/src/pages/Appointments/List.tsx":"17","/Users/nicole/rrrr/crm/src/pages/support/contacts.tsx":"18","/Users/nicole/rrrr/crm/src/pages/Page403.tsx":"19","/Users/nicole/rrrr/crm/src/pages/Clients/List.tsx":"20","/Users/nicole/rrrr/crm/src/pages/Payments.tsx":"21","/Users/nicole/rrrr/crm/src/pages/Estimates.tsx":"22","/Users/nicole/rrrr/crm/src/pages/Appointments/Item.tsx":"23","/Users/nicole/rrrr/crm/src/pages/Invoices.tsx":"24","/Users/nicole/rrrr/crm/src/pages/Absences/Item.tsx":"25","/Users/nicole/rrrr/crm/src/pages/Clients/Item.tsx":"26","/Users/nicole/rrrr/crm/src/pages/Absences/List.tsx":"27","/Users/nicole/rrrr/crm/src/pages/Absences/New.tsx":"28","/Users/nicole/rrrr/crm/src/pages/Lists/Sources.tsx":"29","/Users/nicole/rrrr/crm/src/pages/Lists/Appliances.tsx":"30","/Users/nicole/rrrr/crm/src/pages/Jobs/List.tsx":"31","/Users/nicole/rrrr/crm/src/pages/Lists/Areas.tsx":"32","/Users/nicole/rrrr/crm/src/pages/Lists/Brands.tsx":"33","/Users/nicole/rrrr/crm/src/pages/Jobs/Item.tsx":"34","/Users/nicole/rrrr/crm/src/pages/Calls/List.tsx":"35","/Users/nicole/rrrr/crm/src/pages/Calls/NumbersList.tsx":"36","/Users/nicole/rrrr/crm/src/pages/Calls/SourcesList.tsx":"37","/Users/nicole/rrrr/crm/src/pages/Clients/New.tsx":"38","/Users/nicole/rrrr/crm/src/pages/Sms.tsx":"39","/Users/nicole/rrrr/crm/src/pages/Calls/Area.tsx":"40","/Users/nicole/rrrr/crm/src/pages/Permissions/List.tsx":"41","/Users/nicole/rrrr/crm/src/pages/Permissions/New.tsx":"42","/Users/nicole/rrrr/crm/src/pages/Users/List.tsx":"43","/Users/nicole/rrrr/crm/src/pages/Users/New.tsx":"44","/Users/nicole/rrrr/crm/src/pages/Users/Item.tsx":"45","/Users/nicole/rrrr/crm/src/pages/CallCenter/Dispatchers/Item.tsx":"46","/Users/nicole/rrrr/crm/src/pages/CallCenter/Dispatchers/New.tsx":"47","/Users/nicole/rrrr/crm/src/pages/CallCenter/PhoneNumbers/List.tsx":"48","/Users/nicole/rrrr/crm/src/pages/CallCenter/PhoneNumbers/New.tsx":"49","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallGroups/List.tsx":"50","/Users/nicole/rrrr/crm/src/pages/CallCenter/PhoneNumbers/Item.tsx":"51","/Users/nicole/rrrr/crm/src/pages/Permissions/Item.tsx":"52","/Users/nicole/rrrr/crm/src/pages/CallCenter/Settings.tsx":"53","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallGroups/Item.tsx":"54","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallFlows/Item.tsx":"55","/Users/nicole/rrrr/crm/src/pages/CallCenter/Dispatchers/List.tsx":"56","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallFlows/List.tsx":"57","/Users/nicole/rrrr/crm/src/pages/AccountPermissions/New.tsx":"58","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallGroups/New.tsx":"59","/Users/nicole/rrrr/crm/src/pages/Accounts/List.tsx":"60","/Users/nicole/rrrr/crm/src/pages/AccountPermissions/Item.tsx":"61","/Users/nicole/rrrr/crm/src/pages/Accounts/Item.tsx":"62","/Users/nicole/rrrr/crm/src/pages/Accounts/New.tsx":"63","/Users/nicole/rrrr/crm/src/pages/ServiceResources/List.tsx":"64","/Users/nicole/rrrr/crm/src/pages/ServiceResources/New.tsx":"65","/Users/nicole/rrrr/crm/src/pages/ServiceResources/Item.tsx":"66","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallFlows/New.tsx":"67","/Users/nicole/rrrr/crm/src/pages/AccountPermissions/List.tsx":"68","/Users/nicole/rrrr/crm/src/funcs/base.ts":"69","/Users/nicole/rrrr/crm/src/components/Select.tsx":"70","/Users/nicole/rrrr/crm/src/components/Checkbox.tsx":"71","/Users/nicole/rrrr/crm/src/components/Switcher.tsx":"72","/Users/nicole/rrrr/crm/src/components/reports/Filters.tsx":"73","/Users/nicole/rrrr/crm/src/components/reports/TableField.tsx":"74","/Users/nicole/rrrr/crm/src/components/reports/TableControls.tsx":"75","/Users/nicole/rrrr/crm/src/funcs/reports.ts":"76","/Users/nicole/rrrr/crm/src/validate.ts":"77","/Users/nicole/rrrr/crm/src/components/AudioPlayer.tsx":"78","/Users/nicole/rrrr/crm/src/components/DateRangeCalendar.tsx":"79","/Users/nicole/rrrr/crm/src/components/SortSelect.tsx":"80","/Users/nicole/rrrr/crm/src/components/Radio.tsx":"81"},{"size":760,"mtime":1639791084000,"results":"82","hashOfConfig":"83"},{"size":3654,"mtime":1639791084000,"results":"84","hashOfConfig":"83"},{"size":4728,"mtime":1640038947657,"results":"85","hashOfConfig":"83"},{"size":30277,"mtime":1642037367424,"results":"86","hashOfConfig":"83"},{"size":2668,"mtime":1640119942276,"results":"87","hashOfConfig":"83"},{"size":429,"mtime":1639791084000,"results":"88","hashOfConfig":"83"},{"size":2155,"mtime":1639791084000,"results":"89","hashOfConfig":"83"},{"size":1061,"mtime":1639791084000,"results":"90","hashOfConfig":"83"},{"size":2564,"mtime":1639791084000,"results":"91","hashOfConfig":"83"},{"size":1051,"mtime":1639791084000,"results":"92","hashOfConfig":"83"},{"size":6585,"mtime":1642036069199,"results":"93","hashOfConfig":"83"},{"size":450,"mtime":1639791084000,"results":"94","hashOfConfig":"83"},{"size":450,"mtime":1639791084000,"results":"95","hashOfConfig":"83"},{"size":454,"mtime":1639791084000,"results":"96","hashOfConfig":"83"},{"size":464,"mtime":1639791084000,"results":"97","hashOfConfig":"83"},{"size":480,"mtime":1639791084000,"results":"98","hashOfConfig":"83"},{"size":26045,"mtime":1642119237181,"results":"99","hashOfConfig":"83"},{"size":484,"mtime":1639791084000,"results":"100","hashOfConfig":"83"},{"size":449,"mtime":1639791084000,"results":"101","hashOfConfig":"83"},{"size":16814,"mtime":1641214093735,"results":"102","hashOfConfig":"83"},{"size":454,"mtime":1639791084000,"results":"103","hashOfConfig":"83"},{"size":458,"mtime":1639791084000,"results":"104","hashOfConfig":"83"},{"size":13648,"mtime":1640844874797,"results":"105","hashOfConfig":"83"},{"size":454,"mtime":1639791084000,"results":"106","hashOfConfig":"83"},{"size":7435,"mtime":1640051282547,"results":"107","hashOfConfig":"83"},{"size":26556,"mtime":1640261434744,"results":"108","hashOfConfig":"83"},{"size":17578,"mtime":1642119078951,"results":"109","hashOfConfig":"83"},{"size":4563,"mtime":1639791084000,"results":"110","hashOfConfig":"83"},{"size":5119,"mtime":1639791084000,"results":"111","hashOfConfig":"83"},{"size":5131,"mtime":1639791084000,"results":"112","hashOfConfig":"83"},{"size":22906,"mtime":1642118353696,"results":"113","hashOfConfig":"83"},{"size":5111,"mtime":1639791084000,"results":"114","hashOfConfig":"83"},{"size":5115,"mtime":1639791084000,"results":"115","hashOfConfig":"83"},{"size":26345,"mtime":1642022978314,"results":"116","hashOfConfig":"83"},{"size":34451,"mtime":1642119971608,"results":"117","hashOfConfig":"83"},{"size":26432,"mtime":1642119974426,"results":"118","hashOfConfig":"83"},{"size":22149,"mtime":1642119977123,"results":"119","hashOfConfig":"83"},{"size":3764,"mtime":1639791084000,"results":"120","hashOfConfig":"83"},{"size":434,"mtime":1639791084000,"results":"121","hashOfConfig":"83"},{"size":22424,"mtime":1642120319611,"results":"122","hashOfConfig":"83"},{"size":8929,"mtime":1640917089095,"results":"123","hashOfConfig":"83"},{"size":5472,"mtime":1639791084000,"results":"124","hashOfConfig":"83"},{"size":17015,"mtime":1642037367410,"results":"125","hashOfConfig":"83"},{"size":8632,"mtime":1640139338396,"results":"126","hashOfConfig":"83"},{"size":11764,"mtime":1640298139912,"results":"127","hashOfConfig":"83"},{"size":11280,"mtime":1639791084000,"results":"128","hashOfConfig":"83"},{"size":6396,"mtime":1639791084000,"results":"129","hashOfConfig":"83"},{"size":20759,"mtime":1640916924409,"results":"130","hashOfConfig":"83"},{"size":7862,"mtime":1639791084000,"results":"131","hashOfConfig":"83"},{"size":11079,"mtime":1640916902646,"results":"132","hashOfConfig":"83"},{"size":10877,"mtime":1639791084000,"results":"133","hashOfConfig":"83"},{"size":9332,"mtime":1639791084000,"results":"134","hashOfConfig":"83"},{"size":7754,"mtime":1639791084000,"results":"135","hashOfConfig":"83"},{"size":14250,"mtime":1639791084000,"results":"136","hashOfConfig":"83"},{"size":20395,"mtime":1639791084000,"results":"137","hashOfConfig":"83"},{"size":17865,"mtime":1640916924398,"results":"138","hashOfConfig":"83"},{"size":10156,"mtime":1640916891425,"results":"139","hashOfConfig":"83"},{"size":5674,"mtime":1639791084000,"results":"140","hashOfConfig":"83"},{"size":10399,"mtime":1639791084000,"results":"141","hashOfConfig":"83"},{"size":16610,"mtime":1640916850187,"results":"142","hashOfConfig":"83"},{"size":9714,"mtime":1639791084000,"results":"143","hashOfConfig":"83"},{"size":19351,"mtime":1640128888253,"results":"144","hashOfConfig":"83"},{"size":15348,"mtime":1640129407674,"results":"145","hashOfConfig":"83"},{"size":15271,"mtime":1640917105395,"results":"146","hashOfConfig":"83"},{"size":6895,"mtime":1640339476461,"results":"147","hashOfConfig":"83"},{"size":9813,"mtime":1640339595554,"results":"148","hashOfConfig":"83"},{"size":10513,"mtime":1639791084000,"results":"149","hashOfConfig":"83"},{"size":9194,"mtime":1640916469947,"results":"150","hashOfConfig":"83"},{"size":2218,"mtime":1640232721830,"results":"151","hashOfConfig":"83"},{"size":2080,"mtime":1639791084000,"results":"152","hashOfConfig":"83"},{"size":1096,"mtime":1639791084000,"results":"153","hashOfConfig":"83"},{"size":714,"mtime":1639791084000,"results":"154","hashOfConfig":"83"},{"size":7543,"mtime":1641079887634,"results":"155","hashOfConfig":"83"},{"size":3478,"mtime":1639791084000,"results":"156","hashOfConfig":"83"},{"size":4823,"mtime":1640914217444,"results":"157","hashOfConfig":"83"},{"size":3131,"mtime":1642117738920,"results":"158","hashOfConfig":"83"},{"size":3217,"mtime":1639791084000,"results":"159","hashOfConfig":"160"},{"size":2964,"mtime":1639791084000,"results":"161","hashOfConfig":"83"},{"size":4680,"mtime":1642121125143,"results":"162","hashOfConfig":"83"},{"size":3106,"mtime":1639791084000,"results":"163","hashOfConfig":"83"},{"size":1027,"mtime":1639791084000,"results":"164","hashOfConfig":"83"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},"zxyvj4",{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":61,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"167"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"167"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"167"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"167"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"167"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"167"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"167"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"167"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"167"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"167"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"167"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"167"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"167"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"167"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"167"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"167"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"167"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"167"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"167"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"167"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"167"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"167"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"167"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"167"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"167"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"167"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"167"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"167"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"167"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"167"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"167"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"167"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"167"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"167"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"167"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"167"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"167"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"167"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"167"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"167"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"167"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"167"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1htspc0",{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"167"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},"/Users/nicole/rrrr/crm/src/index.tsx",[],["378","379"],"/Users/nicole/rrrr/crm/src/router.ts",[],"/Users/nicole/rrrr/crm/src/store.ts",[],"/Users/nicole/rrrr/crm/src/App.tsx",["380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440"],"import classNames from \"classnames\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BaseLink, useRoute } from \"react-router5\"\nimport { Scrollbar } from \"react-scrollbars-custom\";\nimport Icon from \"./components/Icon\"\nimport { getActiveAccount, httpClient, signOut } from \"./funcs\";\nimport businessAccountIconImg from \"./images/business-account_icon.svg\";\nimport logoImg from \"./images/logo.svg\";\nimport AuthPage from \"./pages/Auth\"\nimport BookingPage from \"./pages/Booking\"\nimport DashboardPage from \"./pages/Dashboard\"\nimport EstimatesPage from \"./pages/Estimates\"\nimport InvoicesPage from \"./pages/Invoices\"\nimport PaymentsPage from \"./pages/Payments\"\nimport SchedulePage from \"./pages/Schedule\"\nimport SmsPage from \"./pages/Sms\"\nimport TicketsPage from \"./pages/Tickets\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"./store\";\n\nimport { Transition } from 'react-transition-group'\nimport AccountMenu from \"./components/AccountMenu\"\nimport HelpMenu from \"./components/HelpMenu\"\nimport SupportPage__Faq from \"./pages/support/faq\"\nimport SupportPage__Tickets from \"./pages/support/tickets\"\nimport SupportPage__Contacts from \"./pages/support/contacts\"\nimport NotificationsWidget from \"./components/NotificationsWidget\"\nimport AppointmentsPage_List from \"./pages/Appointments/List\"\nimport Account from \"./models/Account\"\nimport qs from \"qs\"\nimport Menus from \"./models/Menus\"\nimport User from \"./models/User\"\nimport ClientsPage_List from \"./pages/Clients/List\"\nimport AbsencesPage_List from \"./pages/Absences/List\"\nimport ListsPage_Appliances from \"./pages/Lists/Appliances\"\nimport ListsPage_Brands from \"./pages/Lists/Brands\"\nimport ListsPage_Sources from \"./pages/Lists/Sources\"\nimport ListsPage_Areas from \"./pages/Lists/Areas\"\nimport JobsPage_List from \"./pages/Jobs/List\"\nimport AbsencesPage_Item from \"./pages/Absences/Item\"\nimport JobsPage_Item from \"./pages/Jobs/Item\"\nimport Page403 from \"./pages/Page403\"\nimport CallsPage_List from \"./pages/Calls/List\"\nimport CallsSourcesPage_List from \"./pages/Calls/SourcesList\"\nimport CallsNumbersPage_List from \"./pages/Calls/NumbersList\"\nimport CallsAreaPage_List from \"./pages/Calls/Area\"\nimport PermissionsPage_List from \"./pages/Permissions/List\"\nimport PermissionsPage_Item from \"./pages/Permissions/Item\"\nimport PermissionsPage_New from \"./pages/Permissions/New\"\nimport UsersPage_List from \"./pages/Users/List\"\nimport UsersPage_New from \"./pages/Users/New\"\nimport UsersPage_Item from \"./pages/Users/Item\"\nimport AbsencesPage_New from \"./pages/Absences/New\"\nimport CallCenter_PhoneNumbersPage_List from \"./pages/CallCenter/PhoneNumbers/List\"\nimport CallCenter_DispatchersPage_List from \"./pages/CallCenter/Dispatchers/List\"\nimport CallCenter_CallGroupsPage_List from \"./pages/CallCenter/CallGroups/List\"\nimport CallCenter_SettingsPage_Item from \"./pages/CallCenter/Settings\"\nimport CallCenter_CallFlowsPage_List from \"./pages/CallCenter/CallFlows/List\"\nimport CallCenter_PhoneNumbersPage_New from \"./pages/CallCenter/PhoneNumbers/New\"\nimport CallCenter_DispatchersPage_New from \"./pages/CallCenter/Dispatchers/New\"\nimport CallCenter_CallGroupsPage_New from \"./pages/CallCenter/CallGroups/New\"\nimport CallCenter_PhoneNumbersPage_Item from \"./pages/CallCenter/PhoneNumbers/Item\"\nimport CallCenter_DispatchersPage_Item from \"./pages/CallCenter/Dispatchers/Item\"\nimport CallCenter_CallGroupsPage_Item from \"./pages/CallCenter/CallGroups/Item\"\nimport AccountPermissionsPage_List from \"./pages/AccountPermissions/List\"\nimport AccountPermissionsPage_Item from \"./pages/AccountPermissions/Item\"\nimport AccountPermissionsPage_New from \"./pages/AccountPermissions/New\"\nimport AccountsPage_List from \"./pages/Accounts/List\"\nimport AccountsPage_Item from \"./pages/Accounts/Item\"\nimport AccountsPage_New from \"./pages/Accounts/New\"\nimport ServiceResourcesPage_List from \"./pages/ServiceResources/List\"\nimport ServiceResourcesPage_Item from \"./pages/ServiceResources/Item\"\nimport ServiceResourcesPage_New from \"./pages/ServiceResources/New\"\nimport CallCenter_CallFlowsPage_Item from \"./pages/CallCenter/CallFlows/Item\"\nimport CallCenter_CallFlowsPage_New from \"./pages/CallCenter/CallFlows/New\"\nimport ClientsPage_Item from \"./pages/Clients/Item\"\nimport AppointmentsPage_Item from \"./pages/Appointments/Item\"\nimport ClientsPage_New from \"./pages/Clients/New\"\nimport router from \"./router\";\n\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst App = connect(mapStateToProps, mapDispatchToProps)(function App(props: Props) {\n\n  const $router = useRoute()\n\n  const [activeNavButton, setActiveNavButton] = useState<string | null>(null)\n  const [searchPanelExpanded, setSearchPanelExpanded] = useState(false)\n\n  // Is page is permitted to access function\n  const isPageAllowed = (page: string) => {\n\n    if(!props.store.menus) return null\n\n    let pages = []\n\n    for (let [key, value] of Object.entries(props.store.menus)) {\n\n      for (let [_key, _value] of Object.entries(value)) {\n        \n        pages.push((_value as any).name)\n      }\n    }\n\n    return pages.includes(page.split('.')[0])\n  }\n\n  const isNavItemAllowed = (page: string) =>\n    props.store.menus ? props.store.menus[props.store.navMode].findIndex((item) => item.name === page.split('.')[0]) !== -1 : null\n\n  function onNavSwitchNotchHover() {\n    props.dispatcher.setNavActive({\n      floating: true,\n      is: true\n    })\n  }\n\n  function onNavSwitchNotchLeft() {\n    if (!props.store.navActive.floating) return;\n\n    props.dispatcher.setNavActive({\n      floating: true,\n      is: false\n    })\n\n    setTimeout(() => {\n      props.dispatcher.setNavActive({\n        floating: false,\n        is: false\n      })\n    }, 210)\n  }\n\n  // Redirect if no auth function\n  function redirectIfNoAuth() {\n    if (\n      ![\n        'auth'\n      ].includes($router.route.name) &&\n      !props.store.accessToken\n    ) {\n      $router.router.navigate('auth')\n    }\n  }\n  useEffect(redirectIfNoAuth, [])\n\n  // Handle account changing\n  useEffect(() => {\n    if (props.store.selectedAccount === null) return\n    let SA : number = props.store.selectedAccount;\n    const activeAccount = getActiveAccount(props.store) as Account\n\n    let $user: User\n\n    // Get user info\n    httpClient.post('/users/profile', qs.stringify({ account_id: activeAccount.account_id }), {\n      headers: {\n        'Accept': 'application/jsons',\n        'Content-Type': 'application/x-www-form-urlencoded',\n      }\n    }).then(({ data: { user } }) => {\n\n      $user = user[SA]\n\n      // Get user menus\n      return httpClient.get(`/menus/${user[SA].user_id}`)\n    }).then(({data: menus}) => {\n      for (let i = 0; i < menus.main.length; i++){\n          if(menus.main[i].name == \"sms\" || menus.main[i].name == 'sms'){\n              menus.main.splice(i, 1);\n          }\n      }\n\n      props.dispatcher.setUser($user);\n\n      props.dispatcher.setMenus(menus);\n      // Redirect to dashboard\n      if (props.store.redirectRoute) {\n        $router.router.navigate(props.store.redirectRoute.name, props.store.redirectRoute.params, {reload: true});\n      }\n      else {\n        $router.router.navigate('dashboard', {}, {\n          reload: true\n        })\n      }\n    })\n\n  }, [props.store.selectedAccount])\n\n  // Handle account select on mount\n  useEffect(() => {\n\n    if (\n      props.store.accessToken &&\n      !props.store.user &&\n      $router.route.name !== 'auth'\n    ) {\n\n      httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n      props.dispatcher.setRedirectRoute($router.router.getState())\n\n      $router.router.navigate('auth', {\n        mode: 'account-select'\n      }, {reload: true})\n    }\n  }, [])\n\n  // Handle route name changes\n  useEffect(() => {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n    // Close nav and other widgets on mobile devices\n    if (window.innerWidth < 768) {\n      props.dispatcher.setNavActive({\n        floating: false,\n        is: false\n      })\n      setActiveNavButton(null)\n    }\n\n    // Handle page permission\n    if (!['auth', 'dashboard', '403'].includes($router.router.getState().name)) {\n\n      if (isPageAllowed($router.router.getState().name) === false) {\n        $router.router.navigate('403')\n      }\n    }\n  }, [$router.route.name])\n\n  // Redirect to auth page function\n\n  \n  // Render function\n  return (<>\n    \n    { /* Header */ }\n    { props.store.user ? (\n      <header>\n\n        { /* Project about */ }\n        <div className=\"ProjectHeaders\">\n\n          { /* Mobile nav switcher */ }\n          <button\n            className={ classNames([\"_zeroed\", \"_iconed\", \"mobile-nav-switcher\", { _active: props.store.navActive.is }]) }\n            onClick={(e) => { e.stopPropagation(); props.dispatcher.setNavActive({ ...props.store.navActive, is: !props.store.navActive.is }) } }\n          >\n            <Icon icon=\"menu-1\" />\n          </button>\n          <img src={ logoImg } alt=\"\" onClick={() => $router.router.navigate('dashboard', {}, {reload: true})} />\n\n          <div className=\"headers\" onClick={() => $router.router.navigate('dashboard', {}, {reload: true})}>\n            <h1>Expert @ FS</h1>\n            <h2>Manage your business!</h2>\n          </div>\n\n          { /* Mobile header account menu */ }\n          <div className=\"mobile-account-menu-switcher\">\n\n            <button\n              className=\"_zeroed _iconed\"\n              onClick={(e) => { e.stopPropagation(); setActiveNavButton(activeNavButton ? null : 'mobileAccountMenu') }}\n            >\n              <Icon icon=\"user-20\" />\n            </button>\n\n            <Transition in={activeNavButton === \"mobileAccountMenu\"} timeout={210} mountOnEnter={true} unmountOnExit={true}>\n              {(state) => (\n                <div style={{width: '180px'}} className={classNames(\"menu-container\", \"_approach-left\", `transition-fade-${state}`)}>\n                  <AccountMenu full={true} onActiveNavButtonChange={setActiveNavButton} />\n                </div>\n              )}\n            </Transition>\n\n          </div>\n        </div>\n\n        { /* Nav switch button */ }\n        <div className=\"nav-switch-button\">\n          <button\n            className={ classNames([\"_iconed\", \"_zeroed\", { _active: props.store.navActive.is }]) }\n            onClick={ () => props.dispatcher.setNavActive({ ...props.store.navActive, is: !props.store.navActive.is }) }\n          >\n            <Icon icon=\"menu-1\" />\n          </button>\n        </div>\n\n        { /* Search panel */ }\n        <div className={ classNames([\"search-panel\", { _forcedShown: props.store.navActive.is }]) }>\n          <button\n            className=\"_iconed _zeroed\"\n            onClick={ () => setSearchPanelExpanded(!searchPanelExpanded) }\n          >\n            <Icon icon=\"magnifier-5\" />\n          </button>\n\n          <div className={ classNames([\"search-input\", { _shown: searchPanelExpanded }]) }>\n            <input type=\"text\" />\n            <button className=\"_iconed _wa\">\n              <Icon icon=\"magnifier-5\" />\n            </button>\n          </div>\n        </div>\n\n        { /* Nav switchers */ }\n        <div className={ classNames([\"nav-switchers\", { _forcedShown: props.store.navActive.is }]) }>\n\n          <button\n            className={classNames({ _active: props.store.navMode === \"main\" })}\n            onClick={() => props.dispatcher.setNavMode(\"main\")}\n          >\n            <Icon icon=\"logo\" viewBox=\"0 0 63.31 69.32\" />\n          </button>\n\n          <button>\n            <Icon icon=\"email-1\" />\n          </button>\n\n          <button\n            className={classNames({ _active: props.store.navMode === \"settings\" })}\n            onClick={() => props.dispatcher.setNavMode(\"settings\")}\n          >\n            <Icon icon=\"gear-1\" />\n          </button>\n        </div>\n\n        { /* Nav buttons */ }\n        <div className=\"nav-buttons\">\n          <div>\n            <button\n              className={classNames(\"_zeroed\", \"_iconed\", { _active: activeNavButton === \"helpMenu\" })}\n              onClick={() => setActiveNavButton('helpMenu')}\n            >\n              <Icon icon=\"help-1\" />\n            </button>\n\n            <Transition in={activeNavButton === \"helpMenu\"} timeout={210} mountOnEnter={true} unmountOnExit={true}>\n              {(state) => (\n                <div style={{width: '210px'}} className={classNames(\"menu-container\", \"_approach-left\", `transition-fade-${state}`)}>\n                  <HelpMenu />\n                </div>\n              )}\n            </Transition>\n          </div>\n          <div>\n            <button\n              className={classNames(\"_zeroed\", \"_iconed\", { _active: activeNavButton === \"notificationsWidget\" })}\n              onClick={() => setActiveNavButton('notificationsWidget')}\n            >\n              <Icon icon=\"bell-1\" />\n            </button>\n\n            <Transition in={activeNavButton === \"notificationsWidget\"} timeout={210} mountOnEnter={true} unmountOnExit={true}>\n              {(state) => (\n                <div style={{width: '250px'}} className={classNames(\"menu-container\", \"_approach-left\", `transition-fade-${state}`)}>\n                  <NotificationsWidget />\n                </div>\n              )}\n            </Transition>\n          </div>\n\n          <div className=\"__account-menu-switcher\">\n\n            <button\n              className={classNames(\"_zeroed\", \"_iconed\")}\n              onClick={() => setActiveNavButton('accountMenu')}\n            >\n              <Icon icon=\"user-20\" />\n            </button>\n\n            <Transition in={activeNavButton === \"accountMenu\"} timeout={210} mountOnEnter={true} unmountOnExit={true}>\n              {(state) => (\n                <div style={{width: '180px'}} className={classNames(\"menu-container\", \"_approach-left\", `transition-fade-${state}`)}>\n                  <AccountMenu />\n                </div>\n              )}\n            </Transition>\n          </div>\n          <div>\n            <button className=\"_zeroed _iconed\">\n              <Icon icon=\"phone-6\" />\n            </button>\n          </div>\n        </div>\n      </header>\n    ) : null }\n\n    { /* Main block */ }\n    <main className={classNames({_authPage: $router.route.name === 'auth'})}>\n\n      { /* Aside panel */ }\n      {props.store.user ? (\n        <aside\n          className={classNames({ _active: props.store.navActive.is, _floating: props.store.navActive.floating })}\n          onMouseLeave={() => onNavSwitchNotchLeft()}\n        >\n          { /* Aside navigation */}\n          <Scrollbar\n            renderer={props => {\n              const { elementRef, ...restProps } = props\n              return <nav {...restProps} ref={elementRef} />\n            }}\n          >\n            {props.store.navMode === \"main\" ? (\n              <BaseLink\n                router={$router.router}\n                routeName=\"dashboard\"\n                className={classNames({ _active: $router.route.name === \"dashboard\" })}\n              >\n                <Icon icon=\"chart-5\" />\n                <span>Dashboard</span>\n                <div className=\"__bg\"></div>\n              </BaseLink>\n            ) : null}\n\n            {props.store.menus ? (<>\n              {isNavItemAllowed('schedule') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"schedule\"\n                  className={classNames({ _active: $router.route.name === \"schedule\" })}\n                >\n                  <Icon icon=\"calendar-4\" />\n                  <span>Schedule</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('booking') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"booking\"\n                  className={classNames({ _active: $router.route.name === \"booking\" })}\n                >\n                  <Icon icon=\"calendar-9\" />\n                  <span>Booking</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('calls') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"calls\"\n                  className={classNames({ _active: $router.route.name.startsWith('calls') })}\n                >\n                  <Icon icon=\"phone-1\" />\n                  <span>Calls</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('sms') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"sms\"\n                  className={classNames({ _active: $router.route.name === \"sms\" })}\n                >\n                  <Icon icon=\"sms-6\" />\n                  <span>SMS</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('clients') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"clients\"\n                  className={classNames({ _active: $router.route.name === \"clients\" })}\n                >\n                  <Icon icon=\"user-29\" />\n                  <span>Clients</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('appointments') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"appointments\"\n                  className={classNames({ _active: $router.route.name === \"appointments\" })}\n                >\n                  <Icon icon=\"calendar-6\" />\n                  <span>Appointments</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('jobs') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"jobs\"\n                  className={classNames({ _active: $router.route.name === \"jobs\" })}\n                >\n                  <Icon icon=\"wrench-25\" />\n                  <span>Jobs</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('estimates') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"estimates\"\n                  className={classNames({ _active: $router.route.name === \"estimates\" })}\n                >\n                  <Icon icon=\"calculator-6\" />\n                  <span>Estimates</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('invoices') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"invoices\"\n                  className={classNames({ _active: $router.route.name === \"invoices\" })}\n                >\n                  <Icon icon=\"currency-3\" />\n                  <span>Invoices</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('payments') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"payments\"\n                  className={classNames({ _active: $router.route.name === \"payments\" })}\n                >\n                  <Icon icon=\"coin-6\" />\n                  <span>Payments</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('absences') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"absences\"\n                  className={classNames({ _active: $router.route.name === \"absences\" })}\n                >\n                  <Icon icon=\"time-16\" />\n                  <span>Absences</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('tickets') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"tickets\"\n                  className={classNames({ _active: $router.route.name === \"tickets\" })}\n                >\n                  <Icon icon=\"debit-4\" />\n                  <span>Tickets</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('lists') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"lists\"\n                  className={classNames({ _active: $router.route.name.startsWith('lists') })}\n                >\n                  <Icon icon=\"task-1\" />\n                  <span>Lists</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('users') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"users\"\n                  className={classNames({ _active: $router.route.name.startsWith('users') })}\n                >\n                  <Icon icon=\"user-21\" />\n                  <span>Users</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('accounts') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"accounts\"\n                  className={classNames({ _active: $router.route.name.startsWith('accounts') && $router.route.name[8] !== '_' })}\n                >\n                  <Icon icon=\"building-20\" />\n                  <span>Accounts</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('permissions') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"permissions\"\n                  className={classNames({ _active: $router.route.name.startsWith('permissions') })}\n                >\n                  <Icon icon=\"key-3\" />\n                  <span>Permissions</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('accounts_permissions') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"accounts_permissions\"\n                  className={classNames({ _active: $router.route.name.startsWith('accounts_permissions') })}\n                >\n                  <Icon icon=\"lock-7\" />\n                  <span>Account`s Permissions</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('call_center') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"call_center\"\n                  className={classNames({ _active: $router.route.name.startsWith('call_center') })}\n                >\n                  <Icon icon=\"delivery-8\" />\n                  <span>Call Center</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n\n              {isNavItemAllowed('service_resources') ? (\n                <BaseLink\n                  router={$router.router}\n                  routeName=\"service_resources\"\n                  className={classNames({ _active: $router.route.name.startsWith('service_resources') })}\n                >\n                  <Icon icon=\"construction-3\" />\n                  <span>Service Resources</span>\n                  <div className=\"__bg\"></div>\n                </BaseLink>\n              ) : null}\n            </>) : null}\n          </Scrollbar>\n        </aside>\n      ) : null}\n\n      { /* Section */ }\n      <section className={classNames('pageSection', {__withNav: props.store.navActive.is})}>\n        \n        { /* Pages */ }\n        { !props.store.user && $router.route.name === \"auth\" && <AuthPage /> }\n        { $router.route.name === \"403\" && <Page403 /> }\n\n        {props.store.user ? (<>\n          { $router.route.name === \"dashboard\" && <DashboardPage /> }\n          { $router.route.name === \"schedule\" && <SchedulePage /> }\n          { $router.route.name === \"booking\" && <BookingPage /> }\n\n          { $router.route.name === \"calls\" && <CallsPage_List /> }\n          { $router.route.name === \"calls.sources\" && <CallsSourcesPage_List /> }\n          { $router.route.name === \"calls.numbers\" && <CallsNumbersPage_List /> }\n          { $router.route.name === \"calls.areas\" && <CallsAreaPage_List /> }\n\n          { $router.route.name === \"permissions\" && <PermissionsPage_List /> }\n          { $router.route.name === \"permissions.item\" && <PermissionsPage_Item /> }\n          { $router.route.name === \"permissions.new\" && <PermissionsPage_New /> }\n\n          { $router.route.name === \"accounts_permissions\" && <AccountPermissionsPage_List /> }\n          { $router.route.name === \"accounts_permissions.item\" && <AccountPermissionsPage_Item /> }\n          { $router.route.name === \"accounts_permissions.new\" && <AccountPermissionsPage_New /> }\n\n          { $router.route.name === \"users\" && <UsersPage_List /> }\n          { $router.route.name === \"users.new\" && <UsersPage_New /> }\n          { $router.route.name === \"users.item\" && <UsersPage_Item /> }\n\n          { $router.route.name === \"accounts\" && <AccountsPage_List /> }\n          { $router.route.name === \"accounts.item\" && <AccountsPage_Item /> }\n          { $router.route.name === \"accounts.new\" && <AccountsPage_New /> }\n\n          { $router.route.name === \"service_resources\" && <ServiceResourcesPage_List /> }\n          { $router.route.name === \"service_resources.item\" && <ServiceResourcesPage_Item /> }\n          { $router.route.name === \"service_resources.new\" && <ServiceResourcesPage_New /> }\n\n          {$router.route.name === \"sms\" && <SmsPage />}\n          \n          { $router.route.name === \"clients\" && <ClientsPage_List /> }\n          {$router.route.name === \"clients.item\" && <ClientsPage_Item />}\n          {$router.route.name === \"clients.new\" && <ClientsPage_New />}\n          \n          { $router.route.name === \"appointments\" && <AppointmentsPage_List /> }\n          { $router.route.name === \"appointments.item\" && <AppointmentsPage_Item /> }\n          \n          { $router.route.name === \"jobs\" && <JobsPage_List /> }\n          { $router.route.name === \"jobs.item\" && <JobsPage_Item /> }\n          { $router.route.name === \"estimates\" && <EstimatesPage /> }\n          { $router.route.name === \"invoices\" && <InvoicesPage /> }\n          { $router.route.name === \"payments\" && <PaymentsPage /> }\n\n          { $router.route.name === \"absences\" && <AbsencesPage_List /> }\n          { $router.route.name === \"absences.item\" && <AbsencesPage_Item /> }\n          { $router.route.name === \"absences.new\" && <AbsencesPage_New /> }\n\n          { $router.route.name === \"tickets\" && <TicketsPage /> }\n\n          { $router.route.name === \"support.faq\" && <SupportPage__Faq /> }\n          { $router.route.name === \"support.tickets\" && <SupportPage__Tickets /> }\n          { $router.route.name === \"support.contacts\" && <SupportPage__Contacts /> }\n\n          { $router.route.name === \"lists\" && $router.router.navigate('lists.appliances', {}, {reload: true}) && null }\n          { $router.route.name === \"lists.appliances\" && <ListsPage_Appliances /> }\n          { $router.route.name === \"lists.brands\" && <ListsPage_Brands /> }\n          { $router.route.name === \"lists.sources\" && <ListsPage_Sources /> }\n          { $router.route.name === \"lists.areas\" && <ListsPage_Areas /> }\n\n          { $router.route.name === \"call_center.phoneNumbers\" && <CallCenter_PhoneNumbersPage_List /> }\n          { $router.route.name === \"call_center.phoneNumbers.new\" && <CallCenter_PhoneNumbersPage_New /> }\n          { $router.route.name === \"call_center.phoneNumbers.item\" && <CallCenter_PhoneNumbersPage_Item /> }\n\n          { $router.route.name === \"call_center.dispatchers\" && <CallCenter_DispatchersPage_List /> }\n          { $router.route.name === \"call_center.dispatchers.new\" && <CallCenter_DispatchersPage_New /> }\n          { $router.route.name === \"call_center.dispatchers.item\" && <CallCenter_DispatchersPage_Item /> }\n\n          { $router.route.name === \"call_center.groups\" && <CallCenter_CallGroupsPage_List /> }\n          { $router.route.name === \"call_center.groups.new\" && <CallCenter_CallGroupsPage_New /> }\n          { $router.route.name === \"call_center.groups.item\" && <CallCenter_CallGroupsPage_Item /> }\n\n          { $router.route.name === \"call_center.callFlows\" && <CallCenter_CallFlowsPage_List /> }\n          { $router.route.name === \"call_center.callFlows.item\" && <CallCenter_CallFlowsPage_Item /> }\n          { $router.route.name === \"call_center.callFlows.new\" && <CallCenter_CallFlowsPage_New /> }\n\n          { $router.route.name === \"call_center.settings\" && <CallCenter_SettingsPage_Item /> }\n        </>) : null}\n\n        { /* Page darker */ }\n        {props.store.user ? (\n          <div\n            onClick={ () => setActiveNavButton(null) }\n            className={ classNames( [\"darker\", { _shown: activeNavButton }] ) }\n          />\n        ) : null}\n      </section>\n\n      { /* Nav switch notch */ }\n      {props.store.user ? (\n        <button\n          className=\"_iconed _zeroed nav-switch-notch\"\n          onMouseOver={ () => onNavSwitchNotchHover() }\n          onFocus={ () => void 0 }\n        >\n          <Icon icon=\"_notch\" viewBox=\"0 0 10.34 29.25\" />\n        </button>\n      ) : null}\n\n      {/* Mobile menu container */}\n      <Transition in={![null, \"mobileAccountMenu\"].includes(activeNavButton)} timeout={210} mountOnEnter={true} unmountOnExit={true}>\n        {(state) => (\n          <div className={classNames(\"mobile-menu-container\", `transition-fade-${state}`)}>\n            {activeNavButton === \"helpMenu\" ? <HelpMenu /> : null}\n            {activeNavButton === \"notificationsWidget\" ? <NotificationsWidget /> : null}\n          </div>\n        )}\n      </Transition>\n    </main>\n  </>)\n})\nexport default App\n","/Users/nicole/rrrr/crm/src/funcs.ts",["441","442","443"],"import axios, { AxiosError } from \"axios\"\nimport Account from \"./models/Account\";\nimport { StoreDispatch, StoreState } from \"./store\";\nimport router from './router'\nimport {strict} from \"assert\";\n\nexport function getActiveAccount(store: StoreState): Account | null {\n  if(store.selectedAccount === null) return null\n  return store.accounts[store.selectedAccount]\n}\n\nexport async function signIn(email : string, password: string) {\n  // login\n  try {\n    await httpClient.post('/login',{email, password}).then(({data})=>{\n      data = JSON.parse(data);\n      localStorage.setItem('token', data.token);\n    })\n  } catch(e) {\n\n  }\n\n\n\n\n\n  // Redirect to auth page\n  router.navigate('auth')\n}\n\nexport async function signOut(dispatcher: StoreDispatch) {\n  dispatcher.setAccessToken(null)\n  dispatcher.setAccounts([])\n  dispatcher.setSelectedAccount(null)\n  dispatcher.setUser(null)\n\n  // Perform logout\n  try {await httpClient.post('/logout')} catch(e) {}\n  delete httpClient.defaults.headers['Authorization']\n\n  // Redirect to auth page\n  router.navigate('auth')\n}\n\nexport function nError(error: Error | AxiosError | unknown): {\n\n  error: Error | AxiosError | unknown,\n  content: {\n    code?: number,\n    errorText: string\n  }\n} {\n\n  // HTTP error (axios)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((<any>error).isAxiosError) {\n    const _error = <AxiosError>error\n    // eslint-disable-next-line no-console\n    console.warn(_error.request, _error.response)\n\n    if (!_error.response) return {\n      content: {\n        errorText: \"Can`t connect to server\"\n      },\n      error\n    }\n\n    const errorText = _error.response.data.message\n\n    return {\n      content: {\n        errorText\n      },\n      error\n    }\n  }\n\n  // Another error\n  else {\n    // eslint-disable-next-line no-console\n    console.error(error)\n  }\n\n  // Return error content\n  return {\n    content: {\n      errorText: String(error)\n    },\n    error\n  }\n}\n\nexport const httpClient = axios.create({\n  baseURL: 'http://crm56new.artemiudintsev.com/api'\n})\n//node - 'https://crm57api.artemiudintsev.com'  laravel - 'http://crm56new.artemiudintsev.com/api'\nexport function leadingZero(int: number) {\n  return (int <= 9 ? '0' : '') + int\n}\n\nexport function formatTime(seconds: number) {\n  return (\n    [\n      0,\n      Math.floor(seconds / 60),\n      Math.floor(seconds % 60),\n    ]\n      .map(x => x.toString())\n      .map(x => (x.length === 1 ? `0${x}` : x))\n      .join(\":\")\n  );\n}\n\nexport function calculatePercent(min: number, max: number) {\n  return min / max * 100\n}\n\nexport function calculateFromPercent(value: number, min: number, max: number) {\n  return max / 100 * value\n}\n","/Users/nicole/rrrr/crm/src/components/Icon.tsx",[],"/Users/nicole/rrrr/crm/src/components/NotificationsWidget.tsx",["444"],"import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../store\";\nimport Notification from \"../models/Notification\";\n\nimport \"../styles/components/notifications-widget.sass\"\nimport Icon from \"./Icon\"\nimport moment from \"moment\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst NotificationsWidget = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [notifications, setNotifications] = useState<Notification[]>([{\n    title: 'First notification',\n    createdAt: new Date(\"2021-09-07\")\n  }, {\n    title: 'Second notification',\n    createdAt: new Date(\"2021-09-08\")\n  }, {\n    title: 'Third notification',\n    createdAt: new Date(\"2021-09-09\")\n  }, {\n    title: 'Fourth notification',\n    createdAt: new Date(\"2021-09-10\")\n  }, {\n    title: 'Fifth notification',\n    createdAt: new Date(\"2021-09-11\")\n  }, {\n    title: 'Sixth notification',\n    createdAt: new Date(\"2021-09-12\")\n  }, {\n    title: 'Seventh notification',\n    createdAt: new Date(\"2021-09-13\")\n  }, {\n    title: 'Eight notification',\n    createdAt: new Date(\"2021-09-14\")\n  }])\n  \n  // Render function\n  return (\n    <div className=\"NotificationsWidget\">\n      \n      <div className=\"header\">\n\n        <div className=\"title\">\n          Notifications\n        </div>\n\n        <button className=\"_zeroed\">\n          Mark all as read\n        </button>\n      </div>\n\n      <div className=\"notifications-list\">\n\n        {notifications.map((notification, i) => (\n          <div className=\"notification\" key={i}>\n            <div className=\"icon\">\n              <Icon icon=\"bell-1\"/>\n            </div>\n\n            <div className=\"contents\">\n\n              <div className=\"title\">\n                {notification.title}\n              </div>\n\n              <div className=\"timestamp\">\n                <Icon icon=\"speech-bubble-15\" />\n                <span>{moment(notification.createdAt).fromNow()}</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n})\nexport default NotificationsWidget\n","/Users/nicole/rrrr/crm/src/components/HelpMenu.tsx",[],"/Users/nicole/rrrr/crm/src/components/AccountMenu.tsx",["445"],"import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { getActiveAccount, signOut } from \"../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../store\"\nimport businessAccountIconImg from \"../images/business-account_icon.svg\"\n\nimport \"../styles/components/account-menu.sass\"\nimport Icon from \"./Icon\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch,\n  full?: boolean,\n  onActiveNavButtonChange?: (mode: string) => void\n}\n\nconst AccountMenu = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  return (\n    <div className=\"AccountMenu\">\n\n      <div className=\"account-name\">\n        {`${props.store.user?.first_name} ${props.store.user?.last_name}`}\n      </div>\n\n      <div className=\"menu-buttons\">\n\n        <button className=\"_iconed\">\n          <div className=\"icon _light\">\n            <Icon icon=\"user-21\" />\n          </div>\n          <span>Accounts</span>\n\n          <div className=\"submenu\">\n\n            { props.store.accounts.map((account, i) => (\n              <button\n                className=\"_iconed\"\n                key={ i }\n                onClick={ () => props.dispatcher.setSelectedAccount(i) }\n              >\n                <img src={ businessAccountIconImg } alt=\"\" />\n                <span>{ account.name }</span>\n              </button>\n            )) }\n          </div>\n        </button>\n\n        {props.full ? (\n          <button className=\"_iconed\">\n            <div className=\"icon\">\n              <Icon icon=\"phone-1\" />\n            </div>\n            <span>Phone</span>\n          </button>\n        ) : null}\n\n        {props.full ? (\n          <button className=\"_iconed\" onClick={() => props.onActiveNavButtonChange && props.onActiveNavButtonChange('helpMenu')}>\n            <div className=\"icon\">\n              <Icon icon=\"help-1\" />\n            </div>\n            <span>Support</span>\n          </button>\n        ) : null}\n\n        {props.full ? (\n          <button className=\"_iconed\" onClick={() => props.onActiveNavButtonChange && props.onActiveNavButtonChange('notificationsWidget')}>\n            <div className=\"icon\">\n              <Icon icon=\"bell-1\" />\n            </div>\n            <span>Notifications</span>\n          </button>\n        ) : null}\n\n        <button className=\"_iconed\" onClick={ () => signOut(props.dispatcher) }>\n          <div className=\"icon\">\n            <Icon icon=\"log-out-17\" />\n          </div>\n          <span>Logout</span>\n        </button>\n      </div>\n    </div>\n  )\n})\nexport default AccountMenu\n","/Users/nicole/rrrr/crm/src/pages/Dashboard.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Auth.tsx",["446","447","448","449","450","451"],"import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../components/Icon\"\nimport { httpClient, nError } from \"../funcs\"\nimport businessAccountIconImg from \"../images/business-account_icon.svg\"\n\nimport logoImg from \"../images/logo.svg\"\n\nimport Account from \"../models/Account\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../store\";\n\nimport \"../styles/pages/auth.sass\"\nimport { validateMany } from \"../validate\"\n\nimport qs from \"qs\"\nimport { useRoute } from \"react-router5\"\nimport User from \"../models/User\"\nimport Menus from \"../models/Menus\"\n\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst AuthPage = connect(mapStateToProps, mapDispatchToProps)(function AuthPage(props: Props) {\n\n  const $router = useRoute()\n\n  const [mode, setMode] = useState<\"auth\" | \"password-reset\" | \"account-select\">($router.route.params.mode)\n  const [errorText, setErrorText] = useState<string | null>(null)\n  const [authData, setAuthData] = useState<Partial<StoreState>>({\n    accessToken: null,\n    accounts: [],\n    selectedAccount: null,\n    user: null\n  })\n  const [authForm, setAuthForm] = useState({\n    $disabled: false,\n\n    email: \"\",\n    password: \"\"\n  })\n\n  // Auth function\n  async function auth() {\n\n    // Reset error text\n    setErrorText(null)\n\n    // Prevent from sending form again\n    setAuthForm({ ...authForm, $disabled: false })\n\n    // Fetch form data\n    const { email, password } = authForm\n\n    try {\n\n      // Validate input data\n      const validationErrors = ([\n        { displayFieldText: \"E-Mail\", entity: email, rule: \"email\" },\n        { displayFieldText: \"Password\", entity: password, rule: \"password\" }\n      ])\n      // if (validationErrors.length)\n      //   throw new Error(validationErrors.join(\"\\n\"))\n\n      // Perform autorization\n      const { data: { token: accessToken } } = await httpClient.post('/login', qs.stringify({ email, password }), {\n        headers: {\n          'Accept': 'application/jsons',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      })\n\n      httpClient.defaults.headers['Authorization'] = `Bearer ${accessToken}`\n\n      // Get accounts list\n\n      const { data: { accounts }} = await httpClient.get('/accounts',{\n        headers: {\n          'Accept': 'application/jsons',\n          'Token':`Bearer ${accessToken}`\n        }\n      })\n\n\n      // Save info\n      setAuthData({\n        accessToken: accessToken,\n        accounts\n      })\n\n      // Show select account menu\n      $router.router.navigate('auth', {\n        mode: \"account-select\"\n      }, {reload: true})\n    }\n    catch (error) {\n\n      setErrorText(nError(error).content.errorText)\n    }\n    finally {\n      setAuthForm({ ...authForm, $disabled: false })\n    }\n  }\n\n  // Select account function\n  async function selectAccount(i: number) {\n    props.dispatcher.setAccessToken(authData.accessToken as string | null);\n    props.dispatcher.setAccounts(authData.accounts as Account[])\n    props.dispatcher.setSelectedAccount(i)\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`;\n  }\n\n  // Handle mode\n  useEffect(() => {\n    setMode($router.route.params.mode)\n  }, [$router.route.params.mode])\n\n  // Handle account select on page mount\n  useEffect(() => {\n    \n    if (props.store.accessToken) {\n      httpClient.get('/accounts').then(({ data: { accounts }}) => {\n        setAuthData({\n          ...authData,\n          accessToken: props.store.accessToken,\n          accounts\n        })\n      })\n    }\n  }, [])\n\n  // Render function\n  return (\n    <div className=\"AuthPage\">\n      \n      { /* Project about */ }\n      <div className=\"ProjectHeaders\" onClick={ () => mode != 'account-select' && $router.router.navigate('auth', {mode: 'auth'}, {reload: true}) }>\n        <img src={ logoImg } alt=\"\" />\n\n        <div className=\"headers\">\n          <h1>Expert @ FS</h1>\n          <h2>Manage your business!</h2>\n        </div>\n      </div>\n\n      { /* Auth wrapper */ }\n      <div className=\"auth-wrapper\">\n\n        { /* Auth form */ }\n        { mode === \"auth\" ? (\n          <form onSubmit={ (e) => {e.preventDefault(); auth()} }>\n            <h2>Sign In</h2>\n\n            <div className=\"__form-field\">\n              <div className=\"label\">E-Mail:</div>\n              <input type=\"text\" onChange={ ({ target: { value } }) => setAuthForm({ ...authForm, email: value }) } />\n            </div>\n            <div className=\"__form-field\">\n              <div className=\"label\">Password:</div>\n              <input\n                type=\"password\"\n                onChange={ ({ target: { value } }) => setAuthForm({ ...authForm, password: value }) }\n              />\n            </div>\n\n            { errorText ? (\n              <div className=\"errorText\">{ errorText }</div>\n            ) : null }\n\n            <button\n              type=\"button\"\n              className=\"_zeroed password-reset-link\"\n              onClick={ () => $router.router.navigate('auth', {mode: 'password-reset'}, {reload: true}) }\n            >\n              Forgot password?\n            </button>\n\n            <button className=\"_wa __submit\" >\n              Sign In\n            </button>\n          </form>\n        ) : null }\n        \n        { /* Password reset form */ }\n        { mode === \"password-reset\" ? (\n          <form onSubmit={ (e) => e.preventDefault() }>\n            <h2>Reset Password</h2>\n\n            <p>\n              Enter your E-Mail and we will send the link:\n            </p>\n\n            <div className=\"__form-field\">\n              <input type=\"text\" placeholder=\"Your E-Mail...\" />\n            </div>\n\n            <button className=\"_wa __submit\">\n              Submit\n            </button>\n          </form>\n        ) : null }\n        \n        { /* Select account form */ }\n        { mode === \"account-select\" ? (\n          <form onSubmit={ (e) => e.preventDefault() }>\n\n            <div className=\"account-select\">\n\n              { authData.accounts?.map((account, i) => (\n                <div className=\"account\" key={ i } onClick={ () => selectAccount(i) } aria-hidden=\"true\">\n                  <img src={ businessAccountIconImg } alt=\"\" />\n                  <span>{ account.name }</span>\n\n                  <div className=\"stats-signs\">\n                    <Icon icon=\"bell-1\"/>\n                    <Icon icon=\"help-1\"/>\n                  </div>\n                </div>\n              )) }\n            </div>\n          </form>\n        ) : null }\n      </div>\n    </div>\n  )\n})\nexport default AuthPage\n","/Users/nicole/rrrr/crm/src/pages/Tickets.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Booking.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Schedule.tsx",[],"/Users/nicole/rrrr/crm/src/pages/support/faq.tsx",[],"/Users/nicole/rrrr/crm/src/pages/support/tickets.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Appointments/List.tsx",["452","453","454","455"],"import classNames from \"classnames\"\nimport { DateTime } from \"luxon\"\nimport qs from \"qs\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../funcs/base\"\nimport {getDateRangeByPreset} from \"../../funcs/reports\"\nimport Appointment from \"../../models/Appointment\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount} from \"../../funcs\";\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'type' | 'status' | 'property_type' | 'area' | 'created_by' | 'service_resource'\n\ninterface AppointmentsReport {\n\n  interface: {\n\n    filter_words: {\n\n      type: string[],\n      status: string[],\n      property_type: string[],\n      area: string[],\n      created_by: string[],\n      service_resource: string[]\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n    \n    min_date: Date,\n    max_date: Date\n  },\n\n  permissions: {\n    show_appointment: boolean,\n    send_appointment: boolean\n  },\n\n  dashboard: {\n\n    service_calls: string,\n    recalls: string,\n    all: string,\n    closed: string\n  },\n\n  appointments: Appointment[]\n}\n\nconst AppointmentsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n  let filterWords;\n  const activeAccount = getActiveAccount(props.store) as Account;\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportData, setReportData] = useState<AppointmentsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n    \n    appointmentSharePopup: false,\n    \n    dateRangeCalendarShown: false,\n    dateRangeType: \"schedule\" as \"created\" | \"schedule\",\n    dateRangePreset: \"custom\" as DateRangePreset,\n\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n\n    page: 1,\n\n    filter_words: {\n\n      type: [] as string[],\n      status: [] as string[],\n      property_type: [] as string[],\n      area: [] as string[],\n      created_by: [] as string[],\n      service_resource: [] as string[]\n    },\n\n    sort: {\n      field: 'created_at',\n      direction: 'down' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Date',\n      value: 'created_at'\n    },{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Type',\n      value: 'type'\n    },{\n      span: 'Status',\n      value: 'status'\n    },{\n      span: 'Property Type',\n      value: 'property_type'\n    },{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Created by',\n      value: 'created_by'\n    },{\n      span: 'Schedule time',\n      value: 'schedule_time'\n    },{\n      span: 'Service resource',\n      value: 'service_resource'\n    },{\n      span: 'Is Sent',\n      value: 'is_sent'\n    }]\n\n  })\n\n  // Watch date range preset\n  useEffect(() => {\n\n    if (!reportData) return\n    \n    if(localInterface.dateRangePreset === 'custom') return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load appointments function\n\n\n  async function loadAppointments() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n    \n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    let reqData = qs.stringify({\n\n      account_id:activeAccount.account_id,\n      limit_rows: props.store.reportsMaxRows,\n      page: localInterface.page,\n      date_type: localInterface.dateRangeType,\n      date_start: localInterface.min_date.toISOString(),\n      date_end: localInterface.max_date.toISOString(),\n      sort_field: localInterface.sort.field,\n      sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n      filter_field: JSON.stringify(activeFilters),\n      ...(localInterface.search ? {search: localInterface.search} : {})\n    });\n    try {\n      const { data: appointments } = await httpClient.post('/appointments/report', reqData, {\n        headers: {\n          'Accept':'application/jsons',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }) as { data: AppointmentsReport }\n\n      setReportData({\n        ...appointments,\n\n        interface: {\n\n          ...appointments.interface,\n          min_date: DateTime.fromISO(appointments.interface.min_date as unknown as string).startOf('day').toJSDate(),\n          max_date: DateTime.fromISO(appointments.interface.max_date as unknown as string).endOf('day').toJSDate(),\n        }\n      })\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load appointments on page mount\n  useEffect(() => { loadAppointments();}, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date,\n    localInterface.dateRangeType,\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"AppointmentsPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.service_calls}</div>\n            <div className=\"legend\">Service calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.recalls}</div>\n            <div className=\"legend\">Recalls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.all}</div>\n            <div className=\"legend\">All appointments</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.closed}</div>\n            <div className=\"legend\">Closed appointments</div>\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Appointments</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangeType={localInterface.dateRangeType}\n          onDateRangeTypeChange={(value) => setLocalInterface({...localInterface, dateRangeType: value as any})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({ ...localInterface, min_date: value, dateRangePreset: 'custom' }) }\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value, dateRangePreset: 'custom'})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => {\n            $setUpdater(Math.random())\n          }}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Date</span>)}\n\n                sortDirection={localInterface.sort.field === 'created_at' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_at', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Type</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"type\")}\n                onAllFiltersChange={(value) => switchFilter(\"type\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.type.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"type\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"type\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'type' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'type', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Status</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"status\")}\n                onAllFiltersChange={(value) => switchFilter(\"status\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.status.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"status\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"status\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'status' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'status', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Property Type</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"property_type\")}\n                onAllFiltersChange={(value) => switchFilter(\"property_type\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.property_type.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"property_type\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"property_type\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'property_type' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'property_type', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"area\")}\n                onAllFiltersChange={(value) => switchFilter(\"area\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.area.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"area\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"area\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Created by</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"created_by\")}\n                onAllFiltersChange={(value) => switchFilter(\"created_by\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.created_by.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"created_by\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"created_by\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'created_by' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_by', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Schedule time</span>)}\n\n                sortDirection={localInterface.sort.field === 'schedule_time' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'schedule_time', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Service resource</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"service_resource\")}\n                onAllFiltersChange={(value) => switchFilter(\"service_resource\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.service_resource.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"service_resource\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"service_resource\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'service_resource' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'service_resource', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<Icon className=\"__icon\" icon=\"arrow-60\" />)}\n\n                sortDirection={localInterface.sort.field === 'is_sent' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'is_sent', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.appointments.map((appointment, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n                <td>{appointment.created_at}</td>\n                <td>{appointment.name}</td>\n                <td>\n                  {appointment.type === 'Recall' ? (\n                    <span className=\"red\">\n                      {appointment.type}\n                    </span>\n                  ) : appointment.type === 'Service call' ? (\n                    <span className=\"green\">\n                      {appointment.type}\n                    </span>\n                  ) : (\n                    <span className=\"blue\">\n                      {appointment.type}\n                    </span>\n                  )}\n                </td>\n                <td>{appointment.status}</td>\n                <td>{appointment.property_type}</td>\n                <td>{appointment.area}</td>\n                <td>{appointment.created_by}</td>\n                <td>{appointment.schedule_time}</td>\n                <td>{appointment.service_resource}</td>\n                <td>\n                  <button className=\"_zeroed _iconed _blue\" disabled={appointment.is_sent} onClick={(e) => { e.stopPropagation(); reportData.permissions.send_appointment && setLocalInterface({...localInterface, appointmentSharePopup: true}) }}>\n                    <Icon icon=\"arrow-60\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium desktop table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.appointments.map((appointment, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n                <td>\n                  <div>{appointment.name}</div>\n                  <div>{appointment.created_at}</div>\n                </td>\n                <td>\n                  <div>{appointment.service_resource}</div>\n                  <div>{appointment.created_by}</div>\n                </td>\n                <td>\n                  <div>{appointment.area}</div>\n                  <div>\n                    {appointment.type === 'Recall' ? (\n                      <span className=\"red\">\n                        {appointment.type}\n                      </span>\n                    ) : appointment.type === 'Service call' ? (\n                      <span className=\"green\">\n                        {appointment.type}\n                      </span>\n                    ) : (\n                      <span className=\"blue\">\n                        {appointment.type}\n                      </span>\n                    )}\n                  </div>\n                </td>\n                <td>\n                  <div>{appointment.property_type}</div>\n                  <div>{appointment.status}</div>\n                </td>\n                <td>\n                  <div>{appointment.schedule_time}</div>\n                  <div>&nbsp;</div>\n                </td>\n                <td>\n                  <button className=\"_zeroed _iconed _blue\" disabled={appointment.is_sent} onClick={(e) => { e.stopPropagation(); setLocalInterface({...localInterface, appointmentSharePopup: true}) }}>\n                    <Icon icon=\"arrow-60\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.appointments.map((appointment, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div className=\"flex-container\">\n                      <strong>{appointment.name}</strong>\n                      <button className=\"_zeroed _iconed _blue\" disabled={appointment.is_sent} onClick={(e) => { e.stopPropagation(); reportData.permissions.send_appointment && setLocalInterface({...localInterface, appointmentSharePopup: true}) }}>\n                        <Icon icon=\"arrow-60\" />\n                      </button>\n                    </div>\n                    <div>\n                      {appointment.schedule_time}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      {appointment.type === 'Recall' ? (\n                        <span className=\"red\">\n                          {appointment.type}\n                        </span>\n                      ) : appointment.type === 'Service call' ? (\n                        <span className=\"green\">\n                          {appointment.type}\n                        </span>\n                      ) : (\n                        <span className=\"blue\">\n                          {appointment.type}\n                        </span>\n                      )}\n                    </div>\n                    <div>\n                      {appointment.property_type}\n                    </div>\n                    <div>\n                      <div className=\"fw500\">{appointment.status}</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Area:</span>\n                      <span> {appointment.area}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Service Resourse:</span>\n                      <span> {appointment.service_resource}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      {appointment.created_at}\n                    </div>\n                    <div>\n                      Created by {appointment.created_by}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n\n        {/* Item share popup */}\n        {localInterface.appointmentSharePopup ? (\n          <div className=\"popup appointmentSharePopup\" onClick={() => setLocalInterface({...localInterface, appointmentSharePopup: false})}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"item-name\">\n                2665NSM-A-01\n              </div>\n\n              <button className=\"_wa _iconed _bordered _blue\">\n                <span>Send</span>\n                <Icon icon=\"arrow-60\" />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default AppointmentsPage_List\n","/Users/nicole/rrrr/crm/src/pages/support/contacts.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Page403.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Clients/List.tsx",["456","457","458"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport {getActiveAccount, httpClient, nError} from \"../../funcs\"\nimport Client from \"../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport storage from \"redux-persist/lib/storage\";\nimport qs from \"qs\";\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'source'\n\ninterface ClientsReport {\n\n  interface: {\n\n    filter_words: {\n\n      source: string[],\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_client: boolean,\n  },\n\n  dashboard: {\n\n    all: string,\n    unpaid: string,\n    new_this_month: string,\n    new_last_month: string\n  },\n\n  clients: Client[]\n}\n\nconst ClientsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute();\n  const activeAccount = getActiveAccount(props.store) as Account\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<ClientsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n    max_rows: 100 as 50 | 100 | 250 | 500,\n\n    filter_words: {\n\n      source: [] as string[],\n    },\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },\n    {\n      span: 'Date',\n      value: 'created_at'\n    },{\n      span: 'Main Phone',\n      value: 'phone'\n    },{\n      span: 'Source',\n      value: 'source'\n    },{\n      span: 'Jobs',\n      value: 'jobs'\n    },{\n      span: 'Appointments',\n      value: 'appointments'\n    },{\n      span: 'Recalls',\n      value: 'recalls'\n    },{\n      span: 'Total',\n      value: 'total'\n    },{\n      span: 'Paid',\n      value: 'paid'\n    },{\n      span: 'Unpaid',\n      value: 'unpaid'\n    }]\n\n  })\n\n  // Load clients function\n  async function loadClients() {\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n    let reqData = {\n      account_id:activeAccount.account_id,\n      limit_rows: props.store.reportsMaxRows,\n      page: localInterface.page,\n      sort_field: localInterface.sort.field,\n      sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n      filter_field: JSON.stringify(activeFilters),\n      ...(localInterface.search ? {search: localInterface.search} : {})\n    };\n    try {\n      const { data: clients } = (await httpClient.post('/clients/report',qs.stringify(reqData))) as {data: ClientsReport}\n\n      setReportData(clients)\n\n\n    }\n    catch (error) {\n\n      nError(error)\n    }\n  }\n\n  // Load clients on page mount\n\n  useEffect(() => { loadClients()}, [\n    $updater,\n    localInterface.page\n  ])\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  function isAllFiltersSelected(field: \"source\") {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"ClientsPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.all}</div>\n            <div className=\"legend\">All Clients</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.unpaid}</div>\n            <div className=\"legend\">Unpaid</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.new_this_month}</div>\n            <div className=\"legend\">New This Month</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.new_last_month}</div>\n            <div className=\"legend\">New Last Month</div>\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Clients</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => {\n            $setUpdater(Math.random());\n          }}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random());\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('clients.new', {}, {reload: true})}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Client</span>\n                <Icon icon=\"user-29\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Main phone</span>)}\n\n                sortDirection={localInterface.sort.field === 'phone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'phone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Source</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"source\")}\n                onAllFiltersChange={(value) => switchFilter(\"source\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.source.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"source\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"source\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'source' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'source', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Jobs</span>)}\n\n                sortDirection={localInterface.sort.field === 'jobs' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'jobs', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Appointments</span>)}\n\n                sortDirection={localInterface.sort.field === 'appointments' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'appointments', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Recalls</span>)}\n\n                sortDirection={localInterface.sort.field === 'recalls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'recalls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total</span>)}\n\n                sortDirection={localInterface.sort.field === 'total' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Paid</span>)}\n\n                sortDirection={localInterface.sort.field === 'paid' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'paid', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Unpaid</span>)}\n\n                sortDirection={localInterface.sort.field === 'unpaid' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'unpaid', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.clients.map((client, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n                <td>{client.name}</td>\n                <td>{client.main_phone}</td>\n                <td>{client.source}</td>\n                <td>{client.jobs}</td>\n                <td>{client.appointments}</td>\n                <td>{client.recalls}</td>\n                <td>{client.total}</td>\n                <td>{client.paid}</td>\n                <td>{client.unpaid}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.clients.map((client, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n                <td>\n                  <div>{client.name}</div>\n                  <div>{client.main_phone}</div>\n                </td>\n                <td>\n                  <div>{client.source}</div>\n                  <div>Jobs: {client.jobs}</div>\n                </td>\n                <td>\n                  <div>Appointments: {client.appointments}</div>\n                  <div>Recalls: {client.recalls}</div>\n                </td>\n                <td>\n                  <div>Total: {client.total}</div>\n                  <div>Paid: {client.paid}</div>\n                </td>\n                <td>\n                  <div>Unpaid: {client.unpaid}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.clients.map((client, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{client.name}</b></div>\n                    <div>\n                      {client.main_phone}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      Total: <b>{client.total}</b>\n                    </div>\n                    <div>\n                      Paid: <b>{client.paid}</b>\n                    </div>\n                    <div>\n                      Unpaid: <b>{client.unpaid}</b>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Jobs:</span>\n                      <span> {client.jobs}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Recalls:</span>\n                      <span> {client.recalls}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Appointments:</span>\n                      <span> {client.appointments}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{client.source}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default ClientsPage_List\n","/Users/nicole/rrrr/crm/src/pages/Payments.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Estimates.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Appointments/Item.tsx",["459","460"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport {httpClient, nError} from \"../../funcs\"\nimport Appointment from \"../../models/Appointment\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Client from \"../../models/Client\"\nimport ServiceResource from \"../../models/ServiceResource\"\nimport classNames from \"classnames\"\nimport { useRoute } from \"react-router5\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface AppointmentData {\n  \n  permissions: {\n    \n    edit_appointment: boolean,\n    show_client: boolean,\n  },\n\n  appointment: Appointment,\n\n  clients: Client[],\n\n  edit: {\n    type: string[],\n    status: string[],\n    service_resources: ServiceResource[]\n  }\n}\n\nconst AppointmentsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n  \n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [appointmentData, setAppointmentData] = useState<AppointmentData | null>(null)\n\n  const [newAppointmentData, setNewAppointmentData] = useState<Partial<Appointment> | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: appointmentData } = await httpClient.get('/appointmens') as {data: AppointmentData}\n\n      setAppointmentData(appointmentData)\n\n      setNewAppointmentData({\n        ...appointmentData.appointment,\n        schedule_time_start: new Date(appointmentData.appointment.schedule_time_start),\n        schedule_time_end: new Date(appointmentData.appointment.schedule_time_end),\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load appointment data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newAppointmentData\n  ])\n  \n  // Render function\n  return (<>\n    {appointmentData && newAppointmentData ? (\n      <div className=\"AppointmentsPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Appointment</h1>\n\n          {appointmentData?.permissions.edit_appointment && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" disabled={true} defaultValue={newAppointmentData.name} onChange={({target: {value}}) => setNewAppointmentData({...newAppointmentData, name: value})} />\n              </div>\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Type:</span>\n                <Select disabled={!editing} options={appointmentData.edit.type.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newAppointmentData.type as string} onChange={(value: string) => setNewAppointmentData({...newAppointmentData, type: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Status:</span>\n                <Select disabled={!editing} options={appointmentData.edit.status.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newAppointmentData.status as string} onChange={(value: string) => setNewAppointmentData({...newAppointmentData, status: value})}/>\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Job:</span>\n                <input type=\"text\" disabled={true} defaultValue={newAppointmentData.job} />\n              </div>\n\n              <div className=\"field\">\n                <span>Property Type:</span>\n                <input type=\"text\" disabled={true} defaultValue={newAppointmentData.property_type} />\n              </div>\n\n              <div className=\"field\">\n                <span>Area:</span>\n                <input type=\"text\" disabled={true} defaultValue={newAppointmentData.area} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Schedule</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Appointment start:</span>\n                <Datetime inputProps={{ disabled: !editing }} value={newAppointmentData.schedule_time_start} onChange={(value) => setNewAppointmentData({...newAppointmentData, schedule_time_start: moment.isMoment(value) ? value.toDate() : (appointmentData as AppointmentData).appointment.schedule_time_start})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Appointment end:</span>\n                <Datetime inputProps={{ disabled: !editing }} value={newAppointmentData.schedule_time_end} onChange={(value) => setNewAppointmentData({...newAppointmentData, schedule_time_end: moment.isMoment(value) ? value.toDate() : (appointmentData as AppointmentData).appointment.schedule_time_end})} />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Service Resource:</span>\n                <Select disabled={!editing} options={appointmentData.edit.service_resources.map((option) => ({\n                  span: option.nickname,\n                  value: option.nickname\n                }))} selectedOption={newAppointmentData.service_resource as string} onChange={(value: string) => setNewAppointmentData({...newAppointmentData, service_resource: value})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={appointmentData?.appointment.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={appointmentData?.appointment.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={appointmentData?.appointment.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={appointmentData?.appointment.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Clients</div>\n\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Date</th>\n              <th>Main Phone</th>\n              <th>Source</th>\n              <th>Jobs</th>\n              <th>Appointments</th>\n              <th>Recalls</th>\n              <th>Total</th>\n              <th>Paid</th>\n              <th>Unpaid</th>\n            </tr>\n            {appointmentData.clients.map((client, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n                <td>{client.name}</td>\n                <td>{client.main_phone}</td>\n                <td>{client.source}</td>\n                <td>{client.jobs}</td>\n                <td>{client.appointments}</td>\n                <td>{client.recalls}</td>\n                <td>{client.total}</td>\n                <td>{client.paid}</td>\n                <td>{client.unpaid}</td>\n              </tr>\n            ))}\n          </table>\n\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {appointmentData.clients.map((client, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n                <td>\n                  <div>{client.name}</div>\n                  <div>{client.main_phone}</div>\n                </td>\n                <td>\n                  <div>{client.source}</div>\n                  <div>Jobs: {client.jobs}</div>\n                </td>\n                <td>\n                  <div>Appointments: {client.appointments}</div>\n                  <div>Recalls: {client.recalls}</div>\n                </td>\n                <td>\n                  <div>Total: {client.total}</div>\n                  <div>Paid: {client.paid}</div>\n                </td>\n                <td>\n                  <div>Unpaid: {client.unpaid}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {appointmentData.clients.map((client, i: number) => (\n                <div className=\"item\" key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><b>{client.name}</b></div>\n                      <div>\n                        {client.main_phone}\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Total: <b>{client.total}</b>\n                      </div>\n                      <div>\n                        Paid: <b>{client.paid}</b>\n                      </div>\n                      <div>\n                        Unpaid: <b>{client.unpaid}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Jobs:</span>\n                        <span> {client.jobs}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Recalls:</span>\n                        <span> {client.recalls}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Appointments:</span>\n                        <span> {client.appointments}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{client.source}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Appointment</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Appointment\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the appointment it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default AppointmentsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Invoices.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Absences/Item.tsx",["461","462","463"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport {httpClient, nError} from \"../../funcs\"\nimport Absence from \"../../models/Absence\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface AbsenceData {\n  \n  permissions: {\n    \n    edit_absence: boolean,\n  },\n\n  absence: Absence,\n\n  edit: {\n    service_resource: string,\n    area: string\n  }[]\n}\n\nconst AbsencesPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [absenceData, setAbsenceData] = useState<AbsenceData | null>(null)\n\n  const [newAbsenceData, setNewAbsenceData] = useState<Partial<Absence>>({\n    \n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: absenceData } = (await httpClient.get('/absences')) as {data: AbsenceData}\n\n      setAbsenceData(absenceData)\n\n      setNewAbsenceData({\n        ...absenceData.absence,\n        absence_start: new Date(absenceData.absence.absence_start),\n        absence_end: new Date(absenceData.absence.absence_end),\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load absence data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newAbsenceData\n  ])\n\n  // Handle service resource changing\n  useEffect(() => {\n\n    let sr = newAbsenceData.service_resource\n\n    if (!absenceData) return\n    \n    setAbsenceData({\n      ...absenceData,\n      absence: {\n        ...absenceData.absence,\n        area: absenceData.edit.find((item) => item.service_resource === sr)?.area as string\n      }\n    })\n\n  }, [newAbsenceData.service_resource])\n  \n  // Render function\n  return (<>\n    {absenceData && newAbsenceData.absence_start ? (\n      <div className=\"AbsencesPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Absence</h1>\n\n          {absenceData?.permissions.edit_absence && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Service resource:</span>\n                <Select disabled={!editing} options={absenceData.edit.map((option) => ({\n                  span: option.service_resource,\n                  value: option.service_resource\n                }))} selectedOption={newAbsenceData.service_resource as string} onChange={(value) => setNewAbsenceData({...newAbsenceData, service_resource: value as string})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Area:</span>\n                <Select disabled={true} options={absenceData.edit.map((option) => ({\n                  span: option.area,\n                  value: option.area\n                }))} selectedOption={absenceData.absence.area} onChange={(value) => setAbsenceData({...absenceData, absence: {...absenceData.absence, area: value as string}})}/>\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Absence start:</span>\n                <Datetime inputProps={{ disabled: !editing }} value={newAbsenceData.absence_start as Date} onChange={(value) => setNewAbsenceData({...newAbsenceData, absence_start: moment.isMoment(value) ? value.toDate() : (absenceData as AbsenceData).absence.absence_start})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Absence end:</span>\n                <Datetime inputProps={{ disabled: !editing }} value={newAbsenceData.absence_end as Date} onChange={(value) => setNewAbsenceData({...newAbsenceData, absence_end: moment.isMoment(value) ? value.toDate() : (absenceData as AbsenceData).absence.absence_end})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={absenceData?.absence.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={absenceData?.absence.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={absenceData?.absence.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={absenceData?.absence.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Absence</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Absence\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the absence it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default AbsencesPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Clients/Item.tsx",["464","465"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport {httpClient, nError} from \"../../funcs\"\nimport Client from \"../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport Select from \"../../components/Select\"\nimport Appointment from \"../../models/Appointment\"\nimport Estimate from \"../../models/Estimate\"\nimport Invoice from \"../../models/Invoice\"\nimport Payment from \"../../models/Payments\"\nimport Checkbox from \"../../components/Checkbox\"\nimport classNames from \"classnames\"\nimport Job from \"../../models/Job\"\nimport { useRoute } from \"react-router5\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface Phone {\n  name: string,\n  phone: string\n}\n\ninterface Address {\n  address: string,\n  property_type: string,\n  note: string\n}\n\ninterface Comment {\n  created_at: string,\n  comment: string,\n  created_by: string\n}\n\ninterface ClientData {\n  \n  permissions: {\n    \n    edit_client: boolean,\n    show_job: boolean,\n    show_appointment: boolean,\n    show_estimate: boolean,\n    show_invoice: boolean,\n    show_payment: boolean\n  },\n\n  client: Client,\n\n  phones: Phone[],\n  addresses: Address[],\n  comments: Comment[],\n  jobs: Job[],\n  appointments: Appointment[],\n  estimates: Estimate[],\n  invoices: Invoice[],\n  payments: Payment[]\n\n  edit: {\n    source: string[]\n  }\n}\n\nconst ClientsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n\n  const [clientData, setClientData] = useState<ClientData | null>(null)\n\n  const [newClientData, setNewClientData] = useState<Partial<Client> | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: clientData } = (await httpClient.post('/clients/report')) as {data: ClientData}\n\n      setClientData(clientData)\n      setNewClientData(clientData.client)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load client data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newClientData\n  ])\n  \n  // Render function\n  return (<>\n    {clientData && newClientData ? (\n      <div className=\"ClientsPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Client</h1>\n\n          {clientData?.permissions.edit_client && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>First Name:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={newClientData.firstname} onChange={({target: {value}}) => setNewClientData({...newClientData, firstname: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Name:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={newClientData.lastname} onChange={({target: {value}}) => setNewClientData({...newClientData, lastname: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Company:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={newClientData.company_name} onChange={({target: {value}}) => setNewClientData({...newClientData, company_name: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Source:</span>\n                <Select disabled={!editing} options={clientData.edit.source.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newClientData.source as string} onChange={(value) => setNewClientData({...newClientData, source: value as string})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Financial</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Total:</span>\n                <input type=\"text\" disabled={true} defaultValue={newClientData.total} />\n              </div>\n\n              <div className=\"field\">\n                <span>Paid:</span>\n                <input type=\"text\" disabled={true} defaultValue={newClientData.paid} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Unpaid:</span>\n                <input type=\"text\" disabled={true} defaultValue={newClientData.unpaid} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Phones</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Phone</th>\n            </tr>\n            {clientData.phones.map((phone, i) => (\n              <tr key={i}>\n                <td>{phone.name}</td>\n                <td>{phone.phone}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.phones.map((phone, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><strong>{phone.phone}</strong></div>\n                      <div>\n                        {phone.name}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Addresses</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Address</th>\n              <th>Property Type</th>\n              <th>Note</th>\n            </tr>\n            {clientData.addresses.map((address, i) => (\n              <tr key={i}>\n                <td>{address.address}</td>\n                <td>{address.property_type}</td>\n                <td>{address.note}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.addresses.map((address, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><strong>{address.address}</strong></div>\n                      <div>\n                        {address.note}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        {address.property_type}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Comments</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Date</th>\n              <th>Comment</th>\n              <th>User</th>\n            </tr>\n            {clientData.comments.map((comment, i) => (\n              <tr key={i}>\n                <td>{comment.created_at}</td>\n                <td>{comment.comment}</td>\n                <td>{comment.created_by}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.comments.map((comment, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><strong>{comment.created_at}</strong></div>\n                      <div>\n                        {comment.comment}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        <b>{comment.created_by}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={newClientData.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={newClientData.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={newClientData.last_edited_at} disabled={ true } />\n              </div>\n              <div className=\"field\">\n                <span>Last Edited by:</span>\n                <input type=\"text\" defaultValue={newClientData.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Appointments</div>\n\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Date</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Status</th>\n              <th>Property type</th>\n              <th>Area</th>\n              <th>Created by</th>\n              <th>Schedule time</th>\n              <th>Service resource</th>\n            </tr>\n            {clientData.appointments.map((appointment, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n                <td>{appointment.created_at}</td>\n                <td>{appointment.name}</td>\n                <td>\n                  {appointment.type === 'Recall' ? (\n                    <span className=\"red\">\n                      {appointment.type}\n                    </span>\n                  ) : appointment.type === 'Service call' ? (\n                    <span className=\"green\">\n                      {appointment.type}\n                    </span>\n                  ) : (\n                    <span className=\"blue\">\n                      {appointment.type}\n                    </span>\n                  )}\n                </td>\n                <td>{appointment.status}</td>\n                <td>{appointment.property_type}</td>\n                <td>{appointment.area}</td>\n                <td>{appointment.created_by}</td>\n                <td>{appointment.schedule_time}</td>\n                <td>{appointment.service_resource}</td>\n              </tr>\n            ))}\n          </table>\n\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {clientData.appointments.map((appointment, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n                <td>\n                  <div>{appointment.name}</div>\n                  <div>{appointment.created_at}</div>\n                </td>\n                <td>\n                  <div>{appointment.service_resource}</div>\n                  <div>{appointment.created_by}</div>\n                </td>\n                <td>\n                  <div>{appointment.area}</div>\n                  <div>{appointment.type}</div>\n                </td>\n                <td>\n                  <div>{appointment.property_type}</div>\n                  <div>{appointment.status}</div>\n                </td>\n                <td>\n                  <div>{appointment.schedule_time}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.appointments.map((appointment, i: number) => (\n                <div className=\"item\" key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div className=\"flex-container\">\n                        <strong>{appointment.name}</strong>\n                      </div>\n                      <div>\n                        {appointment.schedule_time}\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        {appointment.type === 'Recall' ? (\n                          <span className=\"red\">\n                            {appointment.type}\n                          </span>\n                        ) : appointment.type === 'Service call' ? (\n                          <span className=\"green\">\n                            {appointment.type}\n                          </span>\n                        ) : (\n                          <span className=\"blue\">\n                            {appointment.type}\n                          </span>\n                        )}\n                      </div>\n                      <div>\n                        {appointment.property_type}\n                      </div>\n                      <div>\n                        <div className=\"fw500\">{appointment.status}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Area:</span>\n                        <span> {appointment.area}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Service Resourse:</span>\n                        <span> {appointment.service_resource}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        {appointment.created_at}\n                      </div>\n                      <div>\n                        Created by {appointment.created_by}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Estimates</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th><span>Date</span></th>\n              <th><span>Name</span></th>\n              <th><span>Status</span></th>\n              <th><span>Service Resource</span></th>\n              <th><span>Area</span></th>\n              <th><span>Total</span></th>\n              <th><span>Comment</span></th>\n            </tr>\n            {clientData.estimates.map((estimate, i) => (\n              <tr key={i}>\n                <td>{estimate.created_at}</td>\n                <td>{estimate.name}</td>\n                <td>{estimate.status}</td>\n                <td>{estimate.service_resource}</td>\n                <td>{estimate.area}</td>\n                <td>{estimate.total}</td>\n                <td>{estimate.comment}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.estimates.map((estimate, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <strong>{estimate.name}</strong>\n                      </div>\n                      <div>\n                        <strong>{estimate.status}</strong>\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Total: <b>{estimate.total}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Area:</span>\n                        <span> {estimate.area}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Service Resourse:</span>\n                        <span> {estimate.service_resource}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{estimate.created_at}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text\">\n                    {estimate.comment}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Invoices</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th><span>Date</span></th>\n              <th><span>Name</span></th>\n              <th><span>Status</span></th>\n              <th><span>Service Resource</span></th>\n              <th><span>Area</span></th>\n              <th><span>Total</span></th>\n              <th><span>Paid</span></th>\n              <th><span>Unpaid</span></th>\n            </tr>\n\n            {clientData.invoices.map((invoice, i) => (\n              <tr key={i}>\n                <td>{invoice.created_at}</td>\n                <td>{invoice.name}</td>\n                <td>{invoice.status}</td>\n                <td>{invoice.service_resource}</td>\n                <td>{invoice.area}</td>\n                <td>{invoice.total}</td>\n                <td>{invoice.paid}</td>\n                <td>{invoice.unpaid}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.invoices.map((invoice, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><b>{invoice.name}</b></div>\n                      <div>\n                        {invoice.status}\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Total: <b>{invoice.total}</b>\n                      </div>\n                      <div>\n                        Paid: <b>{invoice.paid}</b>\n                      </div>\n                      <div>\n                        Unpaid: <b>{invoice.unpaid}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Area:</span>\n                        <span> {invoice.area}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Service Resource:</span>\n                        <span> {invoice.service_resource}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{invoice.created_at}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Payments</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th><span>Date</span></th>\n              <th><span>Type</span></th>\n              <th><span>Number</span></th>\n              <th><span>Service</span></th>\n              <th><span>Status</span></th>\n              <th><span>Net</span></th>\n              <th><span>Total</span></th>\n              <th><span>Fee</span></th>\n            </tr>\n\n            {clientData.payments.map((payment, i) => (\n              <tr key={i}>\n                <td>{payment.created_at}</td>\n                <td>{payment.type}</td>\n                <td>{payment.number}</td>\n                <td>{payment.service}</td>\n                <td>{payment.status}</td>\n                <td>{payment.net}</td>\n                <td>{payment.total}</td>\n                <td>{payment.fee}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {clientData.payments.map((payment, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><strong>{payment.number}</strong></div>\n                      <div>{payment.service}</div>\n                      <div>\n                        <b>{payment.status}</b>\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Net: <b>{payment.net}</b>\n                      </div>\n                      <div>\n                        Total: <b>{payment.total}</b>\n                      </div>\n                      <div>\n                        Fee: <b>{payment.fee}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      \n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{payment.created_at}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Client</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item delete popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Client\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the client it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default ClientsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Absences/List.tsx",["466","467","468","469"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { DateTime } from \"luxon\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../funcs/base\"\nimport { getDateRangeByPreset } from \"../../funcs/reports\"\nimport Absence from \"../../models/Absence\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport qs from \"qs\";\nimport {getActiveAccount} from \"../../funcs\";\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'area' | 'created_by' | 'service_resource'\n\ninterface AbsencesReport {\n\n  interface: {\n\n    filter_words: {\n\n      area: string[],\n      created_by: string[],\n      service_resource: string[]\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n    \n    min_date: Date,\n    max_date: Date\n  },\n\n  permissions: {\n    show_absence: boolean,\n  },\n\n  absences: Absence[]\n}\n\nconst AbsencesPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportData, setReportData] = useState<AbsencesReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    dateRangeCalendarShown: false,\n    dateRangeType: \"schedule\" as \"created\" | \"schedule\",\n    dateRangePreset: \"custom\" as DateRangePreset,\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n\n    page: 1,\n\n    filter_words: {\n      area: [] as string[],\n      created_by: [] as string[],\n      service_resource: [] as string[]\n    },\n\n    sort: {\n      field: 'created_at',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Date',\n      value: 'created_at'\n    },{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Service Resource',\n      value: 'service_resource'\n    },{\n      span: 'Absence Start',\n      value: 'absence_start'\n    },{\n      span: 'Absence End',\n      value: 'absence_end'\n    },{\n      span: 'Created by',\n      value: 'created_by'\n    }]\n\n  })\n\n  // Watch date range preset\n  useEffect(() => {\n\n    if(!reportData) return\n\n    if(localInterface.dateRangePreset === 'custom') return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load absences function\n  async function loadAbsences() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n    \n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: absencesReport } = (await httpClient.post('/absences/report', qs.stringify({\n        account_id:activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        date_type: localInterface.dateRangeType,\n        date_start: localInterface.min_date.toISOString(),\n        date_end:localInterface.max_date.toISOString(),\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n\n      }))) as {data: AbsencesReport}\n\n      setReportData({\n        ...absencesReport,\n\n        interface: {\n\n          ...absencesReport.interface,\n          min_date: DateTime.fromISO(absencesReport.interface.min_date as unknown as string).startOf('day').toJSDate(),\n          max_date: DateTime.fromISO(absencesReport.interface.max_date as unknown as string).endOf('day').toJSDate(),\n        }\n      })\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load absences on page mount\n  useEffect(() => { loadAbsences() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date,\n    localInterface.dateRangeType,\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  // Is all filters selected function\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  // Filter switch function\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"AbsencesPage_List\" >\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Absences</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangeType={localInterface.dateRangeType}\n          onDateRangeTypeChange={(value) => setLocalInterface({...localInterface, dateRangeType: value as any})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({...localInterface, min_date: value, dateRangePreset: 'custom'})}\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value, dateRangePreset: 'custom'})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {$setUpdater(Math.random());}}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({ ...localInterface, sort: { ...localInterface.sort, direction: value } })}\n          onSortFire={() => $setUpdater(Math.random())}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('absences.new')}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Absence</span>\n                <Icon icon=\"time-16\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Date</span>)}\n\n                sortDirection={localInterface.sort.field === 'created_at' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_at', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Service resource</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"service_resource\")}\n                onAllFiltersChange={(value) => switchFilter(\"service_resource\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.service_resource.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"service_resource\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"service_resource\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'service_resource' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'service_resource', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"area\")}\n                onAllFiltersChange={(value) => switchFilter(\"area\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.area.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"area\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"area\", value.word, value.selected)}\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Absence Start</span>)}\n\n                sortDirection={localInterface.sort.field === 'absence_start' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'absence_start', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Absence End</span>)}\n              \n                sortDirection={localInterface.sort.field === 'absence_end' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'absence_end', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Created by</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"created_by\")}\n                onAllFiltersChange={(value) => switchFilter(\"created_by\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.created_by.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"created_by\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"created_by\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'created_by' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_by', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.absences.map((absence, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('absences.item', {\n                absenceId: absence.absence_id\n              }, {reload: true})}>\n                <td>{absence.created_at}</td>\n                <td>{absence.service_resource}</td>\n                <td>{absence.area}</td>\n                <td>{absence.absence_start}</td>\n                <td>{absence.absence_end}</td>\n                <td>{absence.created_by}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium desktop table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.absences.map((absence, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('absences.item', {\n                absenceId: absence.absence_id\n              }, {reload: true})}>\n                <td>\n                  <div>{absence.created_at}</div>\n                  <div>{absence.area}</div>\n                </td>\n                <td>\n                  <div>{absence.service_resource}</div>\n                  <div>{absence.created_by}</div>\n                </td>\n                <td>\n                  <div>{absence.absence_start}</div>\n                  <div>{absence.absence_end}</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.absences.map((absence, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('absences.item', {\n                absenceId: absence.absence_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <span className=\"gray\">Service resource:</span>\n                    <span> {absence.service_resource}</span>\n                  </div>\n\n                  <div className=\"__right\">\n                    <span className=\"gray\">Area:</span>\n                    <span> {absence.area}</span>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      Start: <b>{absence.absence_start}</b>\n                    </div>\n                    <div>\n                      End: <b>{absence.absence_end}</b>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      {absence.created_at}\n                    </div>\n                    <div>\n                      Created by {absence.created_by}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({ ...localInterface, sort: { ...localInterface.sort, direction: value } })}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default AbsencesPage_List\n","/Users/nicole/rrrr/crm/src/pages/Absences/New.tsx",["470","471","472"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport Absence from \"../../models/Absence\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport { DateTime } from \"luxon\"\n\nimport DateTimeComponent from \"react-datetime\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst AbsencesPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n  \n  const [newAbsenceData, setNewAbsenceData] = useState<Partial<Absence>>({\n    service_resource: '',\n    area: '',\n    absence_start: DateTime.now().plus({hours: 1}).set({minute: 0}).toJSDate(),\n    absence_end: DateTime.now().plus({hours: 1}).set({minute: 0}).toJSDate()\n  })\n\n  const [absenceDataEdit, setNewAbsenceDataEdit] = useState<{\n    service_resource: string,\n    area: string\n  }[] | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: absenceData } = (await axios.get('/json/absences.json'))\n\n      setNewAbsenceDataEdit(absenceData.edit)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load absence data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newAbsenceData\n  ])\n\n  // Handle service resource changing\n  useEffect(() => {\n\n    let sr = newAbsenceData.service_resource\n\n    if(!absenceDataEdit) return\n    \n    setNewAbsenceData({\n      ...newAbsenceData,\n      area: absenceDataEdit.find((item) => item.service_resource === sr)?.area as string\n    })\n\n  }, [newAbsenceData.service_resource])\n  \n  // Render function\n  return (<>\n    {absenceDataEdit ? (\n      <div className=\"AbsencesPage_Item AbsencePage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Absence</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Service resource:</span>\n                <Select options={absenceDataEdit.map((option) => ({\n                  span: option.service_resource,\n                  value: option.service_resource\n                }))} selectedOption={newAbsenceData.service_resource as string} onChange={(value) => setNewAbsenceData({...newAbsenceData, service_resource: value as string})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Area:</span>\n                <Select disabled={true} options={absenceDataEdit.map((option) => ({\n                  span: option.area,\n                  value: option.area\n                }))} selectedOption={newAbsenceData.area as string} onChange={(value) => 2}/>\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Absence start:</span>\n                <DateTimeComponent value={newAbsenceData.absence_start as Date} onChange={(value) => setNewAbsenceData({...newAbsenceData, absence_start: moment.isMoment(value) ? value.toDate() : newAbsenceData.absence_start})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Absence end:</span>\n                <DateTimeComponent value={newAbsenceData.absence_end as Date} onChange={(value) => setNewAbsenceData({...newAbsenceData, absence_end: moment.isMoment(value) ? value.toDate() : newAbsenceData.absence_end})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div></div>\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('absences', {}, {reload: true})}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default AbsencesPage_New\n","/Users/nicole/rrrr/crm/src/pages/Lists/Sources.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Lists/Appliances.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Jobs/List.tsx",["473","474","475","476"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { DateTime } from \"luxon\"\nimport moment from \"moment\"\nimport qs from \"qs\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../funcs/base\"\nimport {getDateRangeByPreset} from \"../../funcs/reports\"\nimport Job from \"../../models/Job\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount} from \"../../funcs\";\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'status' | 'property_type' | 'area' | 'source' | 'created_by' | 'service_resource'\n\ninterface JobsReport {\n\n  interface: {\n\n    filter_words: {\n\n      status: string[],\n      property_type: string[],\n      area: string[],\n      source: string[],\n      created_by: string[],\n      service_resource: string[]\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n    \n    min_date: Date,\n    max_date: Date\n  },\n\n  permissions: {\n    show_job: boolean\n  },\n\n  dashboard: {\n\n    all: string,\n    closed: string,\n    in_progress: string,\n    canceled: string\n  },\n\n  jobs: Job[]\n}\n\nconst JobsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportData, setReportData] = useState<JobsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState(\n      {\n    search: '',\n\n    jobSharePopup: false,\n    \n    dateRangeCalendarShown: false,\n    dateRangePreset: \"custom\" as DateRangePreset,\n\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n\n    page: 1,\n\n    filter_words: {\n\n      source: [] as string[],\n      status: [] as string[],\n      property_type: [] as string[],\n      area: [] as string[],\n      created_by: [] as string[],\n      service_resource: [] as string[]\n    },\n\n    sort: {\n      field: 'created_at',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Date',\n      value: 'created_at'\n    },{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Status',\n      value: 'name'\n    },{\n      span: 'Property type',\n      value: 'property_type'\n    },{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Source',\n      value: 'source'\n    },{\n      span: 'Status',\n      value: 'status'\n    },{\n      span: 'Created by',\n      value: 'created_by'\n    },{\n      span: 'Appointments',\n      value: 'appointments'\n    },{\n      span: 'Service Resource',\n      value: 'service_resource'\n    },{\n      span: 'Total',\n      value: 'total'\n    },{\n      span: 'Paid',\n      value: 'paid'\n    }]\n\n  })\n\n\n\n  // Watch date range preset\n  useEffect(() => {\n    if (!reportData) return\n    \n    if(localInterface.dateRangePreset === 'custom') return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load jobs function\n  async function loadJobs() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n    let reqData = {\n      account_id: activeAccount.account_id,\n      limit_rows: props.store.reportsMaxRows,\n      page: localInterface.page,\n      date_start: localInterface.min_date.toISOString(),\n      date_end: localInterface.max_date.toISOString(),\n      sort_field: localInterface.sort.field,\n      sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n      filter_field: JSON.stringify(activeFilters),\n      ...(localInterface.search ? {search: localInterface.search} : {})\n    };\n    try {\n      const { data: jobs } = (await httpClient.post('/jobs/report', qs.stringify(reqData), {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Accept': 'application/json'\n        }\n      })) as { data: JobsReport }\n\n      setReportData({\n        ...jobs,\n\n        interface: {\n\n          ...jobs.interface,\n          min_date: moment(jobs.interface.min_date).startOf('day').toDate(),\n          max_date: moment(jobs.interface.max_date).endOf('day').toDate(),\n        }\n      })\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load jobs on page mount\n  useEffect(() => { loadJobs() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  // Is all filters selected function\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  // Filter switch function\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"JobsPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.all}</div>\n            <div className=\"legend\">All Jobs</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.closed}</div>\n            <div className=\"legend\">Closed</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.in_progress}</div>\n            <div className=\"legend\">In progress</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.canceled}</div>\n            <div className=\"legend\">Canceled</div>\n\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Jobs</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({...localInterface, min_date: value, dateRangePreset: 'custom'})}\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value, dateRangePreset: 'custom'})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => {\n            $setUpdater(Math.random());\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Date</span>)}\n\n                sortDirection={localInterface.sort.field === 'created_at' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_at', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Name</span>)}\n                \n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Status</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"status\")}\n                onAllFiltersChange={(value) => switchFilter(\"status\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.status.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"status\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"status\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'status' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'status', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Property type</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"property_type\")}\n                onAllFiltersChange={(value) => switchFilter(\"property_type\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.property_type.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"property_type\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"property_type\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'property_type' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'property_type', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"area\")}\n                onAllFiltersChange={(value) => switchFilter(\"area\", \"All\", value)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                filterWords={reportData.interface.filter_words.area.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"area\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"area\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Source</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"source\")}\n                onAllFiltersChange={(value) => switchFilter(\"source\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.source.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"source\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"source\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'source' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'source', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Created by</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"created_by\")}\n                onAllFiltersChange={(value) => switchFilter(\"created_by\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.created_by.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"created_by\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"created_by\", value.word, value.selected)}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'created_by' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_by', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Appointments</span>)}\n\n                sortDirection={localInterface.sort.field === 'appointments' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'appointments', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Service resource</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"service_resource\")}\n                onAllFiltersChange={(value) => switchFilter(\"service_resource\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.service_resource.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"service_resource\", filterWord)\n                }))}\n                onFilterChange={(value) => {switchFilter(\"service_resource\", value.word, value.selected) }}\n                onFilterFire={() => $setUpdater(Math.random())}\n\n                sortDirection={localInterface.sort.field === 'service_resource' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'service_resource', direction: value}})}\n              />\n              <ReportTableField\n                contents={(<span>Total</span>)}\n\n                sortDirection={localInterface.sort.field === 'total' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Paid</span>)}\n\n                sortDirection={localInterface.sort.field === 'paid' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'paid', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.jobs.map((job, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('jobs.item', {\n                jobId: job.job_id\n              }, {reload: true})}>\n                <td>{job.created_at}</td>\n                <td>{job.name}</td>\n                <td>{job.status}</td>\n                <td>{job.property_type}</td>\n                <td>{job.area}</td>\n                <td>{job.source}</td>\n                <td>{job.created_by}</td>\n                <td>{job.appointments}</td>\n                <td>{job.service_resource}</td>\n                <td>{job.total}</td>\n                <td>{job.paid}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medum screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.jobs.map((job, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('jobs.item', {\n                jobId: job.job_id\n              }, {reload: true})}>\n                <td>\n                  <div>{job.name}</div>\n                  <div>{job.created_at}</div>\n                </td>\n                <td>\n                  <div>{job.created_by}</div>\n                  <div>{job.service_resource}</div>\n                </td>\n                <td>\n                  <div>{job.area}</div>\n                  <div>{job.source}</div>\n                </td>\n                <td>\n                  <div>{job.property_type}</div>\n                  <div>{job.status}</div>\n                </td>\n                <td>\n                  <div>Appointments: {job.appointments}</div>\n                  <div>&nbsp;</div>\n                </td>\n                <td>\n                  <div>Total: {job.total}</div>\n                  <div>Paid: {job.paid}</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.jobs.map((job, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('jobs.item', {\n                jobId: job.job_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <strong>{job.name}</strong>\n                    </div>\n                    <div>\n                      Appointments: {job.appointments}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      Paid: <b>{job.paid}</b>\n                    </div>\n                    <div>\n                      Total: <b>{job.total}</b>\n                    </div>\n                    <div>\n                      {job.property_type}\n                    </div>\n                    <div>\n                      <b>{job.status}</b>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Area:</span>\n                      <span> {job.area}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Source:</span>\n                      <span> {job.source}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Service Resourse:</span>\n                      <span> {job.service_resource}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      {job.created_at}\n                    </div>\n                    <div>\n                      Created by {job.created_by}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default JobsPage_List\n","/Users/nicole/rrrr/crm/src/pages/Lists/Areas.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Lists/Brands.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Jobs/Item.tsx",["477","478","479"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\n\nimport {getActiveAccount, httpClient, nError} from \"../../funcs\"\nimport Job from \"../../models/Job\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport Select from \"../../components/Select\"\nimport Client from \"../../models/Client\"\nimport Appointment from \"../../models/Appointment\"\nimport Estimate from \"../../models/Estimate\"\nimport Invoice from \"../../models/Invoice\"\nimport Payment from \"../../models/Payments\"\nimport Checkbox from \"../../components/Checkbox\"\nimport classNames from \"classnames\"\nimport { useRoute } from \"react-router5\"\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface JobData {\n  \n  permissions: {\n    \n    edit_job: boolean,\n    show_client: boolean,\n    show_appointment: boolean,\n    show_estimate: boolean,\n    show_invoice: boolean,\n    show_payment: boolean\n  },\n\n  job: Job,\n\n  clients: Client[],\n  appointments: Appointment[],\n  estimates: Estimate[],\n  invoices: Invoice[],\n  payments: Payment[]\n\n  edit: {\n    status: string[],\n    source: string[]\n  }\n}\n\nconst JobsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n\n  const [jobData, setJobData] = useState<JobData | null>(null)\n\n  const [newJobData, setNewJobData] = useState<Partial<Job>>({\n    status: '',\n    source: ''\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: jobData } = await httpClient.get('/jobs/' + activeAccount.account_id) as {data: JobData}\n\n      setJobData(jobData)\n      setNewJobData(jobData.job)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load job data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newJobData\n  ])\n  \n  // Render function\n  return (<>\n    {jobData && newJobData.status ? (\n      <div className=\"JobsPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Job</h1>\n\n          {jobData?.permissions.edit_job && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" defaultValue={jobData?.job.name} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Property type:</span>\n                <input type=\"text\" defaultValue={jobData?.job.property_type} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Status:</span>\n                <Select disabled={!editing} options={jobData.edit.status.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newJobData.status as string} onChange={(value) => setNewJobData({...newJobData, status: value as string})}/>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Service Resource:</span>\n                <input type=\"text\" defaultValue={jobData?.job.service_resource} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Area:</span>\n                <input type=\"text\" defaultValue={jobData?.job.area} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Source:</span>\n                <Select disabled={!editing} options={jobData.edit.source.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newJobData.source as string} onChange={(value) => setNewJobData({...newJobData, source: value as string})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Financial</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Total:</span>\n                <input type=\"text\" defaultValue={jobData?.job.total} disabled={ true } />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Paid:</span>\n                <input type=\"text\" defaultValue={jobData?.job.paid} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={jobData?.job.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={jobData?.job.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={jobData?.job.last_edited_at} disabled={ true } />\n              </div>\n              <div className=\"field\">\n                <span>Last Edited by:</span>\n                <input type=\"text\" defaultValue={jobData?.job.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Clients</div>\n\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Date</th>\n              <th>Main Phone</th>\n              <th>Source</th>\n              <th>Jobs</th>\n              <th>Appointments</th>\n              <th>Recalls</th>\n              <th>Total</th>\n              <th>Paid</th>\n              <th>Unpaid</th>\n            </tr>\n            {jobData.clients.map((client, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n                <td>{client.name}</td>\n                <td>{client.main_phone}</td>\n                <td>{client.source}</td>\n                <td>{client.jobs}</td>\n                <td>{client.appointments}</td>\n                <td>{client.recalls}</td>\n                <td>{client.total}</td>\n                <td>{client.paid}</td>\n                <td>{client.unpaid}</td>\n              </tr>\n            ))}\n          </table>\n\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {jobData.clients.map((client, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n                <td>\n                  <div>{client.name}</div>\n                  <div>{client.main_phone}</div>\n                </td>\n                <td>\n                  <div>{client.source}</div>\n                  <div>Jobs: {client.jobs}</div>\n                </td>\n                <td>\n                  <div>Appointments: {client.appointments}</div>\n                  <div>Recalls: {client.recalls}</div>\n                </td>\n                <td>\n                  <div>Total: {client.total}</div>\n                  <div>Paid: {client.paid}</div>\n                </td>\n                <td>\n                  <div>Unpaid: {client.unpaid}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {jobData.clients.map((client, i: number) => (\n                <div className=\"item\" key={i} onClick={() => $router.router.navigate('clients.item', {\n                clientId: client.client_id\n              }, {reload: true})}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><b>{client.name}</b></div>\n                      <div>\n                        {client.main_phone}\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Total: <b>{client.total}</b>\n                      </div>\n                      <div>\n                        Paid: <b>{client.paid}</b>\n                      </div>\n                      <div>\n                        Unpaid: <b>{client.unpaid}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Jobs:</span>\n                        <span> {client.jobs}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Recalls:</span>\n                        <span> {client.recalls}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Appointments:</span>\n                        <span> {client.appointments}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{client.source}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Appointments</div>\n\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Date</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Status</th>\n              <th>Property type</th>\n              <th>Area</th>\n              <th>Created by</th>\n              <th>Schedule time</th>\n              <th>Service resource</th>\n            </tr>\n            {jobData.appointments.map((appointment, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n                <td>{appointment.created_at}</td>\n                <td>{appointment.name}</td>\n                <td>\n                  {appointment.type === 'Recall' ? (\n                    <span className=\"red\">\n                      {appointment.type}\n                    </span>\n                  ) : appointment.type === 'Service call' ? (\n                    <span className=\"green\">\n                      {appointment.type}\n                    </span>\n                  ) : (\n                    <span className=\"blue\">\n                      {appointment.type}\n                    </span>\n                  )}\n                </td>\n                <td>{appointment.status}</td>\n                <td>{appointment.property_type}</td>\n                <td>{appointment.area}</td>\n                <td>{appointment.created_by}</td>\n                <td>{appointment.schedule_time}</td>\n                <td>{appointment.service_resource}</td>\n              </tr>\n            ))}\n          </table>\n\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {jobData.appointments.map((appointment, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n                <td>\n                  <div>{appointment.name}</div>\n                  <div>{appointment.created_at}</div>\n                </td>\n                <td>\n                  <div>{appointment.service_resource}</div>\n                  <div>{appointment.created_by}</div>\n                </td>\n                <td>\n                  <div>{appointment.area}</div>\n                  <div>{appointment.type}</div>\n                </td>\n                <td>\n                  <div>{appointment.property_type}</div>\n                  <div>{appointment.status}</div>\n                </td>\n                <td>\n                  <div>{appointment.schedule_time}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {jobData.appointments.map((appointment, i: number) => (\n                <div className=\"item\" key={i} onClick={() => $router.router.navigate('appointments.item', {\n                appointmentId: appointment.appointment_id\n              }, {reload: true})}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div className=\"flex-container\">\n                        <strong>{appointment.name}</strong>\n                      </div>\n                      <div>\n                        {appointment.schedule_time}\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        {appointment.type === 'Recall' ? (\n                          <span className=\"red\">\n                            {appointment.type}\n                          </span>\n                        ) : appointment.type === 'Service call' ? (\n                          <span className=\"green\">\n                            {appointment.type}\n                          </span>\n                        ) : (\n                          <span className=\"blue\">\n                            {appointment.type}\n                          </span>\n                        )}\n                      </div>\n                      <div>\n                        {appointment.property_type}\n                      </div>\n                      <div>\n                        <div className=\"fw500\">{appointment.status}</div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Area:</span>\n                        <span> {appointment.area}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Service Resourse:</span>\n                        <span> {appointment.service_resource}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        {appointment.created_at}\n                      </div>\n                      <div>\n                        Created by {appointment.created_by}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Estimates</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th><span>Date</span></th>\n              <th><span>Name</span></th>\n              <th><span>Status</span></th>\n              <th><span>Service Resource</span></th>\n              <th><span>Area</span></th>\n              <th><span>Total</span></th>\n              <th><span>Comment</span></th>\n            </tr>\n            {jobData.estimates.map((estimate, i) => (\n              <tr key={i}>\n                <td>{estimate.created_at}</td>\n                <td>{estimate.name}</td>\n                <td>{estimate.status}</td>\n                <td>{estimate.service_resource}</td>\n                <td>{estimate.area}</td>\n                <td>{estimate.total}</td>\n                <td>{estimate.comment}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {jobData.estimates.map((estimate, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <strong>{estimate.name}</strong>\n                      </div>\n                      <div>\n                        <strong>{estimate.status}</strong>\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Total: <b>{estimate.total}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Area:</span>\n                        <span> {estimate.area}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Service Resourse:</span>\n                        <span> {estimate.service_resource}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{estimate.created_at}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text\">\n                    {estimate.comment}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Invoices</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th><span>Date</span></th>\n              <th><span>Name</span></th>\n              <th><span>Status</span></th>\n              <th><span>Service Resource</span></th>\n              <th><span>Area</span></th>\n              <th><span>Total</span></th>\n              <th><span>Paid</span></th>\n              <th><span>Unpaid</span></th>\n            </tr>\n\n            {jobData.invoices.map((invoice, i) => (\n              <tr key={i}>\n                <td>{invoice.created_at}</td>\n                <td>{invoice.name}</td>\n                <td>{invoice.status}</td>\n                <td>{invoice.service_resource}</td>\n                <td>{invoice.area}</td>\n                <td>{invoice.total}</td>\n                <td>{invoice.paid}</td>\n                <td>{invoice.unpaid}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {jobData.invoices.map((invoice, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><b>{invoice.name}</b></div>\n                      <div>\n                        {invoice.status}\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Total: <b>{invoice.total}</b>\n                      </div>\n                      <div>\n                        Paid: <b>{invoice.paid}</b>\n                      </div>\n                      <div>\n                        Unpaid: <b>{invoice.unpaid}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      <div>\n                        <span className=\"gray\">Area:</span>\n                        <span> {invoice.area}</span>\n                      </div>\n                      <div>\n                        <span className=\"gray\">Service Resource:</span>\n                        <span> {invoice.service_resource}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{invoice.created_at}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Payments</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th><span>Date</span></th>\n              <th><span>Type</span></th>\n              <th><span>Number</span></th>\n              <th><span>Service</span></th>\n              <th><span>Status</span></th>\n              <th><span>Net</span></th>\n              <th><span>Total</span></th>\n              <th><span>Fee</span></th>\n            </tr>\n\n            {jobData.payments.map((payment, i) => (\n              <tr key={i}>\n                <td>{payment.created_at}</td>\n                <td>{payment.type}</td>\n                <td>{payment.number}</td>\n                <td>{payment.service}</td>\n                <td>{payment.status}</td>\n                <td>{payment.net}</td>\n                <td>{payment.total}</td>\n                <td>{payment.fee}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {jobData.payments.map((payment, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><strong>{payment.number}</strong></div>\n                      <div>{payment.service}</div>\n                      <div>\n                        <b>{payment.status}</b>\n                      </div>\n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        Net: <b>{payment.net}</b>\n                      </div>\n                      <div>\n                        Total: <b>{payment.total}</b>\n                      </div>\n                      <div>\n                        Fee: <b>{payment.fee}</b>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      \n                    </div>\n\n                    <div className=\"__right small\">\n                      <div>\n                        <b>{payment.created_at}</b>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Job</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Absence\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the absence it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default JobsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Calls/List.tsx",["480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport moment from \"moment\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport { Transition } from \"react-transition-group\"\nimport AudioPlayer from \"../../components/AudioPlayer\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport Select from \"../../components/Select\"\nimport { nError } from \"../../funcs/base\"\nimport { getDateRangeByPreset } from \"../../funcs/reports\"\nimport { Call } from \"../../models/Calls\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount, httpClient} from \"../../funcs\";\nimport Account from \"../../models/Account\";\nimport qs from \"qs\";\nimport filters from \"../../components/reports/Filters\";\nimport {DateTime} from \"luxon\";\nimport {userInfo} from \"os\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'dispatcher' | 'friendly_name' | 'status'\n\ninterface CallsReport {\n\n  interface: {\n\n    filter_words: {\n\n      dispatcher: string[],\n      friendly_name: string[],\n      status: string[]\n    },\n\n    tag_words: string[],\n\n    max_pages: number,\n\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n\n    min_date: Date,\n    max_date: Date\n  },\n\n  permissions: {\n    \n    listen_call: boolean,\n    show_client: boolean,\n    show_appointment: boolean\n  },\n\n  dashboard: {\n    calls: string,\n    callers: string,\n    missed_calls: string,\n    active_calls: string\n  },\n\n  calls: Call[]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CallsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [topFilterShown, setTopFilterShown] = useState(false)\n  const [hashtagFilterShown, setHashtagFilterShown] = useState(false)\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n  const now = DateTime.now().setZone('America/New_York').startOf('day').toJSDate().toString();\n  const now1 = DateTime.now().setZone('America/New_York').endOf('day').toJSDate().toString();\n  const [reportData, setReportData] = useState<CallsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    callListenPopup: null as string | null,\n    \n    dateRangeCalendarShown: false,\n    dateRangePreset: \"custom\" as DateRangePreset,\n\n\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n    page: 1,\n\n    filter_words: {\n\n      dispatcher: [] as string[],\n      friendly_name: [] as string[],\n      status: [] as string[],\n    },\n\n    tag_words: [] as string[],\n\n    searchFilters: [ [\"source\", \"system\"], [\"inboud\", \"outbound\"]],\n    selectedSearchFilters: {type:['source'] as string[], direction:[] as string[]},\n\n    sort: {\n      field: 'created_at',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Date',\n      value: 'created_at'\n    },{\n      span: 'Dispatcher',\n      value: 'dispatcher'\n    },{\n      span: 'Caller Name',\n      value: 'caller_name'\n    },{\n      span: 'Client',\n      value: 'client'\n    },{\n      span: 'From',\n      value: 'call_from'\n    },{\n      span: 'Friendly Name',\n      value: 'friendly_name'\n    },{\n      span: 'Extension',\n      value: 'extension'\n    },{\n      span: 'Status',\n      value: 'status'\n    },{\n      span: 'Duration',\n      value: 'duration'\n    }]\n\n  })\n\n  // Watch date range preset\n  useEffect(() => {\n\n    if(!reportData) return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load calls function\n  async function loadCalls() {\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key]);\n\n    let reqData = {\n      account_id: activeAccount.account_id,\n      limit_rows: JSON.stringify(props.store.reportsMaxRows),\n      page: JSON.stringify(localInterface.page),\n      date_start: localInterface.min_date,\n      date_end: localInterface.max_date,\n      filter_tag: JSON.stringify(localInterface.tag_words),\n      main_filter: JSON.stringify(localInterface.selectedSearchFilters),\n      sort_field: localInterface.sort.field,\n      sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n      filter_field: JSON.stringify(activeFilters),\n      ...(localInterface.search ? {search: localInterface.search} : {})\n    };\n\n    try {\n      const { data: calls } = (await httpClient.post('/calls/report/calls',qs.stringify(reqData) )) as {data: CallsReport}\n\n      setReportData({\n        ...calls,\n\n        interface: {\n\n          ...calls.interface,\n          min_date: moment(calls.interface.min_date).startOf('day').toDate(),\n          max_date: moment(calls.interface.max_date).endOf('day').toDate(),\n\n        }\n\n      })\n\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n\n  }\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date\n  ])\n\n  // Load calls on page mount\n  useEffect(() => { loadCalls() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  // Is all filters selected function\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  // Filter switch function\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Is tag_word selected function\n  function isTagWordSelected(value: string) {\n    return localInterface.tag_words.includes(value)\n  }\n  \n  // Is all tag words selected function\n  function isAllTagWordsSelected() {\n    return localInterface.tag_words.length === 0\n  }\n\n  // Toggle tagword function\n  function switchTagWord(value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.tag_words]\n\n    if (toggle && value === \"All\") {\n      _arr = []\n    }\n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n    else {\n\n      if (reportData?.interface.tag_words.every((option) => _arr.concat([value]).includes(option))) {\n        _arr = []\n      }\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, tag_words: _arr})\n  }\n\n  // Is search field selected function\n\n  function isSearchFilterSelected(i:number, value: string, field: string) {\n\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.includes(value);\n    }\n    if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.includes(value);\n    }\n  }\n\n  // Is all search fields selected function\n  function isAllSearchFiltersSelected(i: number, field: string) {\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.length === 0\n    }else if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.length === 0\n    }\n\n  }\n\n  // Toggle search filter function\n  function switchSearchFilter(i: number, value: string, toggle: boolean, field: string, $arr: string[] ) {\n    let $arrType = $arr;\n    let $object = localInterface.selectedSearchFilters;\n      if (toggle && value === \"All\") {\n        $arrType = [];\n      }\n      else if (toggle == false) {\n        for (let i = 0; i < $arrType.length; i++){\n          $arrType.map((v, index) => {\n            if (v == value ){\n              $arrType.splice(index, 1)\n            }\n          })\n        }\n      } else {\n        $arrType.push(value);\n      }\n\n    if (field == 'type'){\n      if ($arrType.length == localInterface.searchFilters[0].length) {\n        $arrType = [];\n      }\n      $object.type = $arrType;\n    }\n    if (field == 'direction'){\n      if ($arrType.length == localInterface.searchFilters[1].length) {\n        $arrType = [];\n      }\n      $object.direction = $arrType;\n    }\n      setLocalInterface({...localInterface, selectedSearchFilters: $object})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallsPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.calls}</div>\n            <div className=\"legend\">Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.callers}</div>\n            <div className=\"legend\">Callers</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.missed_calls}</div>\n            <div className=\"legend\">Missed Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.active_calls}</div>\n            <div className=\"legend\">Active Calls</div>\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Calls</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({...localInterface, min_date: value})}\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => {\n            setReportIsDeprecated(false);\n            $setUpdater(Math.random());\n          }}\n      \n          childrenAfterSearch={(<>\n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setTopFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setTopFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllSearchFiltersSelected(0, 'type') || !isAllSearchFiltersSelected(1, 'direction')\n              })}>\n                <Icon icon=\"filter-8\" />\n              </button>\n\n              <Transition in={topFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                  <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                    <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(0, 'type')} onChange={(value) => switchSearchFilter(0, \"All\", value, 'type', localInterface.selectedSearchFilters.type )} />\n                    {localInterface.searchFilters[0].map((option, index) => (\n                        <Checkbox contents={option} value={isSearchFilterSelected(0, option, 'type')} onChange={(value) => switchSearchFilter(1, option, value, 'type', localInterface.selectedSearchFilters.type)} />\n                    ))}\n                    <hr />\n                    <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(1, 'direction')} onChange={(value) => switchSearchFilter(1, \"All\", value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                    {localInterface.searchFilters[1].map((option, index) => (\n                      <Checkbox contents={option} value={isSearchFilterSelected(1, option, 'direction')} onChange={(value) => switchSearchFilter(1, option, value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                    ))}\n                    <button onClick={()=>{\n                      $setUpdater(Math.random());\n                    }} className=\"_bordered _blue _wa\">\n                      Filter\n                    </button>\n                  </div>\n                )}\n              </Transition>\n            </div>\n            \n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setHashtagFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setHashtagFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllTagWordsSelected()\n              })}>\n                <Icon icon=\"hashtag-1\" />\n              </button>\n\n              <Transition in={hashtagFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                  <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                    <Checkbox contents=\"All\" value={isAllTagWordsSelected()} onChange={(value) => switchTagWord(\"All\", value)} />\n                    {reportData.interface.tag_words.map((option, i) => (\n                      <Checkbox contents={option} key={i} value={isTagWordSelected(option)} onChange={(value) => switchTagWord(option, value)} />\n                    ))}\n                    <button className=\"_bordered _blue _wa\">\n                      Filter\n                    </button>\n                  </div>\n                )}\n              </Transition>\n            </div>\n          </>)}\n\n          childrenBeforeDateType={(<>\n            <div>\n              <Select zeroed={true} options={[{\n                span: 'Calls',\n                value: 'calls'\n              }, {\n                span: 'Sources',\n                value: 'calls.sources'\n              },{\n                span: 'Area',\n                value: 'calls.areas'\n              },{\n                span: 'Numbers',\n                value: 'calls.numbers'\n              }]} selectedOption=\"calls\" onChange={(value) => $router.router.navigate(value as string, {}, {reload: true})} />\n            </div>\n          </>)}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Date</span>)}\n              \n                sortDirection={localInterface.sort.field === 'created_at' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_at', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <th></th>\n              <ReportTableField\n                contents={(<span>Dispatcher</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"dispatcher\")}\n                onAllFiltersChange={(value) => switchFilter(\"dispatcher\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.dispatcher.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"dispatcher\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"dispatcher\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'dispatcher' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'dispatcher', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Caller Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'caller_name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'caller_name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Client</span>)}\n\n                sortDirection={localInterface.sort.field === 'client' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'client', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>From</span>)}\n\n                sortDirection={localInterface.sort.field === 'call_from' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'call_from', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Friendly name</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"friendly_name\")}\n                onAllFiltersChange={(value) => switchFilter(\"friendly_name\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.friendly_name.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"friendly_name\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"friendly_name\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'friendly_name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'friendly_name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>To</span>)}\n\n                sortDirection={localInterface.sort.field === 'call_to' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'call_to', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Extension</span>)}\n\n                sortDirection={localInterface.sort.field === 'extension' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'extension', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <th></th>\n              <ReportTableField\n                contents={(<span>Status</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"status\")}\n                onAllFiltersChange={(value) => switchFilter(\"status\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.status.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"status\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"status\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'status' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'status', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Duration</span>)}\n\n                sortDirection={localInterface.sort.field === 'avg_duration' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'avg_duration', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <th></th>\n            </tr>\n            {reportData.calls.map((call, i) => (\n              <tr key={i}>\n                <td>{call.created_at}</td>\n                <td>\n                  <button className={classNames('_zeroed', '_iconed', {\n                    _red: call.status === 'Canceled',\n                    _green: call.status === 'Completed' && call.direction === 'inbound',\n                    _blue: (\n                      call.status === 'Completed' && call.direction === 'outbound'\n                    ) || (\n                      call.status === 'Active'\n                    )\n                  })}>\n                    <Icon icon=\"arrow-20\" className={classNames({\n                      '_rotated-180': call.direction === 'outbound'\n                    })} />\n                  </button>\n                </td>\n                <td>{call.dispatcher}</td>\n                <td>{call.caller_name}</td>\n                <td>{call.client ? (\n                  <div className=\"flex-container\" style={{gap: '5px'}}>\n                    <button className=\"_zeroed _iconed _gray\">\n                      <Icon icon=\"user-32\" />\n                    </button>\n                    <span>{call.client}</span>\n                  </div>\n                ) : null}</td>\n                <td>{call.call_from}</td>\n                <td>{call.friendly_name}</td>\n                <td>{call.call_to}</td>\n                <td>{call.extension}</td>\n                <td>\n                  {call.is_appointment ? (\n                    <button className={classNames('_zeroed', '_iconed', {\n                      _green: call.is_appointment === 'main',\n                      _blue: call.is_appointment === 'lead'\n                    })}>\n                      <Icon icon=\"clipboard-5\" />\n                    </button>\n                  ) : null}\n                </td>\n                <td className={classNames({\n                  'red-text': call.status === 'Canceled',\n                  'green-text': call.status === 'Completed',\n                  'blue-text': !['Canceled', 'Completed'].includes(call.status),\n                })}>{call.status}</td>\n                <td>{call.duration}</td>\n                <td>\n                  {call.call_url ? (\n                    <button className=\"_zeroed _iconed\" onClick={() => setLocalInterface({...localInterface, callListenPopup: call.call_url})}>\n                      <Icon icon=\"media-control-48\" />\n                    </button>\n                  ) : null}\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.calls.map((call, i) => (\n              <tr key={i}>\n                <td>\n                  <div>2675NSM-A-01X</div>\n                  <div className=\"flex-container _gap-narrow\">\n                    <button className={classNames('_zeroed', '_iconed', {\n                      _red: call.status === 'Canceled',\n                      _green: call.status === 'Completed' && call.direction === 'inbound',\n                      _blue: (\n                        call.status === 'Completed' && call.direction === 'outbound'\n                      ) || (\n                        call.status === 'Active'\n                      )\n                    })}>\n                      <Icon icon=\"arrow-20\" className={classNames({\n                        '_rotated-180': call.direction === 'outbound'\n                      })} />\n                    </button>\n                    <span>Dispatcher: {call.dispatcher}</span>\n                  </div>\n                </td>\n                <td>\n                  <div>\n                    {call.caller_name}\n                  </div>\n                  {call.client ? (\n                    <div className=\"flex-container\" style={{gap: '5px'}}>\n                      <button className=\"_zeroed _iconed _gray\">\n                        <Icon icon=\"user-32\" />\n                      </button>\n                      <span>{call.client}</span>\n                    </div>\n                  ) : <span>&nbsp;</span>}\n                </td>\n                <td>\n                  <div>From: {call.call_from}</div>\n                  <div>To: {call.call_to}</div>\n                </td>\n                <td>\n                  <div>{call.friendly_name}</div>\n                  <div>Extension: {call.extension}</div>\n                </td>\n                <td>\n                  {call.is_appointment ? (\n                    <button className={classNames('_zeroed', '_iconed', {\n                      _green: call.is_appointment === 'main',\n                      _blue: call.is_appointment === 'lead'\n                    })}>\n                      <Icon icon=\"clipboard-5\" />\n                    </button>\n                  ) : null}\n                </td>\n                <td>\n                  <div className={classNames({\n                    'red-text': call.status === 'Canceled',\n                    'green-text': call.status === 'Completed',\n                    'blue-text': !['Canceled', 'Completed'].includes(call.status),\n                  })}>{call.status}</div>\n                  <div className=\"flex-container _gap-narrow\">\n                    <div>{call.duration}</div>\n                    {call.call_url ? (\n                      <button className=\"_zeroed _iconed\" onClick={() => setLocalInterface({...localInterface, callListenPopup: call.call_url})}>\n                        <Icon icon=\"media-control-48\" />\n                      </button>\n                    ) : null}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.calls.map((call, i: number) => (\n              <div className=\"item\" key={i}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div className=\"flex-container\">\n                      <button className={classNames('_zeroed', '_iconed', {\n                        _red: call.status === 'Canceled',\n                        _green: call.status === 'Completed' && call.direction === 'inbound',\n                        _blue: (\n                          call.status === 'Completed' && call.direction === 'outbound'\n                        ) || (\n                          call.status === 'Active'\n                        )\n                      })}>\n                        <Icon icon=\"arrow-20\" className={classNames({\n                          '_rotated-180': call.direction === 'outbound'\n                        })} />\n                      </button>\n                      <strong>{call.friendly_name}</strong>\n                    </div>\n                    <div>\n                      <strong>{call.caller_name}</strong>\n                    </div>\n                    {call.client ? (\n                      <div className=\"flex-container\" style={{gap: '5px'}}>\n                        <button className=\"_zeroed _iconed _gray\">\n                          <Icon icon=\"user-32\" />\n                        </button>\n                        <span>{call.client}</span>\n                      </div>\n                    ) : (<span>&nbsp;</span>)}\n                  </div>\n\n                  <div className=\"__right\">\n                    <div className={classNames({\n                      'red-text': call.status === 'Canceled',\n                      'green-text': call.status === 'Completed',\n                      'blue-text': !['Canceled', 'Completed'].includes(call.status),\n                    })}>\n                      {call.status}\n                    </div>\n                    <div className=\"flex-container\">\n                      <span>{call.duration}</span>\n                      {call.call_url ? (\n                        <button className=\"_zeroed _iconed\" onClick={() => setLocalInterface({...localInterface, callListenPopup: call.call_url})}>\n                          <Icon icon=\"media-control-48\" />\n                        </button>\n                      ) : null}\n                    </div>\n                    {call.is_appointment ? (\n                      <div>\n                        <button className={classNames('_zeroed', '_iconed', {\n                          _green: call.is_appointment === 'main',\n                          _blue: call.is_appointment === 'lead'\n                        })}>\n                          <Icon icon=\"clipboard-5\" />\n                        </button>\n                      </div>\n                    ) : null}\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">From:</span>\n                      <span> {call.call_from}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">To:</span>\n                      <span> {call.call_to}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Extension:</span>\n                      <span> {call.extension}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      {call.created_at}\n                    </div>\n                    <div>\n                      Dispatcher: {call.dispatcher}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n\n        {/* Call listen popup */}\n        {localInterface.callListenPopup ? (\n          <div className=\"popup callListenPopup\" onClick={() => setLocalInterface({...localInterface, callListenPopup: null})}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"call-player\">\n                <AudioPlayer audioSrc={localInterface.callListenPopup} />\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallsPage_List\n","/Users/nicole/rrrr/crm/src/pages/Calls/NumbersList.tsx",["500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport moment from \"moment\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport { Transition } from \"react-transition-group\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport Select from \"../../components/Select\"\nimport { nError } from \"../../funcs/base\"\nimport { getDateRangeByPreset } from \"../../funcs/reports\"\nimport { CallNumber } from \"../../models/Calls\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount, httpClient} from \"../../funcs\";\nimport Account from \"../../models/Account\";\nimport {DateTime} from \"luxon\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'source' | 'area'\n\ninterface CallsReport {\n\n  interface: {\n\n    filter_words: {\n\n      source: string[],\n      area: string[]\n    },\n\n    tag_words: string[],\n\n    max_pages: number,\n\n    rows_start: number\n    rows_end: number,\n    rows_all: number,\n\n    min_date: Date,\n    max_date: Date\n  },\n\n  dashboard: {\n\n    calls: string,\n    callers: string,\n    missed_calls: string,\n    active_calls: string\n  },\n\n  numbers: CallNumber[]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CallsNumbersPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [topFilterShown, setTopFilterShown] = useState(false)\n  const [hashtagFilterShown, setHashtagFilterShown] = useState(false)\n\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportData, setReportData] = useState<CallsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    dateRangeCalendarShown: false,\n    dateRangePreset: \"custom\" as DateRangePreset,\n\n\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n\n    page: 1,\n    max_rows: 100 as 50 | 100 | 250 | 500,\n\n    filter_words: {\n\n      source: [] as string[],\n      area: [] as string[],\n    },\n\n    tag_words: [] as string[],\n\n    searchFilters: [ [\"source\", \"system\"], [\"inboud\", \"outbound\"]],\n    selectedSearchFilters: {type:['source'] as string[], direction:[] as string[]},\n\n    sort: {\n      field: 'number',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Number',\n      value: 'number'\n    },{\n      span: 'Friendly Name',\n      value: 'friendly_name'\n    },{\n      span: 'Source',\n      value: 'source'\n    },{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Total calls',\n      value: 'total_calls'\n    },{\n      span: 'Completed',\n      value: 'completed_calls'\n    },{\n      span: 'Unanswered',\n      value: 'unanswered_calls'\n    },{\n      span: 'Avg Duration',\n      value: 'avg_duration'\n    },{\n      span: 'Total appointments',\n      value: 'total_appointments'\n    }]\n\n  })\n\n  // Watch date range preset\n  useEffect(() => {\n\n    if(!reportData) return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load calls function\n  async function loadCalls() {\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n    try {\n      const { data: calls } = (await httpClient.post('/calls/report/numbers',{\n        account_id: activeAccount.account_id,\n        limit_rows: JSON.stringify(props.store.reportsMaxRows),\n        page: JSON.stringify(localInterface.page),\n        date_start: localInterface.min_date.toISOString(),\n        date_end: localInterface.max_date.toISOString(),\n        filter_tag: JSON.stringify(localInterface.tag_words),\n        main_filter: JSON.stringify(localInterface.selectedSearchFilters),\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      })) as {data: CallsReport}\n      setReportData({\n        ...calls,\n\n        interface: {\n\n          ...calls.interface,\n          min_date: moment(calls.interface.min_date).startOf('day').toDate(),\n          max_date: moment(calls.interface.max_date).endOf('day').toDate(),\n        }\n      })\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date\n  ])\n\n  // Load calls on page mount\n  useEffect(() => { loadCalls() }, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  // Is all filters selected function\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  // Filter switch function\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Is tag_word selected function\n  function isTagWordSelected(value: string) {\n    return localInterface.tag_words.includes(value)\n  }\n  \n  // Is all tag words selected function\n  function isAllTagWordsSelected() {\n    return localInterface.tag_words.length === 0\n  }\n\n  // Toggle tagword function\n  function switchTagWord(value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.tag_words]\n\n    if (toggle && value === \"All\") {\n      _arr = []\n    }\n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n    else {\n\n      if (reportData?.interface.tag_words.every((option) => _arr.concat([value]).includes(option))) {\n        _arr = []\n      }\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, tag_words: _arr})\n  }\n\n  // Is search field selected function\n  function isSearchFilterSelected(i:number, value: string, field: string) {\n\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.includes(value);\n    }\n    if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.includes(value);\n    }\n  }\n\n  // Is all search fields selected function\n  function isAllSearchFiltersSelected(i: number, field: string) {\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.length === 0\n    }else if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.length === 0\n    }\n\n  }\n\n  // Toggle search filter function\n  function switchSearchFilter(i: number, value: string, toggle: boolean, field: string, $arr: string[] ) {\n    let $arrType = $arr;\n    let $object = localInterface.selectedSearchFilters;\n    if (toggle && value === \"All\") {\n      $arrType = [];\n    }\n    else if (toggle == false) {\n      for (let i = 0; i < $arrType.length; i++){\n        $arrType.map((v, index) => {\n          if (v == value ){\n            $arrType.splice(index, 1)\n          }\n        })\n      }\n    } else {\n      $arrType.push(value);\n    }\n\n    if (field == 'type'){\n      if ($arrType.length == localInterface.searchFilters[0].length) {\n        $arrType = [];\n      }\n      $object.type = $arrType;\n    }\n    if (field == 'direction'){\n      if ($arrType.length == localInterface.searchFilters[1].length) {\n        $arrType = [];\n      }\n      $object.direction = $arrType;\n    }\n    setLocalInterface({...localInterface, selectedSearchFilters: $object})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallsNumbersPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.calls}</div>\n            <div className=\"legend\">Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.callers}</div>\n            <div className=\"legend\">Callers</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.missed_calls}</div>\n            <div className=\"legend\">Missed Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.active_calls}</div>\n            <div className=\"legend\">Active Calls</div>\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Numbers</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({...localInterface, min_date: value})}\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => {\n            $setUpdater(Math.random())\n            setReportIsDeprecated(false)\n          }}\n      \n          childrenAfterSearch={(<>\n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setTopFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setTopFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllSearchFiltersSelected(0, 'type') || !isAllSearchFiltersSelected(1, 'direction')\n              })}>\n                <Icon icon=\"filter-8\" />\n              </button>\n\n              <Transition in={topFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                    <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                      <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(0, 'type')} onChange={(value) => switchSearchFilter(0, \"All\", value, 'type', localInterface.selectedSearchFilters.type )} />\n                      {localInterface.searchFilters[0].map((option, index) => (\n                          <Checkbox contents={option} value={isSearchFilterSelected(0, option, 'type')} onChange={(value) => switchSearchFilter(1, option, value, 'type', localInterface.selectedSearchFilters.type)} />\n                      ))}\n                      <hr />\n                      <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(1, 'direction')} onChange={(value) => switchSearchFilter(1, \"All\", value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                      {localInterface.searchFilters[1].map((option, index) => (\n                          <Checkbox contents={option} value={isSearchFilterSelected(1, option, 'direction')} onChange={(value) => switchSearchFilter(1, option, value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                      ))}\n                      <button onClick={()=>{\n                        $setUpdater(Math.random());\n                      }} className=\"_bordered _blue _wa\">\n                        Filter\n                      </button>\n                    </div>\n                )}\n              </Transition>\n            </div>\n            \n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setHashtagFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setHashtagFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllTagWordsSelected()\n              })}>\n                <Icon icon=\"hashtag-1\" />\n              </button>\n\n              <Transition in={hashtagFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                  <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                    <Checkbox contents=\"All\" value={isAllTagWordsSelected()} onChange={(value) => switchTagWord(\"All\", value)} />\n                    {reportData.interface.tag_words.map((option, i) => (\n                      <Checkbox contents={option} key={i} value={isTagWordSelected(option)} onChange={(value) => switchTagWord(option, value)} />\n                    ))}\n                    <button className=\"_bordered _blue _wa\">\n                      Filter\n                    </button>\n                  </div>\n                )}\n              </Transition>\n            </div>\n          </>)}\n          childrenBeforeDateType={(<>\n            <div>\n              <Select zeroed={true} options={[{\n                span: 'Calls',\n                value: 'calls'\n              }, {\n                span: 'Sources',\n                value: 'calls.sources'\n              },{\n                span: 'Area',\n                value: 'calls.areas'\n              },{\n                span: 'Numbers',\n                value: 'calls.numbers'\n              }]} selectedOption=\"calls.numbers\" onChange={(value) => $router.router.navigate(value as string, {}, {reload: true})} />\n            </div>\n          </>)}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide screen table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Number</span>)}\n\n                sortDirection={localInterface.sort.field === 'phone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'phone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Friendly Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'friendly_name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'friendly_name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Source</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"source\")}\n                onAllFiltersChange={(value) => switchFilter(\"source\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.source.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"source\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"source\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'source' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'source', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"area\")}\n                onAllFiltersChange={(value) => switchFilter(\"area\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.area.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"area\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"area\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total Calls</span>)}\n\n                sortDirection={localInterface.sort.field === 'total_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Completed</span>)}\n\n                sortDirection={localInterface.sort.field === 'completed_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'completed_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Unanswered</span>)}\n\n                sortDirection={localInterface.sort.field === 'unanswered_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'unanswered_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Avg Duration</span>)}\n\n                sortDirection={localInterface.sort.field === 'avg_duration' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'avg_duration', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total appointments</span>)}\n              \n                sortDirection={localInterface.sort.field === 'total_appointments' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total_appointments', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.numbers.map((callsNumber, i) => (\n              <tr key={i}>\n                <td>{callsNumber.number}</td>\n                <td>{callsNumber.friendly_name}</td>\n                <td>{callsNumber.source}</td>\n                <td>{callsNumber.area}</td>\n                <td>{callsNumber.total_calls}</td>\n                <td>{callsNumber.completed_calls}</td>\n                <td>{callsNumber.unanswered_calls}</td>\n                <td>{callsNumber.avg_duration}</td>\n                <td>{callsNumber.total_appointments}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.numbers.map((callNumber, i) => (\n              <tr key={i}>\n                <td>\n                  <div>{callNumber.number}</div>\n                  <div>{callNumber.friendly_name}</div>\n                </td>\n                <td>\n                  <div>{callNumber.area}</div>\n                  <div>{callNumber.source}</div>\n                </td>\n                <td>\n                  <div>Completed: {callNumber.completed_calls}</div>\n                  <div>Unanswered: {callNumber.unanswered_calls}</div>\n                </td>\n                <td>\n                  <div>\n                    Total appointments: {callNumber.total_appointments}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.numbers.map((callsNumber, i: number) => (\n              <div className=\"item\" key={i}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <strong>{callsNumber.number}</strong>\n                    </div>\n                    <div>\n                      {callsNumber.friendly_name}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      Total calls: <span className=\"fw500\">{callsNumber.total_calls}</span>\n                    </div>\n                    <div>\n                      Completed: <span className=\"green fw500\">{callsNumber.completed_calls}</span>\n                    </div>\n                    <div>\n                      Unanswered: <span className=\"red fw500\">{callsNumber.unanswered_calls}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Avg Duration:</span>\n                      <span> {callsNumber.avg_duration}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Total appointments:</span>\n                      <span> {callsNumber.total_appointments}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      <span className=\"gray\">Area:</span>\n                      <span> {callsNumber.area}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Source:</span>\n                      <span> {callsNumber.source}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallsNumbersPage_List\n","/Users/nicole/rrrr/crm/src/pages/Calls/SourcesList.tsx",["516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport moment from \"moment\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport { Transition } from \"react-transition-group\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport Select from \"../../components/Select\"\nimport { nError } from \"../../funcs/base\"\nimport { getDateRangeByPreset } from \"../../funcs/reports\"\nimport { CallSource } from \"../../models/Calls\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount, httpClient} from \"../../funcs\";\nimport Account from \"../../models/Account\";\nimport {DateTime} from \"luxon\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface CallsSourcesReport {\n\n  interface: {\n\n    tag_words: string[],\n\n    max_pages: number,\n\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n\n    min_date: Date,\n    max_date: Date\n  },\n\n  dashboard: {\n\n    calls: string,\n    callers: string,\n    missed_calls: string,\n    active_calls: string\n  },\n\n  sources: CallSource[]\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst CallsSourcesPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const $router = useRoute()\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [topFilterShown, setTopFilterShown] = useState(false)\n  const [hashtagFilterShown, setHashtagFilterShown] = useState(false)\n\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportData, setReportData] = useState<CallsSourcesReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n    \n    dateRangeCalendarShown: false,\n    dateRangePreset: \"custom\" as DateRangePreset,\n\n\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n\n    page: 1,\n    filter_words: {\n\n      dispatcher: [] as string[],\n      friendly_name: [] as string[],\n      status: [] as string[],\n    },\n    tag_words: [] as string[],\n\n    searchFilters: [ [\"source\", \"system\"], [\"inboud\", \"outbound\"]],\n    selectedSearchFilters: {type:['source'] as string[], direction:[] as string[]},\n    sort: {\n      field: 'source',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Source',\n      value: 'source'\n    },{\n      span: 'Total calls',\n      value: 'total_calls'\n    },{\n      span: 'Completed',\n      value: 'completed_calls'\n    },{\n      span: 'Unanswered',\n      value: 'unanswered_calls'\n    },{\n      span: 'Avg Duration',\n      value: 'avg_duration'\n    },{\n      span: 'Total appointments',\n      value: 'total_appointments'\n    }]\n\n  })\n\n  // Watch date range preset\n  useEffect(() => {\n\n    if(!reportData) return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load calls function\n  async function loadCalls() {\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key]);\n    try {\n      const { data: calls } = (await httpClient.post('/calls/report/sources', {\n        account_id: activeAccount.account_id,\n        limit_rows: JSON.stringify(props.store.reportsMaxRows),\n        page: JSON.stringify(localInterface.page),\n        date_start: localInterface.min_date.toISOString(),\n        date_end: localInterface.max_date.toISOString(),\n        filter_tag: JSON.stringify(localInterface.tag_words),\n        main_filter: JSON.stringify(localInterface.selectedSearchFilters),\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      })) as {data: CallsSourcesReport}\n\n      setReportData({\n        ...calls,\n\n        interface: {\n\n          ...calls.interface,\n          min_date: moment(calls.interface.min_date).startOf('day').toDate(),\n          max_date: moment(calls.interface.max_date).endOf('day').toDate(),\n        }\n      })\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date\n  ])\n\n  // Load calls on page mount\n  useEffect(() => { loadCalls() }, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Is tag_word selected function\n  function isTagWordSelected(value: string) {\n    return localInterface.tag_words.includes(value)\n  }\n  \n  // Is all tag words selected function\n  function isAllTagWordsSelected() {\n    return localInterface.tag_words.length === 0\n  }\n\n  // Toggle tagword function\n  function switchTagWord(value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.tag_words]\n\n    if (toggle && value === \"All\") {\n      _arr = []\n    }\n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n    else {\n\n      if (reportData?.interface.tag_words.every((option) => _arr.concat([value]).includes(option))) {\n        _arr = []\n      }\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, tag_words: _arr})\n  }\n\n  // Is search field selected function\n  function isSearchFilterSelected(i:number, value: string, field: string) {\n\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.includes(value);\n    }\n    if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.includes(value);\n    }\n  }\n\n  // Is all search fields selected function\n  function isAllSearchFiltersSelected(i: number, field: string) {\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.length === 0\n    }else if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.length === 0\n    }\n\n  }\n\n  // Toggle search filter function\n  function switchSearchFilter(i: number, value: string, toggle: boolean, field: string, $arr: string[] ) {\n    let $arrType = $arr;\n    let $object = localInterface.selectedSearchFilters;\n    if (toggle && value === \"All\") {\n      $arrType = [];\n    }\n    else if (toggle == false) {\n      for (let i = 0; i < $arrType.length; i++){\n        $arrType.map((v, index) => {\n          if (v == value ){\n            $arrType.splice(index, 1)\n          }\n        })\n      }\n    } else {\n      $arrType.push(value);\n    }\n\n    if (field == 'type'){\n      if ($arrType.length == localInterface.searchFilters[0].length) {\n        $arrType = [];\n      }\n      $object.type = $arrType;\n    }\n    if (field == 'direction'){\n      if ($arrType.length == localInterface.searchFilters[1].length) {\n        $arrType = [];\n      }\n      $object.direction = $arrType;\n    }\n    setLocalInterface({...localInterface, selectedSearchFilters: $object})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallsSourcesPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.calls}</div>\n            <div className=\"legend\">Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.callers}</div>\n            <div className=\"legend\">Callers</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.missed_calls}</div>\n            <div className=\"legend\">Missed Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.active_calls}</div>\n            <div className=\"legend\">Active Calls</div>\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Sources</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({...localInterface, min_date: value})}\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => {\n            setReportIsDeprecated(false);\n            $setUpdater(Math.random())\n          }}\n      \n          childrenAfterSearch={(<>\n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setTopFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setTopFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllSearchFiltersSelected(0, 'type') || !isAllSearchFiltersSelected(1, 'direction')\n              })}>\n                <Icon icon=\"filter-8\" />\n              </button>\n\n              <Transition in={topFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                    <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                      <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(0, 'type')} onChange={(value) => switchSearchFilter(0, \"All\", value, 'type', localInterface.selectedSearchFilters.type )} />\n                      {localInterface.searchFilters[0].map((option, index) => (\n                          <Checkbox contents={option} value={isSearchFilterSelected(0, option, 'type')} onChange={(value) => switchSearchFilter(1, option, value, 'type', localInterface.selectedSearchFilters.type)} />\n                      ))}\n                      <hr />\n                      <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(1, 'direction')} onChange={(value) => switchSearchFilter(1, \"All\", value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                      {localInterface.searchFilters[1].map((option, index) => (\n                          <Checkbox contents={option} value={isSearchFilterSelected(1, option, 'direction')} onChange={(value) => switchSearchFilter(1, option, value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                      ))}\n                      <button onClick={()=>{\n                        $setUpdater(Math.random());\n                      }} className=\"_bordered _blue _wa\">\n                        Filter\n                      </button>\n                    </div>\n                )}\n              </Transition>\n            </div>\n            \n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setHashtagFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setHashtagFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllTagWordsSelected()\n              })}>\n                <Icon icon=\"hashtag-1\" />\n              </button>\n\n              <Transition in={hashtagFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                  <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                    <Checkbox contents=\"All\" value={isAllTagWordsSelected()} onChange={(value) => switchTagWord(\"All\", value)} />\n                    {reportData.interface.tag_words.map((option, i) => (\n                      <Checkbox contents={option} key={i} value={isTagWordSelected(option)} onChange={(value) => switchTagWord(option, value)} />\n                    ))}\n                    <button className=\"_bordered _blue _wa\">\n                      Filter\n                    </button>\n                  </div>\n                )}\n              </Transition>\n            </div>\n          </>)}\n\n          childrenBeforeDateType={(<>\n            <div>\n              <Select zeroed={true} options={[{\n                span: 'Calls',\n                value: 'calls'\n              }, {\n                span: 'Sources',\n                value: 'calls.sources'\n              },{\n                span: 'Area',\n                value: 'calls.areas'\n              },{\n                span: 'Numbers',\n                value: 'calls.numbers'\n              }]} selectedOption=\"calls.sources\" onChange={(value) => $router.router.navigate(value as string, {}, {reload: true})} />\n            </div>\n          </>)}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Source</span>)}\n\n                sortDirection={localInterface.sort.field === 'source' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'source', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total calls</span>)}\n\n                sortDirection={localInterface.sort.field === 'total_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Completed</span>)}\n\n                sortDirection={localInterface.sort.field === 'completed_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'completed_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Unanswered</span>)}\n\n                sortDirection={localInterface.sort.field === 'unanswered_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'unanswered_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Avg Duration</span>)}\n\n                sortDirection={localInterface.sort.field === 'avg_duration' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'avg_duration', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total appointments</span>)}\n\n                sortDirection={localInterface.sort.field === 'total_appointments' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total_appointments', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.sources.map((callSource, i) => (\n              <tr key={i}>\n                <td>{callSource.source}</td>\n                <td>{callSource.total_calls}</td>\n                <td>{callSource.completed_calls}</td>\n                <td>{callSource.unanswered_calls}</td>\n                <td>{callSource.avg_duration}</td>\n                <td>{callSource.total_appointments}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium desktop table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.sources.map((callSource, i) => (\n              <tr key={i}>\n                <td>\n                  <div>{callSource.source}</div>\n                </td>\n                <td>\n                  <div>Total calls: {callSource.total_calls}</div>\n                  <div>Avg Duration: {callSource.avg_duration}</div>\n                </td>\n                <td>\n                  <div>Completed: {callSource.completed_calls}</div>\n                  <div>Unanswered: {callSource.unanswered_calls}</div>\n                </td>\n                <td>\n                  <div>Total appointments: {callSource.total_appointments}</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.sources.map((callSource, i: number) => (\n              <div className=\"item nogap negativeGap\" key={i}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <strong>{callSource.source}</strong>\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      Total calls: <span className=\"fw500\">{callSource.total_calls}</span>\n                    </div>\n                    <div>\n                      Completed: <span className=\"green fw500\">{callSource.completed_calls}</span>\n                    </div>\n                    <div>\n                      Unanswered: <span className=\"red fw500\">{callSource.unanswered_calls}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Avg Duration:</span>\n                      <span> {callSource.avg_duration}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Total Appointments:</span>\n                      <span> {callSource.total_appointments}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallsSourcesPage_List\n","/Users/nicole/rrrr/crm/src/pages/Clients/New.tsx",["532","533","534","535","536"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport Client from \"../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport { DateTime } from \"luxon\"\n\nimport DateTimeComponent from \"react-datetime\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst ClientsPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n  \n  const [newClientData, setNewClientData] = useState<Partial<Client>>({\n    firstname: '',\n    lastname: '',\n    company_name: '',\n    source: ''\n  })\n\n  const [clientDataEdit, setNewClientDataEdit] = useState<{\n    source: string[],\n  } | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: clientData } = (await axios.get('/json/client.json'))\n\n      setNewClientDataEdit(clientData.edit)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load client data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newClientData\n  ])\n  \n  // Render function\n  return (<>\n    {clientDataEdit ? (\n      <div className=\"ClientsPage_Item ClientPage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Client</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>First Name:</span>\n                <input type=\"text\" defaultValue={newClientData.firstname} onChange={({target: {value}}) => setNewClientData({...newClientData, firstname: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Name:</span>\n                <input type=\"text\" defaultValue={newClientData.lastname} onChange={({target: {value}}) => setNewClientData({...newClientData, lastname: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Company:</span>\n                <input type=\"text\" defaultValue={newClientData.company_name} onChange={({target: {value}}) => setNewClientData({...newClientData, company_name: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Source:</span>\n                <Select options={clientDataEdit.source.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newClientData.source as string} onChange={(value) => setNewClientData({...newClientData, source: value as string})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div></div>\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('clients', {}, {reload: true})}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default ClientsPage_New\n","/Users/nicole/rrrr/crm/src/pages/Sms.tsx",[],"/Users/nicole/rrrr/crm/src/pages/Calls/Area.tsx",["537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { DateTime } from \"luxon\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport { Transition } from \"react-transition-group\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport Select from \"../../components/Select\"\nimport { httpClient, nError } from \"../../funcs/base\"\nimport { getDateRangeByPreset } from \"../../funcs/reports\"\nimport { CallArea } from \"../../models/Calls\"\nimport { DateRangePreset } from \"../../models/Misc\"\nimport {StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps, store} from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount} from \"../../funcs\";\nimport Account from \"../../models/Account\";\nimport qs from \"qs\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface CallsReport {\n\n  interface: {\n\n    tag_words: string[],\n    \n    max_pages: number,\n\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n\n    min_date: Date,\n    max_date: Date\n  },\n\n  dashboard: {\n\n    calls: string,\n    callers: string,\n    missed_calls: string,\n    active_calls: string\n  },\n\n  areas: CallArea[]\n}\n\nconst CallsAreaPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [topFilterShown, setTopFilterShown] = useState(false)\n  const [hashtagFilterShown, setHashtagFilterShown] = useState(false)\n\n  const [reportIsDeprecated, setReportIsDeprecated] = useState(false)\n  let user = store.getState().user;\n  let timeZone = user?.time_zone;\n  const [reportData, setReportData] = useState<CallsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    dateRangeCalendarShown: false,\n    dateRangePreset: \"custom\" as DateRangePreset,\n    min_date: DateTime.now().setZone(timeZone).startOf('day').toJSDate(),\n    max_date: DateTime.now().setZone(timeZone).endOf('day').toJSDate(),\n\n\n    page: 1,\n    max_rows: 100 as 50 | 100 | 250 | 500,\n\n    filter_words: {\n\n      source: [] as string[],\n      area: [] as string[],\n    },\n\n    tag_words: [] as string[],\n\n    searchFilters: [ [\"source\", \"system\"], [\"inboud\", \"outbound\"]],\n    selectedSearchFilters: {type:['source'] as string[], direction:[] as string[]},\n\n    sort: {\n      field: 'area',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Total Calls',\n      value: 'total_calls'\n    },{\n      span: 'Completed',\n      value: 'completed_calls'\n    },{\n      span: 'Unanswered',\n      value: 'unanswered_calls'\n    },{\n      span: 'Avg Duration',\n      value: 'avg_duration'\n    },{\n      span: 'Total appointments',\n      value: 'total_appointments'\n    }]\n\n  })\n\n  // Watch date range preset\n  useEffect(() => {\n\n    if (!reportData) return\n    \n    if(localInterface.dateRangePreset === 'custom') return\n\n    setLocalInterface({\n      ...localInterface,\n      ...(getDateRangeByPreset(localInterface.dateRangePreset, reportData?.interface.min_date, reportData?.interface.max_date))\n    })\n\n  }, [localInterface.dateRangePreset])\n\n  // Load calls function\n  async function loadCalls() {\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n    \n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: calls } = (await httpClient.post('/calls/report/areas',  qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: JSON.stringify(props.store.reportsMaxRows),\n        page: JSON.stringify(localInterface.page),\n        date_start: localInterface.min_date.toISOString(),\n        date_end: localInterface.max_date.toISOString(),\n        filter_tag: JSON.stringify(localInterface.tag_words),\n        main_filter: JSON.stringify(localInterface.selectedSearchFilters),\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: CallsReport}\n      setReportData({\n        ...calls,\n\n        interface: {\n\n          ...calls.interface,\n          min_date: DateTime.fromISO(calls.interface.min_date as unknown as string).startOf('day').toJSDate(),\n          max_date: DateTime.fromISO(calls.interface.max_date as unknown as string).endOf('day').toJSDate(),\n        }\n      })\n\n      setTimeout(() => {\n        setReportIsDeprecated(false)\n      }, 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Watch for deprecated\n  useEffect(() => {\n    if(!reportData) return\n    setReportIsDeprecated(true)\n  }, [\n    localInterface.min_date,\n    localInterface.max_date\n  ])\n\n  // Load calls on page mount\n  useEffect(() => { loadCalls() }, [\n    $updater,\n    localInterface.page,\n    localInterface.max_rows\n  ])\n\n  // Is tag_word selected function\n  function isTagWordSelected(value: string) {\n    return localInterface.tag_words.includes(value)\n  }\n  \n  // Is all tag words selected function\n  function isAllTagWordsSelected() {\n    return localInterface.tag_words.length === 0\n  }\n\n  // Toggle tagword function\n  function switchTagWord(value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.tag_words]\n\n    if (toggle && value === \"All\") {\n      _arr = []\n    }\n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n    else {\n\n      if (reportData?.interface.tag_words.every((option) => _arr.concat([value]).includes(option))) {\n        _arr = []\n      }\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, tag_words: _arr})\n  }\n\n  // Is search field selected function\n  function isSearchFilterSelected(i:number, value: string, field: string) {\n\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.includes(value);\n    }\n    if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.includes(value);\n    }\n  }\n\n  // Is all search fields selected function\n  function isAllSearchFiltersSelected(i: number, field: string) {\n    if (field == 'type'){\n      return localInterface.selectedSearchFilters.type.length === 0\n    }else if (field == 'direction'){\n      return localInterface.selectedSearchFilters.direction.length === 0\n    }\n\n  }\n\n  // Toggle search filter function\n  function switchSearchFilter(i: number, value: string, toggle: boolean, field: string, $arr: string[] ) {\n    let $arrType = $arr;\n    let $object = localInterface.selectedSearchFilters;\n    if (toggle && value === \"All\") {\n      $arrType = [];\n    }\n    else if (toggle == false) {\n      for (let i = 0; i < $arrType.length; i++){\n        $arrType.map((v, index) => {\n          if (v == value ){\n            $arrType.splice(index, 1)\n          }\n        })\n      }\n    } else {\n      $arrType.push(value);\n    }\n\n    if (field == 'type'){\n      if ($arrType.length == localInterface.searchFilters[0].length) {\n        $arrType = [];\n      }\n      $object.type = $arrType;\n    }\n    if (field == 'direction'){\n      if ($arrType.length == localInterface.searchFilters[1].length) {\n        $arrType = [];\n      }\n      $object.direction = $arrType;\n    }\n    setLocalInterface({...localInterface, selectedSearchFilters: $object})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallsAreaPage_List\" >\n      \n        { /* Reports grid */}\n        <div className=\"reports-grid\">\n        \n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.calls}</div>\n            <div className=\"legend\">Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.callers}</div>\n            <div className=\"legend\">Callers</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.missed_calls}</div>\n            <div className=\"legend\">Missed Calls</div>\n          </div>\n\n          <div className=\"cell\">\n\n            <div className=\"amount\">{reportData.dashboard.active_calls}</div>\n            <div className=\"legend\">Active Calls</div>\n          </div>\n        </div>\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Area</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          dateRangePreset={localInterface.dateRangePreset}\n          onDateRangePresetChange={(value) => setLocalInterface({ ...localInterface, dateRangePreset: value })}\n\n          minDate={localInterface.min_date}\n          onMinDateChange={(value) => setLocalInterface({...localInterface, min_date: value, dateRangePreset: 'custom'})}\n\n          maxDate={localInterface.max_date}\n          onMaxDateChange={(value) => setLocalInterface({...localInterface, max_date: value, dateRangePreset: 'custom'})}\n\n          updateButtonActive={reportIsDeprecated}\n          onUpdate={() => $setUpdater(Math.random())}\n      \n          childrenAfterSearch={(<>\n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setTopFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setTopFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllSearchFiltersSelected(0, 'type') || !isAllSearchFiltersSelected(1, 'direction')\n              })}>\n                <Icon icon=\"filter-8\" />\n              </button>\n\n              <Transition in={topFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                    <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                      <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(0, 'type')} onChange={(value) => switchSearchFilter(0, \"All\", value, 'type', localInterface.selectedSearchFilters.type )} />\n                      {localInterface.searchFilters[0].map((option, index) => (\n                          <Checkbox contents={option} value={isSearchFilterSelected(0, option, 'type')} onChange={(value) => switchSearchFilter(1, option, value, 'type', localInterface.selectedSearchFilters.type)} />\n                      ))}\n                      <hr />\n                      <Checkbox contents=\"All\" value={isAllSearchFiltersSelected(1, 'direction')} onChange={(value) => switchSearchFilter(1, \"All\", value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                      {localInterface.searchFilters[1].map((option, index) => (\n                          <Checkbox contents={option} value={isSearchFilterSelected(1, option, 'direction')} onChange={(value) => switchSearchFilter(1, option, value, 'direction', localInterface.selectedSearchFilters.direction )} />\n                      ))}\n                      <button onClick={()=>{\n                        $setUpdater(Math.random());\n                      }} className=\"_bordered _blue _wa\">\n                        Filter\n                      </button>\n                    </div>\n                )}\n              </Transition>\n            </div>\n            \n            <div tabIndex={-1} className=\"filter-button\" onFocus={() => setHashtagFilterShown(true)} onBlur={(e) => !e.currentTarget.contains(e.relatedTarget as any) && setHashtagFilterShown(false)}>\n              <button className={classNames(\"_wa\", \"_rounded\", \"_iconed\", {\n                _blue: !isAllTagWordsSelected()\n              })}>\n                <Icon icon=\"hashtag-1\" />\n              </button>\n\n              <Transition in={hashtagFilterShown} mountOnEnter={true} unmountOnExit={true} timeout={210}>\n                {(state) => (\n                  <div className={ classNames(\"filter-wrapper\", `transition-fade-${state}`) }>\n                    <Checkbox contents=\"All\" value={isAllTagWordsSelected()} onChange={(value) => switchTagWord(\"All\", value)} />\n                    {reportData.interface.tag_words.map((option, i) => (\n                      <Checkbox contents={option} key={i} value={isTagWordSelected(option)} onChange={(value) => switchTagWord(option, value)} />\n                    ))}\n                    <button className=\"_bordered _blue _wa\">\n                      Filter\n                    </button>\n                  </div>\n                )}\n              </Transition>\n            </div>\n          </>)}\n\n          childrenBeforeDateType={(<>\n            <div>\n              <Select zeroed={true} options={[{\n                span: 'Calls',\n                value: 'calls'\n              }, {\n                span: 'Sources',\n                value: 'calls.sources'\n              },{\n                span: 'Area',\n                value: 'calls.areas'\n              },{\n                span: 'Numbers',\n                value: 'calls.numbers'\n              }]} selectedOption=\"calls.areas\" onChange={(value) => $router.router.navigate(value as string, {}, {reload: true})} />\n            </div>\n          </>)}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total calls</span>)}\n\n                sortDirection={localInterface.sort.field === 'total_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Completed</span>)}\n\n                sortDirection={localInterface.sort.field === 'completed_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'completed_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Unanswered</span>)}\n\n                sortDirection={localInterface.sort.field === 'unanswered_calls' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'unanswered_calls', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Avg Duration</span>)}\n\n                sortDirection={localInterface.sort.field === 'avg_duration' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'avg_duration', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Total appointments</span>)}\n\n                sortDirection={localInterface.sort.field === 'total_appointments' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'total_appointments', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.areas.map((callsArea, i) => (\n              <tr key={i}>\n                <td>{callsArea.area}</td>\n                <td>{callsArea.total_calls}</td>\n                <td>{callsArea.completed_calls}</td>\n                <td>{callsArea.unanswered_calls}</td>\n                <td>{callsArea.avg_duration}</td>\n                <td>{callsArea.total_appointments}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium desktop table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.areas.map((area, i) => (\n              <tr key={i}>\n                <td>\n                  <div>{area.area}</div>\n                  <div>&nbsp;</div>\n                </td>\n                <td>\n                  <div>Total calls: {area.total_calls}</div>\n                  <div>Avg duration: {area.avg_duration}</div>\n                </td>\n                <td>\n                  <div>Completed: {area.completed_calls}</div>\n                  <div>Unanswered: {area.unanswered_calls}</div>\n                </td>\n                <td>\n                  <div>Total appointments: {area.total_appointments}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.areas.map((callsArea, i: number) => (\n              <div className=\"item nogap negativeGap\" key={i}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <strong>{callsArea.area}</strong>\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      Total calls: <span className=\"fw500\">{callsArea.total_calls}</span>\n                    </div>\n                    <div>\n                      Completed: <span className=\"green fw500\">{callsArea.completed_calls}</span>\n                    </div>\n                    <div>\n                      Unanswered: <span className=\"red fw500\">{callsArea.unanswered_calls}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Avg Duration:</span>\n                      <span> {callsArea.avg_duration}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Total appointments:</span>\n                      <span> {callsArea.total_appointments}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                  \n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallsAreaPage_List\n","/Users/nicole/rrrr/crm/src/pages/Permissions/List.tsx",["553","554"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport {getActiveAccount, httpClient, nError} from \"../../funcs\"\nimport Permission from \"../../models/Permission\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport qs from \"qs\";\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface PermissionsReport {\n\n  interface: {\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_permission: boolean,\n    add_permission: boolean\n  },\n\n  permissions_rows: Permission[],\n\n  edit: {\n    actions: string[]\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PermissionsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<PermissionsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Users',\n      value: 'users'\n    }]\n\n  })\n\n  // Load permissions function\n  async function loadPermissions() {\n\n    try {\n      const { data: permissions } = (await httpClient.post('/permissions/users/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: PermissionsReport}\n\n      setReportData(permissions)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load permissions on page mount\n  useEffect(() => { loadPermissions() }, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"PermissionsPage_List\" >\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Permissions</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({ ...localInterface, sort: { ...localInterface.sort, direction: value } })}\n          onSortFire={() => 0}\n        \n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('permissions.new')}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add permission</span>\n                <Icon icon=\"shield-28\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Users</span>)}\n\n                sortDirection={localInterface.sort.field === 'users' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'users', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.permissions_rows.map((permission, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('permissions.item', {\n                permissionId: permission.permission_id\n              }, {\n                reload: true\n              })}>\n                <td>{permission.name}</td>\n                <td>{permission.users}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium desktop table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Users</th>\n            </tr>\n            {reportData.permissions_rows.map((permission, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('permissions.item', {\n                permissionId: permission.permission_id\n              }, {\n                reload: true\n              })}>\n                <td>{permission.name}</td>\n                <td>{permission.users}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.permissions_rows.map((permission, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('permissions.item', {\n                permissionId: permission.permission_id\n              }, {\n                reload: true\n              })}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{permission.name}</b></div>\n                    <div>\n                      {permission.users || <span>&nbsp;</span>}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default PermissionsPage_List\n","/Users/nicole/rrrr/crm/src/pages/Permissions/New.tsx",["555","556","557","558"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport Permission from \"../../models/Permission\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst PermissionsPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [actions, setActions] = useState<string[] | null>(null)\n  const [availableActions, setAvailableActions] = useState<string[]>([])\n  const [selectedAction, setSelectedAction] = useState<string>('')\n  const [newPermissionData, setNewPermissionData] = useState<Partial<Permission>>({\n    name: '',\n    actions: [] as string[]\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: permissionsData } = (await axios.get('/json/permissions.json'))\n\n      setActions(permissionsData.edit.actions)\n      setAvailableActions([''].concat(permissionsData.edit.actions))\n      setSelectedAction(availableActions[0])\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load permission data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Add action function\n  function addAction() {\n\n    if(!newPermissionData.actions || !newPermissionData) return\n\n    setNewPermissionData({\n      ...newPermissionData,\n      actions: [\n        ...newPermissionData.actions,\n        selectedAction\n      ]\n    })\n\n    let _availableActions = [...availableActions]\n\n    _availableActions = _availableActions.filter((action) => !(newPermissionData.actions as string[]).includes(action))\n    _availableActions.splice(_availableActions.findIndex((_action) => selectedAction === _action), 1)\n\n    setAvailableActions([\n      ..._availableActions\n    ])\n\n    setSelectedAction(_availableActions[0])\n\n    setReadyToSave(true)\n  }\n\n  // Remove action function\n  function removeAction(i: number) {\n\n    let _permissionActions = [...(newPermissionData.actions as string[])]\n\n    let _action = _permissionActions[i]\n    \n    _permissionActions.splice(i, 1)\n\n    setNewPermissionData({\n      ...newPermissionData,\n      actions: _permissionActions\n    })\n\n    setAvailableActions([\n      ...availableActions,\n      _action\n    ])\n\n    setReadyToSave(true)\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newPermissionData\n  ])\n  \n  // Render function\n  return (<>\n    {availableActions ? (\n      <div className=\"PermissionsPage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New permission</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewPermissionData({...newPermissionData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Actions</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Action:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableActions.map((action) => ({\n                  span: action,\n                  value: action\n                }))} selectedOption={selectedAction} onChange={(value) => setSelectedAction(value as string)}/>\n                <button disabled={!selectedAction} className=\"_green\" onClick={() => addAction()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className=\"table som\">\n            <tr>\n              <th style={{width: '100%'}}>Action</th>\n              <th>Allow</th>\n              <th></th>\n            </tr>\n            {(newPermissionData.actions as string[]).map((action, i) => (\n              <tr key={i}>\n                <td>{action}</td>\n                <td>\n                  <Checkbox contents={''} value={true} />\n                </td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={() => removeAction(i)}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('permissions', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default PermissionsPage_New\n","/Users/nicole/rrrr/crm/src/pages/Users/List.tsx",["559","560","561","562"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport {getActiveAccount, httpClient, nError} from \"../../funcs\"\nimport User from \"../../models/User\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport qs from \"qs\";\nimport Account from \"../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'function' | 'time_zone' | 'permissions' | 'active'\n\ninterface UsersReport {\n\n  interface: {\n\n    filter_words: {\n\n      function: string[],\n      time_zone: string[],\n      permissions: string[],\n      active: string[]\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_user: boolean,\n    add_user: boolean\n  },\n\n  users: User[],\n\n  edit: {\n    time_zone: string[],\n    permissions: string[],\n    state: string[]\n  }\n}\n\nconst UsersPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<UsersReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    filter_words: {\n\n      function: [] as string[],\n      time_zone: [] as string[],\n      permissions: [] as string[],\n      active: [] as string[],\n    },\n\n    sort: {\n      field: 'first_name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'First Name',\n      value: 'first_name'\n    },{\n      span: 'Last Name',\n      value: 'last_name'\n    },{\n      span: 'Function',\n      value: 'function'\n    },{\n      span: 'Phone',\n      value: 'phone'\n    },{\n      span: 'Email',\n      value: 'email'\n    },{\n      span: 'Time Zone',\n      value: 'time_zone'\n    },{\n      span: 'Permissions',\n      value: 'permissions'\n    },{\n      span: 'Active',\n      value: 'active'\n    }]\n\n  })\n\n  // Load users function\n  async function loadUsers() {\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`;\n\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: users } = (await httpClient.post('/users/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: UsersReport}\n      setReportData(users)\n\n      const { data: user } = (await httpClient.get('/users/' + '88888001fd67db3si8'));\n\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load users on page mount\n  useEffect(() => { loadUsers() }, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  // Is all filters selected function\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  // Filter switch function\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"UsersPage_List\" >\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Users</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => {\n            $setUpdater(Math.random())\n          }}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({ ...localInterface, sort: { ...localInterface.sort, direction: value } })}\n          onSortFire={() => 0}\n          \n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('users.new')}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add user</span>\n                <Icon icon=\"user-1\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>First Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'first_name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'first_name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Last Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'last_name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'last_name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Function</span>)}\n\n                sortDirection={localInterface.sort.field === 'function' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'function', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Phone</span>)}\n\n                sortDirection={localInterface.sort.field === 'phone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'phone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Email</span>)}\n\n                sortDirection={localInterface.sort.field === 'email' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'email', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Time zone</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"time_zone\")}\n                onAllFiltersChange={(value) => switchFilter(\"time_zone\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.time_zone.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"time_zone\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"time_zone\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'time_zone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'time_zone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Permissions</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"permissions\")}\n                onAllFiltersChange={(value) => switchFilter(\"permissions\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.permissions.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"permissions\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"permissions\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'permissions' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'permissions', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Active</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"active\")}\n                onAllFiltersChange={(value) => switchFilter(\"active\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.active.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"active\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"active\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'active' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'active', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.users.map((user, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('users.item', {\n                userId: user.user_id\n              }, {reload: true})}>\n                <td>{user.first_name}</td>\n                <td>{user.last_name}</td>\n                <td>{user.function}</td>\n                <td>{user.phone}</td>\n                <td>{user.email}</td>\n                <td>{user.time_zone}</td>\n                <td>{user.permissions}</td>\n                <td className={classNames({\n                  'red-text': user.active === 'Inactive',\n                  'green-text': user.active === 'Active',\n                  'blue-text': user.active === 'Waiting',\n                })}>{user.active}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.users.map((user, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('users.item', {\n                userId: user.user_id\n              }, {reload: true})}>\n                <td>\n                  <div>{user.first_name} {user.last_name}</div>\n                  <div>{user.email}</div>\n                </td>\n                <td>\n                  <div>{user.phone}</div>\n                  <div>{user.time_zone}</div>\n                </td>\n                <td>\n                  <div>Function: {user.function}</div>\n                  <div>Permissions: {user.permissions}</div>\n                </td>\n                <td>\n                  <div className={classNames({\n                    'red-text': user.active === 'Inactive',\n                    'green-text': user.active === 'Active',\n                    'blue-text': user.active === 'Waiting',\n                  })}>\n                    {user.active}\n                  </div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.users.map((user, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('users.item', {\n                userId: user.user_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{user.first_name} {user.last_name}</b></div>\n                    <div>\n                      {user.email}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div className={classNames({\n                      'red-text': user.active === 'Inactive',\n                      'green-text': user.active === 'Active',\n                      'blue-text': user.active === 'Waiting',\n                    })}>\n                      {user.active}\n                    </div>\n                    <div>\n                      {user.phone}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Functions:</span>\n                      <span> {user.function}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Permissions:</span>\n                      <span> {user.permissions}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      {user.time_zone}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default UsersPage_List\n","/Users/nicole/rrrr/crm/src/pages/Users/New.tsx",["563","564","565","566"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport User from \"../../models/User\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport Switcher from \"../../components/Switcher\"\nimport ReactCrop, { Crop } from \"react-image-crop\"\nimport UserCustom from \"../../models/UserCustom\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst UsersPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [avatarPopup, setAvatarPopup] = useState(false)\n  const [avatarImageSrc, setAvatarImageSrc] = useState('')\n  const [avatarCrop, setAvatarCrop] = useState<Partial<Crop>>({\n    unit: '%',\n    width: 30,\n    aspect: 1\n  })\n\n  const [editions, setEditions] = useState<{\n    time_zone: string[],\n    permissions: string[],\n    state: string[]\n  } | null>(null)\n\n  const [newUserData, setNewUserData] = useState<Partial<UserCustom>>({\n    \n  })\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: usersData } = (await axios.get('/json/users.json'))\n\n      setEditions(usersData.edit)\n      setNewUserData({\n        firstname: '',\n        lastname: '',\n        function: '',\n        phone: '',\n        street: '',\n        unit: '',\n        city: '',\n        zip: '',\n        time_zone: usersData.edit.time_zone[0],\n        permission: usersData.edit.permissions[0],\n        State: usersData.edit.state[0],\n        active_status: ''\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load user data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // On select file function\n  function onSelectFile(e: any) {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        setAvatarImageSrc(reader.result as string)\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newUserData\n  ])\n  \n  // Render function\n  return (<>\n    {editions && newUserData.time_zone ? (\n      <div className=\"UsersPage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New user</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>First Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, firstname: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, lastname: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Active:</span>\n                <Switcher checked={newUserData.active_status === 'Active'} onChange={(value) => setNewUserData({...newUserData, active_status: value ? 'Active' : 'Inactive'})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Email:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, email: value})} />\n              </div>\n            </div>\n\n            <div className=\"avatar-editing\">\n              <button className=\"_zeroed _iconed\" onClick={() => setAvatarPopup(true)}>\n                <Icon icon=\"user-20\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Function:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, function: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, phone: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\" style={{zIndex: 7}}>\n                <span>Time Zone:</span>\n                <Select options={editions.time_zone.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newUserData.time_zone} onChange={(value: string) => setNewUserData({...newUserData, time_zone: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Permission:</span>\n                <Select options={editions.permissions.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newUserData.permission as string} onChange={(value: string) => setNewUserData({...newUserData, permission: value})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Address</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Street:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, street: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Unit/Apt:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, unit: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>City:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, city: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>State:</span>\n                <Select options={editions.state.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newUserData.State as string} onChange={(value: string) => setNewUserData({...newUserData, State: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Zip:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewUserData({...newUserData, zip: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('users', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n\n        {avatarPopup ? (\n          <div className=\"popup imageCrop\" onClick={() => setAvatarPopup(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n              \n              <div>\n                <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} id=\"file-uploader\" />\n                <button className=\"_wa _iconed _bordered _blue\" onClick={() => document.getElementById('file-uploader')?.click()}>\n                  <Icon icon=\"user-33\" />\n                  <span>Upload a File</span>\n                </button>\n              </div>\n\n              <div>\n                {avatarImageSrc && (\n                  <ReactCrop\n                    src={avatarImageSrc}\n                    crop={avatarCrop}\n                    onChange={(value) => setAvatarCrop(value)}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default UsersPage_New\n","/Users/nicole/rrrr/crm/src/pages/Users/Item.tsx",["567","568","569","570","571","572"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport {httpClient, nError} from \"../../funcs\"\nimport User from \"../../models/User\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport UserCustom from \"../../models/UserCustom\"\nimport ReactCrop, { Crop } from \"react-image-crop\"\nimport Switcher from \"../../components/Switcher\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface UserData {\n\tpermissions: {\n\t\tedit_user: boolean,\n\t},\n\tuser: UserCustom,\n\tedit: {\n\t\ttime_zone: string[],\n\t\tpermissions: string[],\n\t\tstate: string[],\n\t}\n}\n\nconst UsersPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [userData, setUserData] = useState<UserData | null>(null)\n\n  const [avatarPopup, setAvatarPopup] = useState(false)\n  const [avatarImageSrc, setAvatarImageSrc] = useState('')\n  const [avatarCrop, setAvatarCrop] = useState<Partial<Crop>>({\n    unit: '%',\n    width: 30,\n    aspect: 1\n  })\n\n  const [editions, setEditions] = useState<{\n    time_zone: string[],\n    permissions: string[],\n    state: string[]\n  } | null>(null)\n\n  const [newUserData, setNewUserData] = useState<Partial<UserCustom>>({\n    \n  })\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: userData } = (await httpClient.get('/users/' + props.store.user?.user_id)) as {data: UserData}\n\n      setUserData(userData)\n      setEditions(userData.edit)\n      setNewUserData(userData.user)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load user data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // On select file function\n  function onSelectFile(e: any) {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        setAvatarImageSrc(reader.result as string)\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newUserData\n  ])\n  \n  // Render function\n  return (<>\n    {userData && editions && newUserData.time_zone ? (\n      <div className=\"UsersPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <div className=\"flex-container _gap-narrow\">\n            <h1>User:</h1>\n            <div className=\"item-name\">\n              {userData.user.firstname} {userData.user.lastname}\n            </div>\n          </div>\n\n          {userData?.permissions.edit_user && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>First Name:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.firstname} onChange={({target: {value}}) => setNewUserData({...newUserData, firstname: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Name:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.lastname} onChange={({target: {value}}) => setNewUserData({...newUserData, lastname: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Active:</span>\n                <Switcher disabled={!editing} checked={newUserData.active_status === 'Active'} onChange={(value) => setNewUserData({...newUserData, active_status: value ? 'Active' : 'Inactive'})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Email:</span>\n                <input type=\"text\" defaultValue={userData.user.email} disabled={true} />\n              </div>\n            </div>\n\n            <div className=\"avatar-editing\">\n              <button className=\"_zeroed _iconed\" onClick={() => editing && setAvatarPopup(true)}>\n                <Icon icon=\"user-20\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Function:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.function} onChange={({target: {value}}) => setNewUserData({...newUserData, function: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.phone} onChange={({target: {value}}) => setNewUserData({...newUserData, phone: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\" style={{zIndex: 7}}>\n                <span>Time Zone:</span>\n                <Select disabled={!editing} options={editions.time_zone.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newUserData.time_zone} onChange={(value: string) => setNewUserData({...newUserData, time_zone: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Permission:</span>\n                <Select disabled={!editing} options={editions.permissions.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newUserData.permission as string} onChange={(value: string) => setNewUserData({...newUserData, permission: value})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Address</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Street:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.street} onChange={({target: {value}}) => setNewUserData({...newUserData, street: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Unit/Apt:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.unit} onChange={({target: {value}}) => setNewUserData({...newUserData, unit: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>City:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.city} onChange={({target: {value}}) => setNewUserData({...newUserData, city: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>State:</span>\n                <Select disabled={!editing} options={editions.state.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newUserData.State as string} onChange={(value: string) => setNewUserData({...newUserData, State: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Zip:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={userData.user.zip} onChange={({target: {value}}) => setNewUserData({...newUserData, zip: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete User</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {avatarPopup ? (\n          <div className=\"popup imageCrop\" onClick={() => setAvatarPopup(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n              \n              <div>\n                <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} id=\"file-uploader\" />\n                <button className=\"_wa _iconed _bordered _blue\" onClick={() => document.getElementById('file-uploader')?.click()}>\n                  <Icon icon=\"user-33\" />\n                  <span>Upload a File</span>\n                </button>\n              </div>\n\n              <div>\n                {avatarImageSrc && (\n                  <ReactCrop\n                    src={avatarImageSrc}\n                    crop={avatarCrop}\n                    onChange={(value) => setAvatarCrop(value)}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete User\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the absence it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default UsersPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/Dispatchers/Item.tsx",["573","574"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../../components/Icon\"\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../../components/Select\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport { CallCenter_CallGroup, CallCenter_Dispatcher } from \"../../../models/CallCenter\"\nimport Switcher from \"../../../components/Switcher\"\nimport classNames from \"classnames\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport ReactInputMask from \"react-input-mask\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface DispatcherData {\n  \n  permissions: {\n    \n    edit_dispatcher: boolean,\n    show_call_group: true,\n  },\n\n  dispatcher: CallCenter_Dispatcher,\n\n  call_groups: CallCenter_CallGroup[],\n\n  edit: {\n    users: {\n      user_id: string,\n      user: string\n    }[]\n  }\n}\n\nconst CallCenter_DispatchersPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [dispatcherData, setDispatcherData] = useState<DispatcherData | null>(null)\n\n  const [newDispatcherData, setNewDispatcherData] = useState<Partial<CallCenter_Dispatcher>>({\n    \n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: dispatcherData } = (await axios.get('/json/call_center_dispatcher.json')) as {data: DispatcherData}\n\n      setDispatcherData(dispatcherData)\n\n      setNewDispatcherData({\n        \n        name: '',\n        active: true,\n\n        user: dispatcherData.edit.users[0].user_id,\n\n        phone: '',\n        is_phone: false,\n        is_softphone: false\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load dispatcher data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newDispatcherData\n  ])\n  \n  // Render function\n  return (<>\n    {dispatcherData && newDispatcherData.active !== undefined ? (\n      <div className=\"CallCenter_DispatchersPage_Item entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Dispatcher</h1>\n\n          {dispatcherData?.permissions.edit_dispatcher && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Name:</span>\n                \n                <input disabled={!editing} type=\"text\" defaultValue={dispatcherData.dispatcher.name} onChange={({target: {value}}) => setNewDispatcherData({...newDispatcherData, name: value})} />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Active:</span>\n                \n                <Switcher disabled={!editing} checked={newDispatcherData.active as boolean} onChange={(value) => setNewDispatcherData({...newDispatcherData, active: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>User:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select disabled={!editing} options={dispatcherData.edit.users.map((user) => ({\n                    span: user.user,\n                    value: user.user_id\n                  }))} selectedOption={newDispatcherData.user as string} onChange={(value: string) => setNewDispatcherData({...newDispatcherData, user: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n\n                <ReactInputMask disabled={!editing} type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newDispatcherData.phone} onChange={({target: {value}}) => setNewDispatcherData({...newDispatcherData, phone: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Softphone:</span>\n\n                <Checkbox disabled={!editing} contents='' value={newDispatcherData.is_softphone} onChange={(value) => setNewDispatcherData({...newDispatcherData, is_softphone: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n\n                <Checkbox disabled={!editing} contents='' value={newDispatcherData.is_phone} onChange={(value) => setNewDispatcherData({...newDispatcherData, is_phone: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={dispatcherData.dispatcher.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={dispatcherData.dispatcher.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={dispatcherData.dispatcher.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={dispatcherData.dispatcher.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Groups</div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Dispatchers</th>\n              <th>Call Flow</th>\n            </tr>\n            {dispatcherData.call_groups.map((callGroup, i) => (\n              <tr key={i}>\n                <td>{callGroup.name}</td>\n                <td>{callGroup.dispatchers}</td>\n                <td>{callGroup.call_flows}</td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {dispatcherData.call_groups.map((callGroup, i: number) => (\n                <div className=\"item\" key={i}>\n\n                  <div className=\"__top\">\n\n                    <div className=\"__left\">\n                      <div><b>{callGroup.name}</b></div>\n                      <div>\n                        {callGroup.dispatchers}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"__bottom\">\n\n                    <div className=\"__left\">\n                      \n                    </div>\n\n                    <div className=\"__right\">\n                      <div>\n                        {callGroup.call_flows}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Dispatcher</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Dispatcher\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the dispatcher it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_DispatchersPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/Dispatchers/New.tsx",["575"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport Select from \"../../../components/Select\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport { CallCenter_Dispatcher } from \"../../../models/CallCenter\"\nimport Switcher from \"../../../components/Switcher\"\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport Icon from \"../../../components/Icon\"\nimport classNames from \"classnames\"\nimport ReactInputMask from \"react-input-mask\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst CallCenter_DispatchersPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [edit, setEdit] = useState<{\n\n    users: {\n      user_id: string,\n      user: string\n    }[]\n  } | null>(null)\n\n  const [newDispatcherData, setNewDispatcherData] = useState<Partial<CallCenter_Dispatcher> | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: dispatchersData } = (await axios.get('/json/call_center_dispatchers.json'))\n\n      setEdit(dispatchersData.edit)\n\n      setNewDispatcherData({\n        ...newDispatcherData,\n\n        name: '',\n        active: 'Active',\n\n        user: dispatchersData.edit.users[0],\n\n        is_phone: false,\n        is_softphone: false\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load dispatcher data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Watch changes\n  useEffect(() => {\n    setReadyToSave(true)\n  }, [\n    newDispatcherData\n  ])\n  \n  // Render function\n  return (<>\n    {newDispatcherData && edit ? (\n      <div className=\"CallCenter_DispatchersPage_New entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Dispatcher</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewDispatcherData({...newDispatcherData, name: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Active:</span>\n                <Switcher checked={newDispatcherData.active === 'Active'} onChange={(value) => setNewDispatcherData({...newDispatcherData, active: value ? 'Active' : 'Inactive'})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>User:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select options={edit.users.map((user) => ({\n                    span: user.user,\n                    value: user.user_id\n                  }))} selectedOption={newDispatcherData.user as string} onChange={(value: string) => setNewDispatcherData({...newDispatcherData, user: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n\n                <ReactInputMask type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newDispatcherData.phone} onChange={({target: {value}}) => setNewDispatcherData({...newDispatcherData, phone: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Softphone:</span>\n\n                <Checkbox contents='' value={newDispatcherData.is_softphone} onChange={(value) => setNewDispatcherData({...newDispatcherData, is_softphone: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n\n                <Checkbox contents='' value={newDispatcherData.is_phone} onChange={(value) => setNewDispatcherData({...newDispatcherData, is_phone: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('call_center.dispatchers', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_DispatchersPage_New\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/PhoneNumbers/List.tsx",["576","577","578"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BaseLink, useRoute } from \"react-router5\"\nimport Icon from \"../../../components/Icon\"\nimport ReportFilters from \"../../../components/reports/Filters\"\nimport ReportTableControls from \"../../../components/reports/TableControls\"\nimport ReportTableField from \"../../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../../funcs/base\"\nimport { CallCenter_PhoneNumber } from \"../../../models/CallCenter\"\nimport Client from \"../../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport \"../../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount} from \"../../../funcs\";\nimport Account from \"../../../models/Account\";\nimport qs from \"qs\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'type' | 'source' | 'area' | 'company' | 'call_flow' | 'active'\n\ninterface PhoneNumbersReport {\n\n  interface: {\n\n    filter_words: {\n\n      type: string[],\n      source: string[],\n      area: string[],\n      company: string[],\n      call_flow: string[],\n      active: string[]\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_phone_number: boolean,\n    add_phone_number: boolean\n  },\n\n  phone_numbers: CallCenter_PhoneNumber[]\n}\n\nconst CallCenter_PhoneNumbersPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<PhoneNumbersReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    filter_words: {\n\n      type: [] as string[],\n      source: [] as string[],\n      area: [] as string[],\n      company: [] as string[],\n      call_flow: [] as string[],\n      active: [] as string[],\n    },\n\n    sort: {\n      field: 'phone',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Phone Number',\n      value: 'phone'\n    },{\n      span: 'Friendly Name',\n      value: 'friendly_name'\n    },{\n      span: 'Type',\n      value: 'type'\n    },{\n      span: 'Source',\n      value: 'source'\n    },{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Company',\n      value: 'company'\n    },{\n      span: 'Call Flow',\n      value: 'call_flow'\n    },{\n      span: 'Available',\n      value: 'active'\n    }]\n\n  })\n\n  // Load clients function\n  async function loadClients() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n    \n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: clients } = (await httpClient.post('/phonenumbers/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: PhoneNumbersReport}\n\n      setReportData(clients)\n    }\n    catch (error) {\n      nError(error)\n    }\n\n  }\n\n  // Load clients on page mount\n  useEffect(() => { loadClients() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallCenter_PhoneNumbersPage_List\" >\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => {\n            $setUpdater(Math.random())\n          }}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('call_center.phoneNumbers.new', {}, {reload: true})}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Phone</span>\n                <Icon icon=\"phone-1\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Phone Number</span>)}\n\n                sortDirection={localInterface.sort.field === 'phone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'phone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Friendly Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'friendly_name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'friendly_name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Type</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"type\")}\n                onAllFiltersChange={(value) => switchFilter(\"type\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.type.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"type\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"type\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'type' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'type', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Source</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"source\")}\n                onAllFiltersChange={(value) => switchFilter(\"source\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.source.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"source\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"source\", value.word, value.selected)}\n                \n                sortDirection={localInterface.sort.field === 'source' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'source', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"area\")}\n                onAllFiltersChange={(value) => switchFilter(\"area\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.area.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"area\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"area\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Company</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"company\")}\n                onAllFiltersChange={(value) => switchFilter(\"company\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.company.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"company\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"company\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'company' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'company', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Call Flow</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"call_flow\")}\n                onAllFiltersChange={(value) => switchFilter(\"call_flow\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.call_flow.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"call_flow\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"call_flow\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'call_flow' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'call_flow', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Available</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"active\")}\n                onAllFiltersChange={(value) => switchFilter(\"active\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.active.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"active\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"active\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'active' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'active', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.phone_numbers.map((phoneNumber, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.phoneNumbers.item', {}, {reload: true})}>\n                <td>\n                  <div className=\"flex-container\">\n                    <span>{phoneNumber.phone}</span>\n                    <button className=\"_zeroed _iconed\">\n                      <Icon icon=\"gear-1\"/>\n                    </button>\n                  </div>\n                </td>\n                <td>{phoneNumber.friendly_name}</td>\n\n                <td className={classNames({\n                  'red-text': phoneNumber.type === 'System',\n                  'green-text': phoneNumber.type === 'Source',\n                  'blue-text': !['System', 'Source'].includes(phoneNumber.type)\n                })}>{phoneNumber.type}</td>\n\n                <td>{phoneNumber.source}</td>\n                <td>{phoneNumber.area}</td>\n                <td>{phoneNumber.company}</td>\n                <td>{phoneNumber.call_flow}</td>\n\n                <td className={classNames({\n                  'red-text': phoneNumber.active === 'Off',\n                  'green-text': phoneNumber.active === 'On',\n                })}>{phoneNumber.active}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.phone_numbers.map((phoneNumber, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.phoneNumbers.item', {}, {reload: true})}>\n                <td>\n                  <div>{phoneNumber.phone}</div>\n                  <div>{phoneNumber.friendly_name}</div>\n                </td>\n                <td>\n                  <div>{phoneNumber.source}</div>\n                  <div>{phoneNumber.area}</div>\n                </td>\n                <td>\n                  <div>{phoneNumber.company}</div>\n                  <div className={classNames({\n                  'red-text': phoneNumber.type === 'System',\n                  'green-text': phoneNumber.type === 'Source',\n                  'blue-text': !['System', 'Source'].includes(phoneNumber.type)\n                })}>{phoneNumber.type}</div>\n                </td>\n                <td>\n                  <div>{phoneNumber.call_flow}</div>\n                  <div className={classNames({\n                  'red-text': phoneNumber.active === 'Off',\n                  'green-text': phoneNumber.active === 'On',\n                })}>{phoneNumber.active}</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.phone_numbers.map((phoneNumber, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.phoneNumbers.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{phoneNumber.phone}</b></div>\n                    <div>\n                      {phoneNumber.friendly_name}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      {phoneNumber.company}\n                    </div>\n                    <div className={classNames({\n                      'red-text': phoneNumber.type === 'System',\n                      'green-text': phoneNumber.type === 'Source',\n                      'blue-text': !['System', 'Source'].includes(phoneNumber.type)\n                    })}>\n                      {phoneNumber.type}\n                    </div>\n                    <div className={classNames({\n                      'red-text': phoneNumber.active === 'Off',\n                      'green-text': phoneNumber.active === 'On',\n                    })}>\n                      {phoneNumber.active}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Area:</span>\n                      <span> {phoneNumber.area}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Source:</span>\n                      <span> {phoneNumber.source}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{phoneNumber.call_flow}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_PhoneNumbersPage_List\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/PhoneNumbers/New.tsx",["579"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport Select from \"../../../components/Select\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport { CallCenter_PhoneNumber } from \"../../../models/CallCenter\"\nimport Switcher from \"../../../components/Switcher\"\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport Icon from \"../../../components/Icon\"\nimport classNames from \"classnames\"\nimport ReactInputMask from \"react-input-mask\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst CallCenter_PhoneNumbersPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [edit, setEdit] = useState<{\n\n    types: string[],\n    sources: string[],\n    companies: string[],\n    areas: string[],\n    call_flows: string[]\n  } | null>(null)\n\n  const [newPhoneNumberData, setNewPhoneNumberData] = useState<Partial<CallCenter_PhoneNumber> | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: phoneNumbersData } = (await axios.get('/json/call_center_phone_numbers.json'))\n\n      setEdit(phoneNumbersData.edit)\n\n      setNewPhoneNumberData({\n        ...newPhoneNumberData,\n\n        phone: '',\n        active: 'On',\n        type: phoneNumbersData.edit.types[0],\n        source: phoneNumbersData.edit.sources[0],\n        company: phoneNumbersData.edit.companies[0],\n        area: phoneNumbersData.edit.areas[0],\n        call_flow: phoneNumbersData.edit.call_flows[0],\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load phoneNumber data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Watch changes\n  useEffect(() => {\n    setReadyToSave(true)\n  }, [\n    newPhoneNumberData\n  ])\n  \n  // Render function\n  return (<>\n    {newPhoneNumberData && edit ? (\n      <div className=\"CallCenter_PhoneNumbersPage_New entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Phone Number</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Phone Number:</span>\n                \n                <ReactInputMask type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newPhoneNumberData.phone} onChange={({target: {value}}) => setNewPhoneNumberData({...newPhoneNumberData, phone: value})} />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Active:</span>\n                \n                <Switcher checked={newPhoneNumberData.active === 'On'} onChange={(value) => setNewPhoneNumberData({...newPhoneNumberData, active: value ? 'On' : 'Off'})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Types:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select options={edit.types.map((type) => ({\n                    span: type,\n                    value: type\n                  }))} selectedOption={newPhoneNumberData.type as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, type: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Sources:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select options={edit.sources.map((source) => ({\n                    span: source,\n                    value: source\n                  }))} selectedOption={newPhoneNumberData.source as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, source: value})}/>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Company:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select options={edit.companies.map((company) => ({\n                    span: company,\n                    value: company\n                  }))} selectedOption={newPhoneNumberData.company as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, company: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\" style={{zIndex: 5}}>\n                <span>Area:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select options={edit.areas.map((area) => ({\n                    span: area,\n                    value: area\n                  }))} selectedOption={newPhoneNumberData.area as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, area: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Call Flow:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select options={edit.call_flows.map((call_flow) => ({\n                    span: call_flow,\n                    value: call_flow\n                  }))} selectedOption={newPhoneNumberData.call_flow as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, call_flow: value})}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('call_center.phoneNumbers', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_PhoneNumbersPage_New\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallGroups/List.tsx",["580","581","582","583"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BaseLink, useRoute } from \"react-router5\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport Icon from \"../../../components/Icon\"\nimport ReportFilters from \"../../../components/reports/Filters\"\nimport ReportTableControls from \"../../../components/reports/TableControls\"\nimport ReportTableField from \"../../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../../funcs/base\"\nimport { CallCenter_CallGroup } from \"../../../models/CallCenter\"\nimport Client from \"../../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport \"../../../styles/pages/common/report-list.sass\"\nimport {getActiveAccount} from \"../../../funcs\";\nimport Account from \"../../../models/Account\";\nimport qs from \"qs\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface CallGroupsReport {\n\n  interface: {\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_call_group: boolean,\n    add_call_group: boolean\n  },\n\n  call_groups: CallCenter_CallGroup[]\n}\n\nconst CallCenter_CallGroupsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute();\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random());\n\n  const [reportData, setReportData] = useState<CallGroupsReport | null>(null);\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Dispatchers',\n      value: 'dispatchers'\n    },{\n      span: 'Call Flow',\n      value: 'call_flows'\n    }]\n\n  })\n\n  // Load callGroups function\n  async function loadCallGroups() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n    try {\n      const { data: dipsatchersReport } = (await httpClient.post('/callgroups/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: CallGroupsReport}\n\n      setReportData(dipsatchersReport)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load clients on page mount\n  useEffect(() => { loadCallGroups() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallCenter_CallGroupsPage_List\" >\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('call_center.groups.new', {}, {reload: true})}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Group</span>\n                <Icon icon=\"user-29\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Dispatchers</span>)}\n\n                sortDirection={localInterface.sort.field === 'dispatchers' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'dispatchers', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Call Flow</span>)}\n\n                sortDirection={localInterface.sort.field === 'call_flows' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'call_flows', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.call_groups.map((callGroup, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.groups.item', {}, {reload: true})}>\n                <td>{callGroup.name}</td>\n                <td>{callGroup.dispatchers}</td>\n                <td>{callGroup.call_flows}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Dispatchers</th>\n              <th>Call Flow</th>\n            </tr>\n            {reportData.call_groups.map((callGroup, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.groups.item', {}, {reload: true})}>\n                <td>{callGroup.name}</td>\n                <td>{callGroup.dispatchers}</td>\n                <td>{callGroup.call_flows}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.call_groups.map((callGroup, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.groups.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{callGroup.name}</b></div>\n                    <div>\n                      {callGroup.dispatchers}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n                  <div></div>\n\n                  <div className=\"__right\">\n                    <div>\n                      <b>{callGroup.call_flows}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_CallGroupsPage_List\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/PhoneNumbers/Item.tsx",["584","585"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../../components/Icon\"\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../../components/Select\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport { CallCenter_PhoneNumber } from \"../../../models/CallCenter\"\nimport Switcher from \"../../../components/Switcher\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport classNames from \"classnames\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface PhoneNumberData {\n  \n  permissions: {\n    \n    edit_phone_number: boolean,\n  },\n\n  phone_number: CallCenter_PhoneNumber,\n\n  edit: {\n    types: string[],\n    sources: string[],\n    companies: string[],\n    areas: string[],\n    call_flows: string[]\n  }\n}\n\nconst CallCenter_PhoneNumbersPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [phoneNumberData, setPhoneNumberData] = useState<PhoneNumberData | null>(null)\n\n  const [newPhoneNumberData, setNewPhoneNumberData] = useState<Partial<CallCenter_PhoneNumber>>({\n    \n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: phoneNumberData } = (await axios.get('/json/call_center_phone_number.json')) as {data: PhoneNumberData}\n\n      setPhoneNumberData(phoneNumberData)\n\n      setNewPhoneNumberData({\n        \n        phone: '',\n        active: 'On',\n\n        type: phoneNumberData.edit.types[0],\n        source: phoneNumberData.edit.sources[0],\n        company: phoneNumberData.edit.companies[0],\n        area: phoneNumberData.edit.areas[0],\n        call_flow: phoneNumberData.edit.call_flows[0],\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load phoneNumber data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newPhoneNumberData\n  ])\n  \n  // Render function\n  return (<>\n    {phoneNumberData && newPhoneNumberData.active ? (\n      <div className=\"CallCenter_PhoneNumbersPage_Item entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Phone Number</h1>\n\n          {phoneNumberData?.permissions.edit_phone_number && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Phone Number:</span>\n                \n                <input disabled={true} type=\"text\" defaultValue={phoneNumberData.phone_number.phone} onChange={({target: {value}}) => setNewPhoneNumberData({...newPhoneNumberData, phone: value})} />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Active:</span>\n                \n                <Switcher checked={newPhoneNumberData.active === 'On'} onChange={(value) => setNewPhoneNumberData({...newPhoneNumberData, active: value ? 'On' : 'Off'})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Types:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select disabled={!editing} options={phoneNumberData.edit.types.map((type) => ({\n                    span: type,\n                    value: type\n                  }))} selectedOption={newPhoneNumberData.type as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, type: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Sources:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select disabled={!editing} options={phoneNumberData.edit.sources.map((source) => ({\n                    span: source,\n                    value: source\n                  }))} selectedOption={newPhoneNumberData.source as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, source: value})}/>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>Company:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select disabled={!editing} options={phoneNumberData.edit.companies.map((company) => ({\n                    span: company,\n                    value: company\n                  }))} selectedOption={newPhoneNumberData.company as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, company: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\" style={{zIndex: 5}}>\n                <span>Area:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select disabled={!editing} options={phoneNumberData.edit.areas.map((area) => ({\n                    span: area,\n                    value: area\n                  }))} selectedOption={newPhoneNumberData.area as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, area: value})}/>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Call Flow:</span>\n\n                <div className=\"input-wrapper\">\n                  <Select disabled={!editing} options={phoneNumberData.edit.call_flows.map((call_flow) => ({\n                    span: call_flow,\n                    value: call_flow\n                  }))} selectedOption={newPhoneNumberData.call_flow as string} onChange={(value: string) => setNewPhoneNumberData({...newPhoneNumberData, call_flow: value})}/>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={phoneNumberData.phone_number.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={phoneNumberData.phone_number.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={phoneNumberData.phone_number.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={phoneNumberData.phone_number.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Phone Number</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete PhoneNumber\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the phone number it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_PhoneNumbersPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Permissions/Item.tsx",["586","587","588"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport Permission from \"../../models/Permission\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport PermissionUser from \"../../models/PermissionUser\"\nimport classNames from \"classnames\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface PermissionData {\n\tpermissions: {\n\t\tedit_permission: boolean,\n\t\tshow_user: boolean\n\t},\n\tpermission: Permission,\n\tusers: PermissionUser[],\n\tedit: {\n\t\tactions: string[]\n\t}\n}\n\nconst PermissionsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [permissionData, setPermissionData] = useState<PermissionData | null>(null)\n\n  const [selectedAction, setSelectedAction] = useState<string>('')\n\n  const [newPermissionData, setNewPermissionData] = useState<Partial<Permission>>({\n    name: '',\n    users: '',\n    actions: [] as string[]\n  })\n\n  const [availableActions, setAvailableActions] = useState<string[]>([])\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: permissionData } = (await axios.get('/json/permission.json')) as {data: PermissionData}\n\n      let _availableActions = [''].concat(permissionData.edit.actions.filter((action) => !permissionData.permission.actions.includes(action)))\n\n      setPermissionData(permissionData)\n      setAvailableActions(_availableActions)\n      setSelectedAction(_availableActions[0])\n      setNewPermissionData({\n        ...newPermissionData,\n        actions: permissionData.permission.actions\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load permission data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Add action function\n  function addAction() {\n\n    if(!newPermissionData.actions || !permissionData || !newPermissionData) return\n\n    setNewPermissionData({\n      ...newPermissionData,\n      actions: [\n        ...newPermissionData.actions,\n        selectedAction\n      ]\n    })\n\n    let _availableActions = [...permissionData?.edit.actions]\n\n    _availableActions = permissionData.edit.actions.filter((action) => !(newPermissionData.actions as string[]).includes(action))\n    _availableActions.splice(_availableActions.findIndex((_action) => selectedAction === _action), 1)\n\n    setAvailableActions([\n      ..._availableActions\n    ])\n\n    setSelectedAction('')\n\n    setReadyToSave(true)\n  }\n\n  // Remove action function\n  function removeAction(i: number) {\n\n    let _permissionActions = [...(newPermissionData.actions as string[])]\n\n    let _action = _permissionActions[i]\n    \n    _permissionActions.splice(i, 1)\n\n    setNewPermissionData({\n      ...newPermissionData,\n      actions: _permissionActions\n    })\n\n    setAvailableActions([\n      ...availableActions,\n      _action\n    ])\n\n    setReadyToSave(true)\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newPermissionData\n  ])\n  \n  // Render function\n  return (<>\n    {permissionData && newPermissionData ? (\n      <div className=\"PermissionsPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <div className=\"flex-container _gap-narrow\">\n            <h1>Permission:</h1>\n            <div className=\"item-name\">\n              {permissionData.permission.name}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" defaultValue={permissionData.permission.name} onChange={({target: {value}}) => setNewPermissionData({...newPermissionData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Actions</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Action:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableActions.map((action) => ({\n                  span: action,\n                  value: action\n                }))} selectedOption={selectedAction} onChange={(value) => setSelectedAction(value as string)}/>\n                <button disabled={!selectedAction} className=\"_green\" onClick={() => addAction()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className=\"table som\">\n            <tr>\n              <th style={{width: '100%'}}>Action</th>\n              <th>Allow</th>\n              <th></th>\n            </tr>\n            {(newPermissionData.actions as string[]).map((action, i) => (\n              <tr key={i}>\n                <td>{action}</td>\n                <td>\n                  <Checkbox contents={''} value={true} />\n                </td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={() => removeAction(i)}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={''} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Users</div>\n\n          <table className=\"table\">\n            <tr>\n              <th>First Name</th>\n              <th>Last Name</th>\n              <th>Function</th>\n              <th>Active</th>\n            </tr>\n            {permissionData.users.map((user, i) => (\n              <tr key={i}>\n                <td>{user.firstname}</td>\n                <td>{user.lastname}</td>\n                <td>{user.function}</td>\n                <td className={classNames({\n                  'red-text': user.active === 'Inactive',\n                  'green-text': user.active === 'Active',\n                  'blue-text': !['Inactive', 'Active'].includes(user.active)\n                })}>{user.active}</td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div>\n            <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Permission</button>\n          </div>\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('permissions', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n\n        {/* Item delete popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Permission\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the permission it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default PermissionsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/Settings.tsx",["589","590","591","592","593","594"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport Switcher from \"../../components/Switcher\"\nimport classNames from \"classnames\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface SettingsData {\n\tpermissions: {\n\t\tedit_call_settings: boolean\n\t},\n  call_settings: {\n    \n    active: boolean,\n    twilio_account_sid: string,\n    twilio_call_token: string,\n    twilio_token: string,\n\n    created_at: string,\n    created_by: string,\n    last_edited_at: string,\n    last_edited_by: string\n  }\n}\n\nconst CallCenter_SettingsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n  \n  const [settingsData, setSettingsData] = useState<SettingsData | null>(null)\n\n  const [newSettingsData, setNewSettingsData] = useState<{[key: string]: any}>({\n    \n  })\n\n  const [inputTypes, setInputTypes] = useState({\n\n    twilio_account_sid: 'password' as 'text' | 'password',\n    twilio_call_token: 'password' as 'text' | 'password',\n    twilio_token: 'password' as 'text' | 'password',\n  })\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: settingsData } = (await axios.get('/json/call_center_settings.json')) as {data: SettingsData}\n\n      setSettingsData(settingsData)\n      setNewSettingsData({\n        ...newSettingsData,\n        ...settingsData.call_settings\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load setting data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Watch changes\n  useEffect(() => {\n    setReadyToSave(true)\n  }, [\n    newSettingsData\n  ])\n  \n  // Render function\n  return (<>\n    {newSettingsData ? (\n      <div className=\"CallCenter_SettingsPage_Item entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Call center:</span>\n                <Switcher checked={newSettingsData.active} onChange={(value) => setNewSettingsData({...newSettingsData, active: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Twilio</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Account SID:</span>\n                <div className=\"form-field _iconed\">\n                  <input type={inputTypes.twilio_account_sid} readOnly={inputTypes.twilio_account_sid !== 'text'} defaultValue={newSettingsData.twilio_account_sid} onChange={({target: {value}}) => setNewSettingsData({...newSettingsData, twilio_account_sid: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_account_sid: inputTypes.twilio_account_sid === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Call Token:</span>\n                <div className=\"form-field _iconed\">\n                  <input type={inputTypes.twilio_call_token} readOnly={inputTypes.twilio_call_token !== 'text'} defaultValue={newSettingsData.twilio_call_token} onChange={({target: {value}}) => setNewSettingsData({...newSettingsData, twilio_call_token: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_call_token: inputTypes.twilio_call_token === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Token:</span>\n                <div className=\"form-field _iconed\">\n                  <input type={inputTypes.twilio_token} readOnly={inputTypes.twilio_token !== 'text'} defaultValue={newSettingsData.twilio_token} onChange={({target: {value}}) => setNewSettingsData({...newSettingsData, twilio_token: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_token: inputTypes.twilio_token === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={newSettingsData.last_edited_at} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={newSettingsData.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('call_center', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_SettingsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallGroups/Item.tsx",["595","596","597","598"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../../components/Icon\"\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../../components/Select\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport { CallCenter_CallFlow, CallCenter_CallGroup, CallCenter_Dispatcher } from \"../../../models/CallCenter\"\nimport Switcher from \"../../../components/Switcher\"\nimport classNames from \"classnames\"\nimport { BaseLink, useRoute } from \"react-router5\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface CallGroupData {\n  \n  permissions: {\n    \n    edit_call_group: boolean,\n    show_dispatcher: boolean\n  },\n\n  call_group: CallCenter_CallGroup,\n  dispatchers: CallCenter_Dispatcher[],\n  call_flows: CallCenter_CallFlow[],\n\n  edit: {\n    \n    dispatchers: CallCenter_Dispatcher[]\n  }\n}\n\nconst emptyDispatcher: CallCenter_Dispatcher = {\n  dispatcher_id: '',\n  name: '',\n  user: '',\n  phone: '',\n  is_phone: false,\n  is_softphone: false,\n  active: 'Active',\n  groups: '',\n  \"created_at\": \"05/04/2021 09:32am\",\n  \"created_by\": \"Alex\",\n  \"last_edited_at\": \"05/04/2021 10:34am\",\n  \"last_edited_by\": \"Alex\"\n}\n\nconst CallCenter_CallGroupsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(true)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [callGroupData, setCallGroupData] = useState<CallGroupData | null>(null)\n\n  const [dispatchers, setDispatchers] = useState<CallCenter_Dispatcher[] | null>(null)\n  const [availableDispatchers, setAvailableDispatchers] = useState<CallCenter_Dispatcher[]>([])\n  const [selectedDispatcher, setSelectedDispatcher] = useState<CallCenter_Dispatcher>(emptyDispatcher)\n\n  const [newCallGroupData, setNewCallGroupData] = useState({\n    name: '',\n    dispatchers: [] as CallCenter_Dispatcher[]\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: callGroupData } = (await axios.get('/json/call_center_call_group.json')) as {data: CallGroupData}\n\n      setCallGroupData(callGroupData)\n\n      setDispatchers(callGroupData.edit.dispatchers)\n      setAvailableDispatchers([emptyDispatcher].concat(callGroupData.edit.dispatchers))\n      setSelectedDispatcher([emptyDispatcher].concat(callGroupData.edit.dispatchers)[0])\n\n      setNewCallGroupData({\n        name: callGroupData.call_group.name,\n\n        dispatchers: callGroupData.dispatchers\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load callGroup data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newCallGroupData\n  ])\n\n  // Add dispatcher function\n  function addDispatcher() {\n\n    if (!newCallGroupData.dispatchers || !newCallGroupData) return\n\n    const newDispatchersList = [\n      ...newCallGroupData.dispatchers,\n      selectedDispatcher\n    ]\n\n    setNewCallGroupData({\n      ...newCallGroupData,\n      dispatchers: newDispatchersList\n    })\n\n    let _availableDispatchers = [...availableDispatchers]\n\n    _availableDispatchers = _availableDispatchers.filter(($dispatcher) => {\n      \n      return newDispatchersList.findIndex((dispatcher) => {\n        return dispatcher.name === $dispatcher.name\n      }) === -1\n    })\n\n    setAvailableDispatchers([\n      ..._availableDispatchers\n    ])\n\n    setSelectedDispatcher(emptyDispatcher)\n\n    setReadyToSave(true)\n  }\n\n  // Remove dispatcher function\n  function removeDispatcher(i: number) {\n\n    let _callGroupDispatchers = [...newCallGroupData.dispatchers]\n\n    let _dispatcher = _callGroupDispatchers[i]\n    \n    _callGroupDispatchers.splice(i, 1)\n\n    setNewCallGroupData({\n      ...newCallGroupData,\n      dispatchers: _callGroupDispatchers\n    })\n\n    setAvailableDispatchers([\n      ...availableDispatchers,\n      _dispatcher\n    ])\n\n    setReadyToSave(true)\n  }\n  \n  // Render function\n  return (<>\n    {callGroupData && newCallGroupData.name ? (\n      <div className=\"CallCenter_CallGroupsPage_Item entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Call Group</h1>\n\n          {callGroupData?.permissions.edit_call_group && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" defaultValue={newCallGroupData.name} onChange={({target: {value}}) => setNewCallGroupData({...newCallGroupData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Dispatchers</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Dispatcher:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableDispatchers.map((dispatcher) => ({\n                  span: dispatcher.name,\n                  value: dispatcher.name\n                }))} selectedOption={selectedDispatcher.name} onChange={(value) => setSelectedDispatcher(availableDispatchers.find((_dispatcher) => _dispatcher.name === value) as CallCenter_Dispatcher)}/>\n                <button disabled={!selectedDispatcher.name} className=\"_green\" onClick={() => addDispatcher()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>User</th>\n              <th>Phone</th>\n              <th>Phone</th>\n              <th>Softphone</th>\n              <th>Active</th>\n              <th></th>\n            </tr>\n            {(newCallGroupData.dispatchers as CallCenter_Dispatcher[]).map((dispatcher, i) => (\n              <tr key={i}>\n                <td>{dispatcher.name}</td>\n                <td>{dispatcher.user}</td>\n                <td>{dispatcher.phone}</td>\n                <td>\n                  <Checkbox contents={''} value={dispatcher.is_phone} />\n                </td>\n                <td>\n                  <Checkbox contents={''} value={dispatcher.is_softphone} />\n                </td>\n                <td className={classNames({\n                  'red-text': dispatcher.active === 'Off',\n                  'green-text': dispatcher.active === 'On',\n                })}>{dispatcher.active}</td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={() => removeDispatcher(i)}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {newCallGroupData.dispatchers.map((dispatcher, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.dispatchers.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{dispatcher.name}</b></div>\n                    <div>\n                      {dispatcher.user}\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div className={classNames({\n                      'red-text': dispatcher.active === 'Inactive',\n                      'green-text': dispatcher.active === 'Active',\n                    })}>\n                      {dispatcher.active}\n                    </div>\n                    <div>\n                      {dispatcher.phone}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div className=\"flex-container\">\n                      <span className=\"gray\">Phone:</span>\n                      <span> <Checkbox contents='' value={dispatcher.is_phone} /></span>\n                    </div>\n                    <div className=\"flex-container\">\n                      <span className=\"gray\">Softphone:</span>\n                      <span> <Checkbox contents='' value={dispatcher.is_softphone} /></span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <button className=\"_zeroed _iconed _red\" onClick={(e) => { e.stopPropagation(); removeDispatcher(i) }}>\n                        <Icon icon=\"x-mark-1\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={callGroupData.call_group.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={callGroupData.call_group.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={callGroupData.call_group.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={callGroupData.call_group.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Call Flows</div>\n\n          <table className=\"table\">\n\n            <tr>\n              <th>Name</th>\n            </tr>\n\n            {callGroupData.call_flows.map((callFlow, i) => (\n              <tr key={i}>\n                <td>{callFlow.name}</td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Call Group</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => $router.router.navigate('call_center.callFlows', {}, {\n                reload: true\n              })}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item deleting popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete CallGroup\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the call group it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_CallGroupsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallFlows/Item.tsx",["599","600","601","602"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../../components/Icon\"\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../../components/Select\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport { CallCenter_CallFlow, CallCenter_CallGroup, CallCenter_PhoneNumber } from \"../../../models/CallCenter\"\nimport Switcher from \"../../../components/Switcher\"\nimport classNames from \"classnames\"\nimport { BaseLink, useRoute } from \"react-router5\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface CallFlowData {\n  \n  permissions: {\n    \n    edit_call_flow: boolean,\n    show_phone_number: boolean,\n    show_call_group: boolean,\n  },\n\n  call_flow: CallCenter_CallFlow,\n  call_groups: CallCenter_CallGroup[],\n  phone_numbers: CallCenter_PhoneNumber[],\n\n  edit: {\n    \n    call_groups: CallCenter_CallGroup[]\n  }\n}\n\nconst emptyCallGroup: Partial<CallCenter_CallGroup> = {\n  call_group_id: '',\n  name: '',\n  dispatchers: '',\n  call_flows: ''\n}\n\nconst CallCenter_CallFlowsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(true)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [callFlowData, setCallFlowData] = useState<CallFlowData | null>(null)\n\n  const [callGroups, setCallGroups] = useState<CallCenter_CallGroup[] | null>(null)\n  const [availableCallGroups, setAvailableCallGroups] = useState<Partial<CallCenter_CallGroup>[]>([])\n  const [selectedCallGroup, setSelectedCallGroup] = useState<Partial<CallCenter_CallGroup>>(emptyCallGroup)\n\n  const [callGroupsData, setCallGroupsData] = useState<CallCenter_CallGroup[]>([])\n\n  const [phoneNumbers, setPhoneNumbers] = useState<CallCenter_PhoneNumber[]>([])\n\n  const [newCallFlowData, setNewCallFlowData] = useState({\n    name: '',\n    phrase_start: '',\n    phrase_office_closed: '',\n    phrase_office_temporary_closed: '',\n    phrase_phone_not_available: '',\n    phrase_dispatcher_not_available: ''\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: callFlowData } = (await axios.get('/json/call_center_call_flow.json')) as {data: CallFlowData}\n\n      setPhoneNumbers(callFlowData.phone_numbers)\n      \n      setCallFlowData(callFlowData)\n\n      setCallGroups(callFlowData.edit.call_groups)\n      setCallGroupsData(callFlowData.call_groups)\n\n      let _availableCallGroups = []\n\n      _availableCallGroups = callFlowData.edit.call_groups.filter(($callGroup) => {\n        \n        return callFlowData.call_groups.findIndex((callGroup) => {\n          return callGroup.name === $callGroup.name\n        }) === -1\n      })\n\n      setAvailableCallGroups([\n        ..._availableCallGroups\n      ])\n      \n      // setAvailableCallGroups([emptyCallGroup].concat(callFlowData.edit.call_groups))\n\n      setSelectedCallGroup(emptyCallGroup)\n\n      setNewCallFlowData({\n        name: callFlowData.call_flow.name,\n\n        phrase_start: callFlowData.call_flow.phrase_start,\n        phrase_office_closed: callFlowData.call_flow.phrase_office_closed,\n        phrase_office_temporary_closed: callFlowData.call_flow.phrase_office_temporary_closed,\n        phrase_phone_not_available: callFlowData.call_flow.phrase_phone_not_available,\n        phrase_dispatcher_not_available: callFlowData.call_flow.phrase_dispatcher_not_available\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load callFlow data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newCallFlowData\n  ])\n\n  // Add callGroup function\n  function addCallGroup() {\n\n    if (!callGroupsData || !newCallFlowData) return\n\n    const newCallGroupsList = [\n      ...callGroupsData,\n      selectedCallGroup\n    ]\n\n    setCallGroupsData(newCallGroupsList as any)\n\n    let _availableCallGroups = [...availableCallGroups]\n\n    _availableCallGroups = _availableCallGroups.filter(($callGroup) => {\n      \n      return newCallGroupsList.findIndex((callGroup) => {\n        return callGroup.name === $callGroup.name\n      }) === -1\n    })\n\n    setAvailableCallGroups([\n      ..._availableCallGroups\n    ])\n\n    setSelectedCallGroup(emptyCallGroup)\n\n    setReadyToSave(true)\n  }\n\n  // Remove callGroup function\n  function removeCallGroup(i: number) {\n\n    let _callFlowCallGroups = [...callGroupsData]\n\n    let _callGroup = _callFlowCallGroups[i]\n    \n    _callFlowCallGroups.splice(i, 1)\n\n    setCallGroupsData(_callFlowCallGroups)\n\n    setAvailableCallGroups([\n      ...availableCallGroups,\n      _callGroup\n    ])\n\n    setReadyToSave(true)\n  }\n  \n  // Render function\n  return (<>\n    {callFlowData && newCallFlowData.name ? (\n      <div className=\"CallCenter_CallFlowsPage_Item entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>Call Flow</h1>\n\n          {callFlowData?.permissions.edit_call_flow && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" defaultValue={newCallFlowData.name} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Call Groups</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Call Group:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableCallGroups.map((callGroup) => ({\n                  span: callGroup.name as string,\n                  value: callGroup.name as string\n                }))} selectedOption={selectedCallGroup.name as string} onChange={(value) => setSelectedCallGroup(availableCallGroups.find((_callGroup) => _callGroup.name === value) as CallCenter_CallGroup)}/>\n                <button disabled={!selectedCallGroup.name} className=\"_green\" onClick={() => addCallGroup()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Dispatchers</th>\n              <th>Call Flow</th>\n              <th></th>\n            </tr>\n            {(callGroupsData as CallCenter_CallGroup[]).map((callGroup, i) => (\n              <tr key={i}>\n                <td>{callGroup.name}</td>\n                <td>{callGroup.dispatchers}</td>\n                <td>{callGroup.call_flows}</td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={(e) => { e.stopPropagation(); removeCallGroup(i) }}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {callGroupsData.map((callGroup, i: number) => (\n              <div className=\"item\" key={i}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{callGroup.name}</b></div>\n                    <div>\n                      {callGroup.dispatchers}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    \n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    \n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{callGroup.call_flows}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Call Phrases</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field _ait\">\n                <span>Start Phrase:</span>\n                <textarea defaultValue={callFlowData.call_flow.phrase_start} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_start: value})}></textarea>\n              </div>\n\n              <div className=\"field _ait\">\n                <span>Office Closed:</span>\n                <textarea defaultValue={callFlowData.call_flow.phrase_office_closed} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_office_closed: value})}></textarea>\n              </div>\n\n              <div className=\"field _ait\">\n                <span>Office Temporary Closed:</span>\n                <textarea defaultValue={callFlowData.call_flow.phrase_office_temporary_closed} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_office_temporary_closed: value})}></textarea>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field _ait\">\n                <span>Phone Number Not Available:</span>\n                <textarea defaultValue={callFlowData.call_flow.phrase_phone_not_available} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_phone_not_available: value})}></textarea>\n              </div>\n\n              <div className=\"field _ait\">\n                <span>Dispatchers Not Available:</span>\n                <textarea defaultValue={callFlowData.call_flow.phrase_dispatcher_not_available} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_dispatcher_not_available: value})}></textarea>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={callFlowData.call_flow.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={callFlowData.call_flow.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={callFlowData.call_flow.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={callFlowData.call_flow.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Phone Numbers</div>\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Phone Number</th>\n              <th>Friendly Name</th>\n              <th>Type</th>\n              <th>Source</th>\n              <th>Area</th>\n              <th>Company</th>\n              <th>Call Flow</th>\n              <th>Available</th>\n            </tr>\n            {phoneNumbers.map((phoneNumber, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.phoneNumbers.item', {}, {reload: true})}>\n                <td>\n                  <div className=\"flex-container\">\n                    <span>{phoneNumber.phone}</span>\n                    <button className=\"_zeroed _iconed\">\n                      <Icon icon=\"gear-1\"/>\n                    </button>\n                  </div>\n                </td>\n                <td>{phoneNumber.friendly_name}</td>\n\n                <td className={classNames({\n                  'red-text': phoneNumber.type === 'System',\n                  'green-text': phoneNumber.type === 'Source',\n                  'blue-text': !['System', 'Source'].includes(phoneNumber.type)\n                })}>{phoneNumber.type}</td>\n\n                <td>{phoneNumber.source}</td>\n                <td>{phoneNumber.area}</td>\n                <td>{phoneNumber.company}</td>\n                <td>{phoneNumber.call_flow}</td>\n\n                <td className={classNames({\n                  'red-text': phoneNumber.active === 'Off',\n                  'green-text': phoneNumber.active === 'On',\n                })}>{phoneNumber.active}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {phoneNumbers.map((phoneNumber, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.phoneNumbers.item', {}, {reload: true})}>\n                <td>\n                  <div>{phoneNumber.phone}</div>\n                  <div>{phoneNumber.friendly_name}</div>\n                </td>\n                <td>\n                  <div>{phoneNumber.source}</div>\n                  <div>{phoneNumber.area}</div>\n                </td>\n                <td>\n                  <div>{phoneNumber.company}</div>\n                  <div className={classNames({\n                  'red-text': phoneNumber.type === 'System',\n                  'green-text': phoneNumber.type === 'Source',\n                  'blue-text': !['System', 'Source'].includes(phoneNumber.type)\n                })}>{phoneNumber.type}</div>\n                </td>\n                <td>\n                  <div>{phoneNumber.call_flow}</div>\n                  <div className={classNames({\n                  'red-text': phoneNumber.active === 'Off',\n                  'green-text': phoneNumber.active === 'On',\n                })}>{phoneNumber.active}</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {phoneNumbers.map((phoneNumber, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.phoneNumbers.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{phoneNumber.phone}</b></div>\n                    <div>\n                      {phoneNumber.friendly_name}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div>\n                      {phoneNumber.company}\n                    </div>\n                    <div className={classNames({\n                      'red-text': phoneNumber.type === 'System',\n                      'green-text': phoneNumber.type === 'Source',\n                      'blue-text': !['System', 'Source'].includes(phoneNumber.type)\n                    })}>\n                      {phoneNumber.type}\n                    </div>\n                    <div className={classNames({\n                      'red-text': phoneNumber.active === 'Off',\n                      'green-text': phoneNumber.active === 'On',\n                    })}>\n                      {phoneNumber.active}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Area:</span>\n                      <span> {phoneNumber.area}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Source:</span>\n                      <span> {phoneNumber.source}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{phoneNumber.call_flow}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Call Flow</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Call Flow\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the call flow it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => $router.router.navigate('call_center.callFlows', {}, {\n                  reload: true\n                })}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_CallFlowsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/Dispatchers/List.tsx",["603","604","605"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BaseLink, useRoute } from \"react-router5\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport Icon from \"../../../components/Icon\"\nimport ReportFilters from \"../../../components/reports/Filters\"\nimport ReportTableControls from \"../../../components/reports/TableControls\"\nimport ReportTableField from \"../../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../../funcs/base\"\nimport { CallCenter_Dispatcher } from \"../../../models/CallCenter\"\nimport Client from \"../../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport \"../../../styles/pages/common/report-list.sass\"\nimport qs from \"qs\";\nimport {getActiveAccount} from \"../../../funcs\";\nimport Account from \"../../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'phone' | 'softphone' | 'active'\n\ninterface DispatchersReport {\n\n  interface: {\n\n    filter_words: {\n\n      phone: string[],\n      softphone: string[],\n      active: string[],\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_dispatcher: boolean,\n    add_dispatcher: boolean\n  },\n\n  dispatchers: CallCenter_Dispatcher[]\n}\n\nconst CallCenter_DispatchersPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<DispatchersReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    filter_words: {\n\n      phone: [] as string[],\n      softphone: [] as string[],\n      active: [] as string[],\n    },\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'User',\n      value: 'user'\n    },{\n      span: 'Phone',\n      value: 'phone'\n    },{\n      span: 'Phone',\n      value: 'is_phone'\n    },{\n      span: 'Softphone',\n      value: 'is_softphone'\n    },{\n      span: 'Groups',\n      value: 'groups'\n    },{\n      span: 'Active',\n      value: 'active'\n    }]\n\n  })\n\n  // Load dispatchers function\n  async function loadDispatchers() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n    \n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: dipsatchersReport } = (await httpClient.post('/dispatchers/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: DispatchersReport}\n\n      setReportData(dipsatchersReport)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load clients on page mount\n  useEffect(() => { loadDispatchers() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallCenter_DispatchersPage_List\" >\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('call_center.dispatchers.new', {}, {reload: true})}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Dispatcher</span>\n                <Icon icon=\"user-1\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>User</span>)}\n\n                sortDirection={localInterface.sort.field === 'user' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'user', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Phone</span>)}\n\n                sortDirection={localInterface.sort.field === 'phone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'phone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Phone</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"phone\")}\n                onAllFiltersChange={(value) => switchFilter(\"phone\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.phone.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"phone\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"phone\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'is_phone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'is_phone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Softphone</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"softphone\")}\n                onAllFiltersChange={(value) => switchFilter(\"softphone\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.softphone.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"softphone\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"softphone\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'is_softphone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'is_softphone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Groups</span>)}\n\n                sortDirection={localInterface.sort.field === 'groups' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'groups', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Active</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"active\")}\n                onAllFiltersChange={(value) => switchFilter(\"active\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.active.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"active\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"active\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'active' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'active', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.dispatchers.map((dispatcher, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.dispatchers.item', {}, {reload: true})}>\n                <td>{dispatcher.name}</td>\n                <td>{dispatcher.user}</td>\n                <td>{dispatcher.phone}</td>\n                <td><Checkbox contents='' value={dispatcher.is_phone} /></td>\n                <td><Checkbox contents='' value={dispatcher.is_softphone} /></td>\n                <td>{dispatcher.groups}</td>\n                <td className={classNames({\n                  'red-text': dispatcher.active === 'Off',\n                  'green-text': dispatcher.active === 'On',\n                })}>{dispatcher.active}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.dispatchers.map((dispatcher, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.dispatchers.item', {}, {reload: true})}>\n                <td>\n                  <div>{dispatcher.name}</div>\n                  <div>{dispatcher.user}</div>\n                </td>\n                <td>\n                  <div>{dispatcher.phone}</div>\n                  <div>&nbsp;</div>\n                </td>\n                <td>\n                  <div className=\"flex-container\"><span>Phone:</span> <Checkbox contents='' value={dispatcher.is_phone} /></div>\n                  <div className=\"flex-container\"><span>Softphone:</span> <Checkbox contents='' value={dispatcher.is_softphone} /></div>\n                </td>\n                <td>\n                  <div>{dispatcher.groups}</div>\n                  <div className={classNames({\n                  'red-text': dispatcher.active === 'Inactive',\n                  'green-text': dispatcher.active === 'Active',\n                })}>{dispatcher.active}</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.dispatchers.map((dispatcher, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.dispatchers.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{dispatcher.name}</b></div>\n                    <div>\n                      {dispatcher.user}\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div className={classNames({\n                      'red-text': dispatcher.active === 'Inactive',\n                      'green-text': dispatcher.active === 'Active',\n                    })}>\n                      {dispatcher.active}\n                    </div>\n                    <div>\n                      {dispatcher.phone}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div className=\"flex-container\">\n                      <span className=\"gray\">Phone:</span>\n                      <span> <Checkbox contents='' value={dispatcher.is_phone} /></span>\n                    </div>\n                    <div className=\"flex-container\">\n                      <span className=\"gray\">Softphone:</span>\n                      <span> <Checkbox contents='' value={dispatcher.is_softphone} /></span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{dispatcher.groups}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_DispatchersPage_List\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallFlows/List.tsx",["606","607","608","609"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BaseLink, useRoute } from \"react-router5\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport Icon from \"../../../components/Icon\"\nimport ReportFilters from \"../../../components/reports/Filters\"\nimport ReportTableControls from \"../../../components/reports/TableControls\"\nimport ReportTableField from \"../../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../../funcs/base\"\nimport { CallCenter_CallFlow } from \"../../../models/CallCenter\"\nimport Client from \"../../../models/Client\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport \"../../../styles/pages/common/report-list.sass\"\nimport qs from \"qs\";\nimport {getActiveAccount} from \"../../../funcs\";\nimport Account from \"../../../models/Account\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface CallFlowsReport {\n\n  interface: {\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_call_flow: boolean,\n    add_call_flow: boolean\n  },\n\n  call_flows: CallCenter_CallFlow[]\n}\n\nconst CallCenter_CallFlowsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<CallFlowsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Groups',\n      value: 'call_groups'\n    }]\n\n  })\n\n  // Load callFlows function\n  async function loadCallFlows() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n\n    try {\n      const { data: dipsatchersReport } = (await httpClient.post('/callflows/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: CallFlowsReport}\n\n      setReportData(dipsatchersReport)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load clients on page mount\n  useEffect(() => { loadCallFlows() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallCenter_CallFlowsPage_List\" >\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('call_center.callFlows.new', {}, {reload: true})}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Call Flow</span>\n                <Icon icon=\"share-7\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Groups</span>)}\n\n                sortDirection={localInterface.sort.field === 'call_groups' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'call_groups', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.call_flows.map((callFlow, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.callFlows.item', {}, {reload: true})}>\n                <td>{callFlow.name}</td>\n                <td>{callFlow.call_groups}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Groups</th>\n            </tr>\n            {reportData.call_flows.map((callFlow, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('call_center.callFlows.item', {}, {reload: true})}>\n                <td>{callFlow.name}</td>\n                <td>{callFlow.call_groups}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.call_flows.map((callFlow, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.callFlows.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{callFlow.name}</b></div>\n                    <div>\n                      {callFlow.call_groups}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_CallFlowsPage_List\n","/Users/nicole/rrrr/crm/src/pages/AccountPermissions/New.tsx",["610","611","612","613","614"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport AccountPermission from \"../../models/AccountPermission\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst AccountPermissionsPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [actions, setActions] = useState<string[] | null>(null)\n  const [availableActions, setAvailableActions] = useState<string[]>([])\n  const [selectedAction, setSelectedAction] = useState<string>('')\n  const [newAccountPermissionData, setNewAccountPermissionData] = useState({\n    name: '',\n    actions: [] as string[]\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: accountPermissionsData } = (await axios.get('/json/account_permissions.json'))\n\n      setActions(accountPermissionsData.edit.actions)\n      setAvailableActions([''].concat(accountPermissionsData.edit.actions))\n      setSelectedAction(availableActions[0])\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load accountPermission data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Add action function\n  function addAction() {\n\n    if(!newAccountPermissionData.actions || !newAccountPermissionData) return\n\n    setNewAccountPermissionData({\n      ...newAccountPermissionData,\n      actions: [\n        ...newAccountPermissionData.actions,\n        selectedAction\n      ]\n    })\n\n    let _availableActions = [...availableActions]\n\n    _availableActions = _availableActions.filter((action) => !(newAccountPermissionData.actions as string[]).includes(action))\n    _availableActions.splice(_availableActions.findIndex((_action) => selectedAction === _action), 1)\n\n    setAvailableActions([\n      ..._availableActions\n    ])\n\n    setSelectedAction(_availableActions[0])\n\n    setReadyToSave(true)\n  }\n\n  // Remove action function\n  function removeAction(i: number) {\n\n    let _accountPermissionActions = [...(newAccountPermissionData.actions as string[])]\n\n    let _action = _accountPermissionActions[i]\n    \n    _accountPermissionActions.splice(i, 1)\n\n    setNewAccountPermissionData({\n      ...newAccountPermissionData,\n      actions: _accountPermissionActions\n    })\n\n    setAvailableActions([\n      ...availableActions,\n      _action\n    ])\n\n    setReadyToSave(true)\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newAccountPermissionData\n  ])\n  \n  // Render function\n  return (<>\n    {availableActions ? (\n      <div className=\"AccountPermissionsPage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Account`s Permission</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewAccountPermissionData({...newAccountPermissionData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Actions</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Action:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableActions.map((action) => ({\n                  span: action,\n                  value: action\n                }))} selectedOption={selectedAction} onChange={(value) => setSelectedAction(value as string)}/>\n                <button disabled={!selectedAction} className=\"_green\" onClick={() => addAction()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className=\"table som\">\n            <tr>\n              <th style={{width: '100%'}}>Action</th>\n              <th>Allow</th>\n              <th></th>\n            </tr>\n            {(newAccountPermissionData.actions as string[]).map((action, i) => (\n              <tr key={i}>\n                <td>{action}</td>\n                <td>\n                  <Checkbox contents={''} value={true} />\n                </td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={() => removeAction(i)}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('accounts_permissions', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default AccountPermissionsPage_New\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallGroups/New.tsx",["615"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../../components/Icon\"\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport Select from \"../../../components/Select\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport { CallCenter_Dispatcher } from \"../../../models/CallCenter\"\nimport classNames from \"classnames\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst emptyDispatcher: CallCenter_Dispatcher = {\n  dispatcher_id: '',\n  name: '',\n  user: '',\n  phone: '',\n  is_phone: false,\n  is_softphone: false,\n  active: 'Active',\n  groups: '',\n  \"created_at\": \"05/04/2021 09:32am\",\n  \"created_by\": \"Alex\",\n  \"last_edited_at\": \"05/04/2021 10:34am\",\n  \"last_edited_by\": \"Alex\"\n}\n\nconst CallCenter_CallGroupsPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [dispatchers, setDispatchers] = useState<CallCenter_Dispatcher[] | null>(null)\n  const [availableDispatchers, setAvailableDispatchers] = useState<CallCenter_Dispatcher[]>([])\n  const [selectedDispatcher, setSelectedDispatcher] = useState<CallCenter_Dispatcher>(emptyDispatcher)\n  const [newCallGroupData, setNewCallGroupData] = useState({\n    name: '',\n    dispatchers: [] as CallCenter_Dispatcher[]\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: callGroupsData } = (await axios.get('/json/call_center_call_groups.json'))\n\n      setDispatchers(callGroupsData.edit.dispatchers)\n      setAvailableDispatchers([emptyDispatcher].concat(callGroupsData.edit.dispatchers))\n      setSelectedDispatcher([emptyDispatcher].concat(callGroupsData.edit.dispatchers)[0])\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load callGroup data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Add dispatcher function\n  function addDispatcher() {\n\n    if (!newCallGroupData.dispatchers || !newCallGroupData) return\n\n    const newDispatchersList = [\n      ...newCallGroupData.dispatchers,\n      selectedDispatcher\n    ]\n\n    setNewCallGroupData({\n      ...newCallGroupData,\n      dispatchers: newDispatchersList\n    })\n\n    let _availableDispatchers = [...availableDispatchers]\n\n    _availableDispatchers = _availableDispatchers.filter(($dispatcher) => {\n      \n      return newDispatchersList.findIndex((dispatcher) => {\n        return dispatcher.name === $dispatcher.name\n      }) === -1\n    })\n\n    setAvailableDispatchers([\n      ..._availableDispatchers\n    ])\n\n    setSelectedDispatcher(emptyDispatcher)\n\n    setReadyToSave(true)\n  }\n\n  // Remove dispatcher function\n  function removeDispatcher(i: number) {\n\n    let _callGroupDispatchers = [...newCallGroupData.dispatchers]\n\n    let _dispatcher = _callGroupDispatchers[i]\n    \n    _callGroupDispatchers.splice(i, 1)\n\n    setNewCallGroupData({\n      ...newCallGroupData,\n      dispatchers: _callGroupDispatchers\n    })\n\n    setAvailableDispatchers([\n      ...availableDispatchers,\n      _dispatcher\n    ])\n\n    setReadyToSave(true)\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newCallGroupData\n  ])\n  \n  // Render function\n  return (<>\n    {true ? (\n      <div className=\"CallCenter_CallGroupsPage_New entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Call Group</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewCallGroupData({...newCallGroupData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Dispatchers</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Dispatcher:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableDispatchers.map((dispatcher) => ({\n                  span: dispatcher.name,\n                  value: dispatcher.name\n                }))} selectedOption={selectedDispatcher.name} onChange={(value) => setSelectedDispatcher(availableDispatchers.find((_dispatcher) => _dispatcher.name === value) as CallCenter_Dispatcher)}/>\n                <button disabled={!selectedDispatcher.name} className=\"_green\" onClick={() => addDispatcher()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>User</th>\n              <th>Phone</th>\n              <th>Phone</th>\n              <th>Softphone</th>\n              <th>Active</th>\n              <th></th>\n            </tr>\n            {(newCallGroupData.dispatchers as CallCenter_Dispatcher[]).map((dispatcher, i) => (\n              <tr key={i}>\n                <td>{dispatcher.name}</td>\n                <td>{dispatcher.user}</td>\n                <td>{dispatcher.phone}</td>\n                <td>\n                  <Checkbox contents={''} value={dispatcher.is_phone} />\n                </td>\n                <td>\n                  <Checkbox contents={''} value={dispatcher.is_softphone} />\n                </td>\n                <td className={classNames({\n                  'red-text': dispatcher.active === 'Off',\n                  'green-text': dispatcher.active === 'On',\n                })}>{dispatcher.active}</td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={() => removeDispatcher(i)}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {newCallGroupData.dispatchers.map((dispatcher, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('call_center.dispatchers.item', {}, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{dispatcher.name}</b></div>\n                    <div>\n                      {dispatcher.user}\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div className={classNames({\n                      'red-text': dispatcher.active === 'Inactive',\n                      'green-text': dispatcher.active === 'Active',\n                    })}>\n                      {dispatcher.active}\n                    </div>\n                    <div>\n                      {dispatcher.phone}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div className=\"flex-container\">\n                      <span className=\"gray\">Phone:</span>\n                      <span> <Checkbox contents='' value={dispatcher.is_phone} /></span>\n                    </div>\n                    <div className=\"flex-container\">\n                      <span className=\"gray\">Softphone:</span>\n                      <span> <Checkbox contents='' value={dispatcher.is_softphone} /></span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                        <button className=\"_zeroed _iconed _red\" onClick={(e) => { e.stopPropagation(); removeDispatcher(i) }}>\n                        <Icon icon=\"x-mark-1\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('call_center.groups', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_CallGroupsPage_New\n","/Users/nicole/rrrr/crm/src/pages/Accounts/List.tsx",["616","617","618"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport {getActiveAccount, httpClient, nError} from \"../../funcs\"\nimport Account from \"../../models/Account\"\nimport AccountCustom from \"../../models/AccountCustom\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport qs from \"qs\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'source' | 'status'\n\ninterface AccountsReport {\n\n  interface: {\n\n    filter_words: {\n\n      source: string[],\n      status: string[],\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_account: boolean,\n    add_account: boolean\n  },\n\n  accounts: AccountCustom[],\n\n  edit: {\n    status: string[],\n    owners: {\n      user_id: string,\n      user: string\n    }[],\n    source: string[],\n    time_zone: string[],\n    permissions: string[],\n    state: string[]\n  }\n}\n\nconst AccountsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<AccountsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    filter_words: {\n\n      source: [] as string[],\n      status: [] as string[]\n    },\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Email',\n      value: 'email'\n    },{\n      span: 'Owner',\n      value: 'owner'\n    },{\n      span: 'Date',\n      value: 'created_at'\n    },{\n      span: 'Users',\n      value: 'users'\n    },{\n      span: 'Phone Numbers',\n      value: 'phone_numbers'\n    },{\n      span: 'Source',\n      value: 'source'\n    },{\n      span: 'Status',\n      value: 'status'\n    }]\n\n  })\n\n  // Load accounts function\n  async function loadAccounts() {\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`;\n\n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: accounts } = (await httpClient.post('/accounts/report', qs.stringify({\n\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: AccountsReport}\n\n      setReportData(accounts)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load accounts on page mount\n  useEffect(() => { loadAccounts() }, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  // Is all filters selected function\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  // Filter switch function\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"AccountsPage_List\" >\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Accounts</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => {\n            $setUpdater(Math.random())\n          }}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({ ...localInterface, sort: { ...localInterface.sort, direction: value } })}\n          onSortFire={() => 0}\n          \n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('accounts.new')}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Account</span>\n                <Icon icon=\"user-1\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Email</span>)}\n\n                sortDirection={localInterface.sort.field === 'email' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'email', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Owner</span>)}\n\n                sortDirection={localInterface.sort.field === 'owner' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'owner', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Date</span>)}\n\n                sortDirection={localInterface.sort.field === 'created_at' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'created_at', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Users</span>)}\n\n                sortDirection={localInterface.sort.field === 'users' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'users', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Phone Numbers</span>)}\n\n                sortDirection={localInterface.sort.field === 'phone_numbers' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'phone_numbers', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Source</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"source\")}\n                onAllFiltersChange={(value) => switchFilter(\"source\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.source.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"source\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"source\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'source' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'source', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Status</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"status\")}\n                onAllFiltersChange={(value) => switchFilter(\"status\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.status.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"status\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"status\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'status' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'status', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.accounts.map((account, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('accounts.item', {\n                accountId: account.account_id\n              }, {reload: true})}>\n                <td>{account.name}</td>\n                <td>{account.email}</td>\n                <td>{account.owner}</td>\n                <td>{account.created_at}</td>\n                <td>{account.users}</td>\n                <td>{account.phone_numbers}</td>\n                <td>{account.source}</td>\n                <td className={classNames({\n                  'red-text': account.status === 'Inactive',\n                  'green-text': account.status === 'Active',\n                  'blue-text': !['Inactive', 'Active'].includes(account.status),\n                })}>{account.status}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.accounts.map((account, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('accounts.item', {\n                accountId: account.account_id\n              }, {reload: true})}>\n                <td>\n                  <div>{account.name}</div>\n                  <div>{account.email}</div>\n                </td>\n                <td>\n                  <div>{account.owner}</div>\n                  <div>{account.created_at}</div>\n                </td>\n                <td>\n                  <div>Users: {account.users}</div>\n                  <div>Phone Numbers: {account.phone_numbers}</div>\n                </td>\n                <td>\n                  <div>{account.source}</div>\n                  <div className={classNames({\n                    'red-text': account.status === 'Inactive',\n                    'green-text': account.status === 'Active',\n                    'blue-text': !['Inactive', 'Active'].includes(account.status),\n                  })}>\n                    {account.status}\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.accounts.map((account, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('accounts.item', {\n                accountId: account.account_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{account.name}</b></div>\n                    <div>\n                      {account.email}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    <div className={classNames({\n                      'red-text': account.status === 'Inactive',\n                      'green-text': account.status === 'Active',\n                      'blue-text': !['Inactive', 'Active'].includes(account.status),\n                    })}>\n                      {account.status}\n                    </div>\n                    <div>\n                      {account.owner}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    <div>\n                      <span className=\"gray\">Users:</span>\n                      <span> {account.users}</span>\n                    </div>\n                    <div>\n                      <span className=\"gray\">Phone Numbers:</span>\n                      <span> {account.phone_numbers}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{account.source}</b>\n                    </div>\n                    <div>\n                      <b>{account.created_at}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default AccountsPage_List\n","/Users/nicole/rrrr/crm/src/pages/AccountPermissions/Item.tsx",["619","620","621"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs\"\nimport AccountPermission from \"../../models/AccountPermission\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport PermissionAccount from \"../../models/PermissionAccount\"\nimport classNames from \"classnames\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface AccountPermissionData {\n\n\tpermissions: {\n\t\tedit_account_permission: boolean,\n\t\tshow_account: boolean\n  },\n  \n  permission: AccountPermission,\n  \n  accounts: PermissionAccount[],\n  \n\tedit: {\n\t\tactions: string[]\n\t}\n}\n\nconst AccountPermissionsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [permissionData, setAccountPermissionData] = useState<AccountPermissionData | null>(null)\n\n  const [selectedAction, setSelectedAction] = useState<string>('')\n\n  const [newAccountPermissionData, setNewAccountPermissionData] = useState<Partial<AccountPermission>>({\n    name: '',\n    accounts: '',\n    actions: [] as string[]\n  })\n\n  const [availableActions, setAvailableActions] = useState<string[]>([])\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: permissionData } = (await axios.get('/json/account_permission.json')) as {data: AccountPermissionData}\n\n      let _availableActions = [''].concat(permissionData.edit.actions.filter((action) => !permissionData.permission.actions.includes(action)))\n\n      setAccountPermissionData(permissionData)\n      setAvailableActions(_availableActions)\n      setSelectedAction(_availableActions[0])\n      setNewAccountPermissionData({\n        ...newAccountPermissionData,\n        actions: permissionData.permission.actions\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load permission data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Add action function\n  function addAction() {\n\n    if(!newAccountPermissionData.actions || !permissionData || !newAccountPermissionData) return\n\n    setNewAccountPermissionData({\n      ...newAccountPermissionData,\n      actions: [\n        ...newAccountPermissionData.actions,\n        selectedAction\n      ]\n    })\n\n    let _availableActions = [...permissionData?.edit.actions]\n\n    _availableActions = permissionData.edit.actions.filter((action) => !(newAccountPermissionData.actions as string[]).includes(action))\n    _availableActions.splice(_availableActions.findIndex((_action) => selectedAction === _action), 1)\n\n    setAvailableActions([\n      ..._availableActions\n    ])\n\n    setSelectedAction('')\n\n    setReadyToSave(true)\n  }\n\n  // Remove action function\n  function removeAction(i: number) {\n\n    let _permissionActions = [...(newAccountPermissionData.actions as string[])]\n\n    let _action = _permissionActions[i]\n    \n    _permissionActions.splice(i, 1)\n\n    setNewAccountPermissionData({\n      ...newAccountPermissionData,\n      actions: _permissionActions\n    })\n\n    setAvailableActions([\n      ...availableActions,\n      _action\n    ])\n\n    setReadyToSave(true)\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newAccountPermissionData\n  ])\n  \n  // Render function\n  return (<>\n    {permissionData && newAccountPermissionData ? (\n      <div className=\"AccountPermissionsPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <div className=\"flex-container _gap-narrow\">\n            <h1>Account`s Permission:</h1>\n            <div className=\"item-name\">\n              {permissionData.permission.name}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" defaultValue={permissionData.permission.name} onChange={({target: {value}}) => setNewAccountPermissionData({...newAccountPermissionData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Actions</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Action:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableActions.map((action) => ({\n                  span: action,\n                  value: action\n                }))} selectedOption={selectedAction} onChange={(value) => setSelectedAction(value as string)}/>\n                <button disabled={!selectedAction} className=\"_green\" onClick={() => addAction()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className=\"table som\">\n            <tr>\n              <th style={{width: '100%'}}>Action</th>\n              <th>Allow</th>\n              <th></th>\n            </tr>\n            {(newAccountPermissionData.actions as string[]).map((action, i) => (\n              <tr key={i}>\n                <td>{action}</td>\n                <td>\n                  <Checkbox contents={''} value={true} />\n                </td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={() => removeAction(i)}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={newAccountPermissionData.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={newAccountPermissionData.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={newAccountPermissionData.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={newAccountPermissionData.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Accounts</div>\n\n          <table className=\"table\">\n            <tr>\n              <th>Name</th>\n              <th>Owner</th>\n              <th>Status</th>\n            </tr>\n            {permissionData.accounts.map((account, i) => (\n              <tr key={i}>\n                <td>{account.Name}</td>\n                <td>{account.owner}</td>\n                <td className={classNames({\n                  'red-text': account.status === 'Inactive',\n                  'green-text': account.status === 'Active',\n                  'blue-text': !['Inactive', 'Active'].includes(account.status)\n                })}>{account.status}</td>\n              </tr>\n            ))}\n          </table>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div>\n            <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Account`s Permission</button>\n          </div>\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('accounts_permissions', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n\n        {/* Item delete popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Account`s Permission\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the account`s permission it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default AccountPermissionsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Accounts/Item.tsx",["622","623","624","625","626"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport {httpClient, nError} from \"../../funcs\"\nimport Account from \"../../models/Account\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport AccountCustom from \"../../models/AccountCustom\"\nimport ReactCrop, { Crop } from \"react-image-crop\"\nimport Switcher from \"../../components/Switcher\"\nimport ReactInputMask from \"react-input-mask\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface AccountData {\n\n\tpermissions: {\n\t\tedit_account: boolean,\n  },\n  \n  account: AccountCustom,\n  \n\tedit: {\n    status: string[],\n    owners: {\n      user_id: string,\n      user: string\n    }[],\n    source: string[],\n    time_zone: string[],\n    permissions: string[],\n    state: string[]\n\t}\n}\n\nconst AccountsPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [editing, setEditing] = useState(false)\n\n  const [inputTypes, setInputTypes] = useState({\n\n    twilio_account_sid: 'password' as 'text' | 'password',\n    twilio_call_token: 'password' as 'text' | 'password',\n    twilio_token: 'password' as 'text' | 'password',\n  })\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [accountData, setAccountData] = useState<AccountData | null>(null)\n\n  const [avatarPopup, setAvatarPopup] = useState(false)\n  const [avatarImageSrc, setAvatarImageSrc] = useState('')\n  const [avatarCrop, setAvatarCrop] = useState<Partial<Crop>>({\n    unit: '%',\n    width: 30,\n    aspect: 1\n  })\n\n  const [editions, setEditions] = useState<{\n    time_zone: string[],\n    source: string[],\n    status: string[],\n    owners: {\n      user: string,\n      user_id: string\n    }[],\n    permissions: string[],\n    state: string[]\n  } | null>(null)\n\n  const [newAccountData, setNewAccountData] = useState<Partial<AccountCustom>>({\n    \n  })\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: accountData } = await httpClient.get('/accounts') as {data: AccountData}\n\n      setAccountData(accountData)\n      setEditions(accountData.edit)\n      setNewAccountData(accountData.account)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load account data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // On select file function\n  function onSelectFile(e: any) {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        setAvatarImageSrc(reader.result as string)\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newAccountData\n  ])\n  \n  // Render function\n  return (<>\n    {accountData && editions && newAccountData.time_zone ? (\n      <div className=\"AccountsPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <div className=\"flex-container _gap-narrow\">\n            <h1>Account:</h1>\n            <div className=\"item-name\">\n              {accountData.account.name}\n            </div>\n          </div>\n\n          {accountData?.permissions.edit_account && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={accountData.account.name} onChange={({target: {value}}) => setNewAccountData({...newAccountData, name: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Owner:</span>\n                <Select disabled={!editing} options={editions.owners.map((owner) => ({\n                  span: owner.user,\n                  value: owner.user_id\n                }))} selectedOption={newAccountData.owner as string} onChange={(value: string) => setNewAccountData({...newAccountData, owner: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n                <ReactInputMask disabled={!editing} type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newAccountData.phone} onChange={({target: {value}}) => setNewAccountData({...newAccountData, phone: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\" style={{zIndex: 5}}>\n                <span>Status:</span>\n                <Select disabled={!editing} options={editions.status.map((status) => ({\n                  span: status,\n                  value: status\n                }))} selectedOption={newAccountData.status as string} onChange={(value: string) => setNewAccountData({...newAccountData, status: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Email:</span>\n                <input type=\"text\" defaultValue={accountData.account.email} disabled={!editing} />\n              </div>\n\n              <div className=\"field\">\n                <span>Source:</span>\n                <Select disabled={!editing} options={editions.source.map((source) => ({\n                  span: source,\n                  value: source\n                }))} selectedOption={newAccountData.source as string} onChange={(value: string) => setNewAccountData({...newAccountData, source: value})}/>\n              </div>\n            </div>\n\n            <div className=\"avatar-editing\">\n              <button className=\"_zeroed _iconed\" onClick={() => editing && setAvatarPopup(true)}>\n                <Icon icon=\"user-20\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Statistics</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Users:</span>\n                <input type=\"text\" disabled={true} defaultValue={accountData.account.users} onChange={({target: {value}}) => setNewAccountData({...newAccountData, users: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>Phone Numbers:</span>\n                <input type=\"text\" disabled={true} defaultValue={accountData.account.phone_numbers} onChange={({target: {value}}) => setNewAccountData({...newAccountData, phone_numbers: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Twilio</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Account SID:</span>\n                <div className=\"form-field _iconed\">\n                  <input disabled={!editing} type={inputTypes.twilio_account_sid} readOnly={inputTypes.twilio_account_sid !== 'text'} defaultValue={newAccountData.twilio_account_sid} onChange={({target: {value}}) => setNewAccountData({...newAccountData, twilio_account_sid: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_account_sid: inputTypes.twilio_account_sid === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Call Token:</span>\n                <div className=\"form-field _iconed\">\n                  <input disabled={!editing} type={inputTypes.twilio_call_token} readOnly={inputTypes.twilio_call_token !== 'text'} defaultValue={newAccountData.twilio_call_token} onChange={({target: {value}}) => setNewAccountData({...newAccountData, twilio_call_token: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_call_token: inputTypes.twilio_call_token === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Token:</span>\n                <div className=\"form-field _iconed\">\n                  <input disabled={!editing} type={inputTypes.twilio_token} readOnly={inputTypes.twilio_token !== 'text'} defaultValue={newAccountData.twilio_token} onChange={({target: {value}}) => setNewAccountData({...newAccountData, twilio_token: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_token: inputTypes.twilio_token === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Permission:</span>\n                <Select disabled={!editing} options={editions.permissions.map((permission) => ({\n                  span: permission,\n                  value: permission\n                }))} selectedOption={newAccountData.permission as string} onChange={(value: string) => setNewAccountData({...newAccountData, permission: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Slack Url:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={accountData.account.slack_url} onChange={({target: {value}}) => setNewAccountData({...newAccountData, slack_url: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Time Zone:</span>\n                <Select disabled={!editing} options={editions.time_zone.map((time_zone) => ({\n                  span: time_zone,\n                  value: time_zone\n                }))} selectedOption={newAccountData.time_zone as string} onChange={(value: string) => setNewAccountData({...newAccountData, time_zone: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Slack:</span>\n                <Switcher disabled={!editing} checked={newAccountData.slack_active} onChange={(value) => setNewAccountData({...newAccountData, slack_active: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Mailing Address</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Street:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={accountData.account.mailing_street} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_street: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Unit/Apt:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={accountData.account.mailing_unit} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_unit: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>City:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={accountData.account.mailing_city} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_city: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>State:</span>\n                <Select disabled={!editing} options={editions.state.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newAccountData.mailing_state as string} onChange={(value: string) => setNewAccountData({...newAccountData, mailing_state: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Zip:</span>\n                <input type=\"text\" disabled={!editing} defaultValue={accountData.account.mailing_zip} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_zip: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Billing Address</div>\n\n            {editing ? (\n              <div className=\"legend-action-wrapper\">\n                <label>Same as Mailing Address:</label>\n\n                <div className=\"input-wrapper\">\n                  <Checkbox contents='' value={newAccountData.same_address} onChange={(value) => setNewAccountData({...newAccountData, same_address: value})} />\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {!editing || !newAccountData.same_address ? (\n            <div className=\"fields\">\n\n              <div className=\"__left\">\n                <div className=\"field\">\n                  <span>Street:</span>\n                  <input type=\"text\" disabled={!editing} defaultValue={accountData.account.billing_street} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_street: value})} />\n                </div>\n\n                <div className=\"field\">\n                  <span>Unit/Apt:</span>\n                  <input type=\"text\" disabled={!editing} defaultValue={accountData.account.billing_unit} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_unit: value})} />\n                </div>\n\n                <div className=\"field\">\n                  <span>City:</span>\n                  <input type=\"text\" disabled={!editing} defaultValue={accountData.account.billing_city} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_city: value})} />\n                </div>\n              </div>\n\n              <div className=\"__right\">\n                <div className=\"field\">\n                  <span>State:</span>\n                  <Select disabled={!editing} options={editions.state.map((option) => ({\n                    span: option,\n                    value: option\n                  }))} selectedOption={newAccountData.billing_state as string} onChange={(value: string) => setNewAccountData({...newAccountData, billing_state: value})}/>\n                </div>\n\n                <div className=\"field\">\n                  <span>Zip:</span>\n                  <input type=\"text\" disabled={!editing} defaultValue={accountData.account.billing_zip} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_zip: value})} />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={newAccountData.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={newAccountData.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={newAccountData.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={newAccountData.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Account</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {avatarPopup ? (\n          <div className=\"popup imageCrop\" onClick={() => setAvatarPopup(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n              \n              <div>\n                <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} id=\"file-uploader\" />\n                <button className=\"_wa _iconed _bordered _blue\" onClick={() => document.getElementById('file-uploader')?.click()}>\n                  <Icon icon=\"account-33\" />\n                  <span>Upload a File</span>\n                </button>\n              </div>\n\n              <div>\n                {avatarImageSrc && (\n                  <ReactCrop\n                    src={avatarImageSrc}\n                    crop={avatarCrop}\n                    onChange={(value) => setAvatarCrop(value)}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item delete popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete Account\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the account it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default AccountsPage_Item\n","/Users/nicole/rrrr/crm/src/pages/Accounts/New.tsx",["627","628","629","630"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport {httpClient, nError} from \"../../funcs\"\nimport Account from \"../../models/Account\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport Datetime from 'react-datetime'\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport moment from \"moment\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport { useRoute } from \"react-router5\"\nimport Switcher from \"../../components/Switcher\"\nimport ReactCrop, { Crop } from \"react-image-crop\"\nimport AccountCustom from \"../../models/AccountCustom\"\nimport ReactInputMask from \"react-input-mask\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst AccountsPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [avatarPopup, setAvatarPopup] = useState(false)\n  const [avatarImageSrc, setAvatarImageSrc] = useState('')\n  const [avatarCrop, setAvatarCrop] = useState<Partial<Crop>>({\n    unit: '%',\n    width: 30,\n    aspect: 1\n  })\n\n  const [inputTypes, setInputTypes] = useState({\n\n    twilio_account_sid: 'password' as 'text' | 'password',\n    twilio_call_token: 'password' as 'text' | 'password',\n    twilio_token: 'password' as 'text' | 'password',\n  })\n\n  const [editions, setEditions] = useState<{\n    time_zone: string[],\n    source: string[],\n    status: string[],\n    owners: {\n      user: string,\n      user_id: string\n    }[],\n    permissions: string[],\n    state: string[]\n  } | null>(null)\n\n  const [newAccountData, setNewAccountData] = useState<Partial<AccountCustom>>({\n    \n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: accountsData } = await httpClient.get('/accounts')\n\n      setEditions(accountsData.edit)\n      setNewAccountData({\n        name: '',\n        owner: '',\n        phone: '',\n        status: '',\n        email: '',\n        source: '',\n        users: '',\n        phone_numbers: '',\n        twilio_account_sid: '',\n        twilio_call_token: '',\n        twilio_token: '',\n        slack_url: '',\n        slack_active: true,\n        mailing_street: '',\n        mailing_unit: '',\n        mailing_city: '',\n        mailing_zip: '',\n        mailing_state: accountsData.edit.state[0],\n        billing_street: '',\n        billing_unit: '',\n        billing_city: '',\n        billing_zip: '',\n        billing_state: accountsData.edit.state[0],\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load account data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // On select file function\n  function onSelectFile(e: any) {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        setAvatarImageSrc(reader.result as string)\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newAccountData\n  ])\n  \n  // Render function\n  return (<>\n    {editions ? (\n      <div className=\"AccountsPage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New account</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" defaultValue={newAccountData.name} onChange={({target: {value}}) => setNewAccountData({...newAccountData, name: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Owner:</span>\n                <Select options={editions.owners.map((owner) => ({\n                  span: owner.user,\n                  value: owner.user_id\n                }))} selectedOption={newAccountData.owner as string} onChange={(value: string) => setNewAccountData({...newAccountData, owner: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Phone:</span>\n                <ReactInputMask type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newAccountData.phone} onChange={({target: {value}}) => setNewAccountData({...newAccountData, phone: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\" style={{zIndex: 5}}>\n                <span>Status:</span>\n                <Select options={editions.status.map((status) => ({\n                  span: status,\n                  value: status\n                }))} selectedOption={newAccountData.status as string} onChange={(value: string) => setNewAccountData({...newAccountData, status: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Email:</span>\n                <input type=\"text\" defaultValue={newAccountData.email} />\n              </div>\n\n              <div className=\"field\">\n                <span>Source:</span>\n                <Select options={editions.source.map((source) => ({\n                  span: source,\n                  value: source\n                }))} selectedOption={newAccountData.source as string} onChange={(value: string) => setNewAccountData({...newAccountData, source: value})}/>\n              </div>\n            </div>\n\n            <div className=\"avatar-editing\">\n              <button className=\"_zeroed _iconed\" onClick={() => setAvatarPopup(true)}>\n                <Icon icon=\"user-20\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Twilio</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Account SID:</span>\n                <div className=\"form-field _iconed\">\n                  <input type={inputTypes.twilio_account_sid} readOnly={inputTypes.twilio_account_sid !== 'text'} defaultValue={newAccountData.twilio_account_sid} onChange={({target: {value}}) => setNewAccountData({...newAccountData, twilio_account_sid: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_account_sid: inputTypes.twilio_account_sid === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"field\">\n                <span>Call Token:</span>\n                <div className=\"form-field _iconed\">\n                  <input type={inputTypes.twilio_call_token} readOnly={inputTypes.twilio_call_token !== 'text'} defaultValue={newAccountData.twilio_call_token} onChange={({target: {value}}) => setNewAccountData({...newAccountData, twilio_call_token: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_call_token: inputTypes.twilio_call_token === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Token:</span>\n                <div className=\"form-field _iconed\">\n                  <input type={inputTypes.twilio_token} readOnly={inputTypes.twilio_token !== 'text'} defaultValue={newAccountData.twilio_token} onChange={({target: {value}}) => setNewAccountData({...newAccountData, twilio_token: value})} />\n                  <button className=\"_zeroed _iconed\" onClick={() => setInputTypes({...inputTypes, twilio_token: inputTypes.twilio_token === 'text' ? 'password' : 'text'})}>\n                    <Icon icon=\"eye-4\"/>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Permission:</span>\n                <Select options={editions.permissions.map((permission) => ({\n                  span: permission,\n                  value: permission\n                }))} selectedOption={newAccountData.permission as string} onChange={(value: string) => setNewAccountData({...newAccountData, permission: value})}/>\n              </div>\n              \n              <div className=\"field\">\n                <span>Slack Url:</span>\n                <input type=\"text\" defaultValue={newAccountData.slack_url} onChange={({target: {value}}) => setNewAccountData({...newAccountData, slack_url: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Time Zone:</span>\n                <Select options={editions.time_zone.map((time_zone) => ({\n                  span: time_zone,\n                  value: time_zone\n                }))} selectedOption={newAccountData.time_zone as string} onChange={(value: string) => setNewAccountData({...newAccountData, time_zone: value})}/>\n              </div>\n              \n              <div className=\"field\">\n                <span>Slack:</span>\n                <Switcher checked={newAccountData.slack_active} onChange={(value) => setNewAccountData({...newAccountData, slack_active: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Mailing Address</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Street:</span>\n                <input type=\"text\" defaultValue={newAccountData.mailing_street} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_street: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Unit/Apt:</span>\n                <input type=\"text\" defaultValue={newAccountData.mailing_unit} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_unit: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>City:</span>\n                <input type=\"text\" defaultValue={newAccountData.mailing_city} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_city: value})} />\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field\">\n                <span>State:</span>\n                <Select options={editions.state.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newAccountData.mailing_state as string} onChange={(value: string) => setNewAccountData({...newAccountData, mailing_state: value})}/>\n              </div>\n\n              <div className=\"field\">\n                <span>Zip:</span>\n                <input type=\"text\" defaultValue={newAccountData.mailing_zip} onChange={({target: {value}}) => setNewAccountData({...newAccountData, mailing_zip: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Billing Address</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Same as Mailing Address:</label>\n\n              <div className=\"input-wrapper\">\n                <Checkbox contents='' value={newAccountData.same_address} onChange={(value) => setNewAccountData({...newAccountData, same_address: value})} />\n              </div>\n            </div>\n          </div>\n\n          {!newAccountData.same_address ? (\n            <div className=\"fields\">\n\n              <div className=\"__left\">\n                <div className=\"field\">\n                  <span>Street:</span>\n                  <input type=\"text\" defaultValue={newAccountData.billing_street} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_street: value})} />\n                </div>\n\n                <div className=\"field\">\n                  <span>Unit/Apt:</span>\n                  <input type=\"text\" defaultValue={newAccountData.billing_unit} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_unit: value})} />\n                </div>\n\n                <div className=\"field\">\n                  <span>City:</span>\n                  <input type=\"text\" defaultValue={newAccountData.billing_city} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_city: value})} />\n                </div>\n              </div>\n\n              <div className=\"__right\">\n                <div className=\"field\">\n                  <span>State:</span>\n                  <Select options={editions.state.map((option) => ({\n                    span: option,\n                    value: option\n                  }))} selectedOption={newAccountData.billing_state as string} onChange={(value: string) => setNewAccountData({...newAccountData, billing_state: value})}/>\n                </div>\n\n                <div className=\"field\">\n                  <span>Zip:</span>\n                  <input type=\"text\" defaultValue={newAccountData.billing_zip} onChange={({target: {value}}) => setNewAccountData({...newAccountData, billing_zip: value})} />\n                </div>\n              </div>\n            </div>\n          ) : null}\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('accounts', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n\n        {avatarPopup ? (\n          <div className=\"popup imageCrop\" onClick={() => setAvatarPopup(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n              \n              <div>\n                <input type=\"file\" accept=\"image/*\" onChange={onSelectFile} id=\"file-uploader\" />\n                <button className=\"_wa _iconed _bordered _blue\" onClick={() => document.getElementById('file-uploader')?.click()}>\n                  <Icon icon=\"account-33\" />\n                  <span>Upload a File</span>\n                </button>\n              </div>\n\n              <div>\n                {avatarImageSrc && (\n                  <ReactCrop\n                    src={avatarImageSrc}\n                    crop={avatarCrop}\n                    onChange={(value) => setAvatarCrop(value)}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default AccountsPage_New\n","/Users/nicole/rrrr/crm/src/pages/ServiceResources/List.tsx",["631","632","633","634","635"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BaseLink, useRoute } from \"react-router5\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport { httpClient, nError } from \"../../funcs/base\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport ServiceResource from \"../../models/ServiceResource\"\nimport qs from \"qs\";\nimport {getActiveAccount} from \"../../funcs\";\nimport Account from \"../../models/Account\";\nimport dashboard from \"../Dashboard\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ntype FilterWord = 'area' | 'time_zone' | 'active'\n\ninterface ServiceResourcesReport {\n\n  interface: {\n\n    filter_words: {\n\n      area: string[],\n      time_zone: string[],\n      active: string[],\n    },\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  permissions: {\n    show_service_resource: boolean,\n    add_service_resource: boolean\n  },\n\n  service_resources: ServiceResource[]\n}\n\nconst ServiceResourcesPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<ServiceResourcesReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    filter_words: {\n\n      area: [] as string[],\n      time_zone: [] as string[],\n      active: [] as string[],\n    },\n\n    sort: {\n      field: 'nickname',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'nickname'\n    },{\n      span: 'User',\n      value: 'user'\n    },{\n      span: 'Area',\n      value: 'area'\n    },{\n      span: 'Time Zone',\n      value: 'time_zone'\n    },{\n      span: 'Active',\n      value: 'active'\n    }]\n\n  })\n\n  // Load serviceResources function\n  async function loadServiceResources() {\n\n    httpClient.defaults.headers['Authorization'] = `Bearer ${props.store.accessToken}`\n    \n    let activeFilters: any = {...localInterface.filter_words}\n    Object.keys(localInterface.filter_words).forEach((key: any) => !activeFilters[key].length && delete activeFilters[key])\n\n    try {\n      const { data: dipsatchersReport } = (await httpClient.post('/serviceresources/report', qs.stringify({\n        account_id: activeAccount.account_id,\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        filter_field: JSON.stringify(activeFilters),\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: ServiceResourcesReport}\n\n      setReportData(dipsatchersReport)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load clients on page mount\n  useEffect(() => { loadServiceResources() }, [\n    $updater,\n    localInterface.page,\n  ])\n\n  // Is filter selected function\n  function isFilterSelected(field: FilterWord, value: string) {\n    return localInterface.filter_words[field].includes(value)\n  }\n\n  function isAllFiltersSelected(field: FilterWord) {\n    return localInterface.filter_words[field].length === 0\n  }\n\n  function switchFilter(field: FilterWord, value: string, toggle: boolean) {\n\n    let _arr = [...localInterface.filter_words[field]]\n\n    if (toggle && value === \"All\") { _arr = [] }\n    \n    else if (!toggle) {\n\n      while (true) {\n        let i = _arr.findIndex((filter) => filter === value)\n        if(i === -1) break\n        _arr.splice(i, 1)\n      }\n    }\n      \n    else {\n\n      if (reportData?.interface.filter_words[field].every((option) => _arr.concat([value]).includes(option)))\n        _arr = []\n\n      else if(_arr.findIndex((filter) => filter === value) === -1)\n        _arr.push(value)\n    }\n\n    setLocalInterface({...localInterface, filter_words: {...localInterface.filter_words, [field]: _arr}})\n  }\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"CallCenter_ServiceResourcesPage_List\" >\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => $setUpdater(Math.random())}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n          \n          onMaxRowsChange={() => {\n            $setUpdater(Math.random())\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n\n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('service_resources.new', {}, {reload: true})}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Service Resource</span>\n                <Icon icon=\"construction-3\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'nickname' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'nickname', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>User</span>)}\n\n                sortDirection={localInterface.sort.field === 'user' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'user', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Area</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"area\")}\n                onAllFiltersChange={(value) => switchFilter(\"area\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.area.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"area\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"area\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'area' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'area', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Time Zone</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"time_zone\")}\n                onAllFiltersChange={(value) => switchFilter(\"time_zone\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.time_zone.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"time_zone\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"time_zone\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'time_zone' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'time_zone', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Active</span>)}\n\n                allFiltersSelected={isAllFiltersSelected(\"active\")}\n                onAllFiltersChange={(value) => switchFilter(\"active\", \"All\", value)}\n\n                filterWords={reportData.interface.filter_words.active.map((filterWord) => ({\n                  word: filterWord,\n                  selected: isFilterSelected(\"active\", filterWord)\n                }))}\n                onFilterChange={(value) => switchFilter(\"active\", value.word, value.selected)}\n\n                sortDirection={localInterface.sort.field === 'active' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'active', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.service_resources.map((serviceResource, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('service_resources.item', {\n                serviceResourceId: serviceResource.service_resource_id\n              }, {reload: true})}>\n                <td>{serviceResource.nickname}</td>\n                <td>{serviceResource.user}</td>\n                <td>{serviceResource.area}</td>\n                <td>{serviceResource.time_zone}</td>\n                <td className={classNames({\n                  'red-text': serviceResource.active === 'Inactive',\n                  'green-text': serviceResource.active === 'Active',\n                  'blue-text': serviceResource.active === 'Pending',\n                })}>{serviceResource.active}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium screen table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr></tr>\n            {reportData.service_resources.map((serviceResource, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('service_resources.item', {\n                serviceResourceId: serviceResource.service_resource_id\n              }, {reload: true})}>\n                <td>\n                  <div>{serviceResource.nickname}</div>\n                  <div>{serviceResource.user}</div>\n                </td>\n                <td>\n                  <div>{serviceResource.area}</div>\n                  <div>{serviceResource.time_zone}</div>\n                </td>\n                <td>\n                  <div className={classNames({\n                    'red-text': serviceResource.active === 'Inactive',\n                    'green-text': serviceResource.active === 'Active',\n                    'blue-text': serviceResource.active === 'Pending',\n                  })}>{serviceResource.active}</div>\n                  <div>&nbsp;</div>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.service_resources.map((serviceResource, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('service_resources.item', {\n                serviceResourceId: serviceResource.service_resource_id\n              }, {reload: true})}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{serviceResource.nickname}</b></div>\n                    <div>\n                      {serviceResource.user}\n                    </div>\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div className={classNames({\n                      'red-text': serviceResource.active === 'Inactive',\n                      'green-text': serviceResource.active === 'Active',\n                      'blue-text': serviceResource.active === 'Pending',\n                    })}>\n                      {serviceResource.active}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n\n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{serviceResource.area}</b>\n                    </div>\n                    <div>\n                      <b>{serviceResource.time_zone}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => $setUpdater(Math.random())}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default ServiceResourcesPage_List\n","/Users/nicole/rrrr/crm/src/pages/ServiceResources/New.tsx",["636"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { nError } from \"../../funcs/base\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport Select from \"../../components/Select\"\nimport { useRoute } from \"react-router5\"\nimport Switcher from \"../../components/Switcher\"\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport Checkbox from \"../../components/Checkbox\"\nimport ReactInputMask from \"react-input-mask\"\nimport ServiceResource from \"../../models/ServiceResource\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst ServiceResourcesPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [edit, setEdit] = useState<{\n\n    users: {\n      user_id: string,\n      user: string\n    }[],\n    time_zone: string[],\n    area: string[]\n  } | null>(null)\n\n  const [newServiceResourceData, setNewServiceResourceData] = useState<Partial<ServiceResource> | null>(null)\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: serviceResourcesData } = (await axios.get('/json/service_resources.json'))\n\n      setEdit(serviceResourcesData.edit)\n\n      setNewServiceResourceData({\n        ...newServiceResourceData,\n\n        nickname: '',\n        active: true,\n\n        user: '',\n        time_zone: '',\n        area: '',\n\n        phone: '',\n        slack_channel: '',\n        slack_member_id: '',\n\n        is_phone: false,\n        is_slack: false,\n      })\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load serviceResource data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Watch changes\n  useEffect(() => {\n    setReadyToSave(true)\n  }, [\n    newServiceResourceData\n  ])\n  \n  // Render function\n  return (<>\n    {newServiceResourceData && edit ? (\n      <div className=\"ServiceResourcesPage_New entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Service Resource</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>NickName:</span>\n                \n                <input type=\"text\" defaultValue={newServiceResourceData.nickname} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, nickname: value})} />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Active:</span>\n                \n                <Switcher checked={newServiceResourceData.active as boolean} onChange={(value) => setNewServiceResourceData({...newServiceResourceData, active: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\" style={{zIndex: 6}}>\n                <span>User:</span>\n\n                <Select options={edit.users.map((user) => ({\n                  span: user.user,\n                  value: user.user_id\n                }))} selectedOption={newServiceResourceData.area as string} onChange={(value: string) => setNewServiceResourceData({...newServiceResourceData, area: value})}/>\n              </div>\n\n              <div className=\"field\" style={{zIndex: 5}}>\n                <span>Area:</span>\n                <Select options={edit.area.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newServiceResourceData.area as string} onChange={(value: string) => setNewServiceResourceData({...newServiceResourceData, area: value})}/>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Time Zone:</span>\n                <Select options={edit.time_zone.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newServiceResourceData.time_zone as string} onChange={(value: string) => setNewServiceResourceData({...newServiceResourceData, time_zone: value})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Notifications</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Phone:</span>\n                <ReactInputMask type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newServiceResourceData.phone} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, phone: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Slack Channel:</span>\n\n                <input type=\"text\" defaultValue={newServiceResourceData.slack_channel} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, slack_channel: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Slack Member ID:</span>\n\n                <input type=\"text\" defaultValue={newServiceResourceData.slack_member_id} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, slack_member_id: value})} />\n              </div>\n\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Phone:</span>\n\n                <Checkbox contents='' value={newServiceResourceData.is_phone} onChange={(value) => setNewServiceResourceData({...newServiceResourceData, is_phone: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Is Slack:</span>\n\n                <Checkbox contents='' value={newServiceResourceData.is_slack} onChange={(value) => setNewServiceResourceData({...newServiceResourceData, is_slack: value})} />\n              </div>\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('service_resources', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default ServiceResourcesPage_New\n","/Users/nicole/rrrr/crm/src/pages/ServiceResources/Item.tsx",["637","638","639","640"],"import axios from \"axios\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../components/Icon\"\nimport { nError } from \"../../funcs/base\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/entity-edit.sass\"\nimport Select from \"../../components/Select\"\nimport Checkbox from \"../../components/Checkbox\"\nimport Switcher from \"../../components/Switcher\"\nimport classNames from \"classnames\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport ReactInputMask from \"react-input-mask\"\nimport ServiceResource from \"../../models/ServiceResource\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface ServiceResourceData {\n  \n  permissions: {\n    \n    edit_service_resource: boolean,\n  },\n\n  service_resource: ServiceResource,\n\n  edit: {\n    time_zone: string[],\n    area: string[]\n  }\n}\n\nconst ServiceResourcesPage_Item = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const [editing, setEditing] = useState(false)\n\n  const [deleting, setDeleting] = useState(false)\n  const [readyToDelete, setReadyToDelete] = useState(false)\n  \n  const [serviceResourceData, setServiceResourceData] = useState<ServiceResourceData | null>(null)\n\n  const [newServiceResourceData, setNewServiceResourceData] = useState<Partial<ServiceResource>>({\n    \n  })\n\n\n  //ctrl + shift + Z\n\n\n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: serviceResourceData } = (await axios.get('/json/service_resource.json')) as {data: ServiceResourceData}\n\n      setServiceResourceData(serviceResourceData)\n\n      setNewServiceResourceData(serviceResourceData.service_resource)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load service_resource data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  useEffect(() => setReadyToSave(true), [\n    newServiceResourceData\n  ])\n  \n  // Render function\n  return (<>\n    {serviceResourceData && newServiceResourceData.active ? (\n      <div className=\"ServiceResourcesPage_Item entity-edit\">\n\n        <div className=\"wrapper flex-container sb\">\n          <div className=\"flex-container _gap-narrow\">\n            <h1>Service Resource:</h1>\n\n            <div className=\"item-name\">\n              {newServiceResourceData.nickname}\n            </div>\n          </div>\n\n          {serviceResourceData?.permissions.edit_service_resource && !editing ? (\n            <button className=\"_wa _green\" onClick={() => setEditing(true)}>\n              Edit\n            </button>\n          ) : null}\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>NickName:</span>\n                \n                <input disabled={!editing} type=\"text\" defaultValue={serviceResourceData.service_resource.nickname} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, nickname: value})} />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Active:</span>\n                \n                <Switcher disabled={!editing} checked={newServiceResourceData.active as boolean} onChange={(value) => setNewServiceResourceData({...newServiceResourceData, active: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Settings</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>User:</span>\n\n                <input disabled={true} type=\"text\" defaultValue={serviceResourceData.service_resource.user} />\n              </div>\n\n              <div className=\"field\" style={{zIndex: 5}}>\n                <span>Area:</span>\n                <Select disabled={!editing} options={serviceResourceData.edit.area.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newServiceResourceData.area as string} onChange={(value: string) => setNewServiceResourceData({...newServiceResourceData, area: value})}/>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Time Zone:</span>\n                <Select disabled={!editing} options={serviceResourceData.edit.time_zone.map((option) => ({\n                  span: option,\n                  value: option\n                }))} selectedOption={newServiceResourceData.time_zone as string} onChange={(value: string) => setNewServiceResourceData({...newServiceResourceData, time_zone: value})}/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Notifications</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n\n              <div className=\"field\">\n                <span>Phone:</span>\n                <ReactInputMask disabled={!editing} type=\"text\" mask=\"+1 (999) 999-9999\" defaultValue={newServiceResourceData.phone} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, phone: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Slack Channel:</span>\n\n                <input disabled={!editing} type=\"text\" defaultValue={serviceResourceData.service_resource.slack_channel} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, slack_channel: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Slack Member ID:</span>\n\n                <input disabled={!editing} type=\"text\" defaultValue={serviceResourceData.service_resource.slack_member_id} onChange={({target: {value}}) => setNewServiceResourceData({...newServiceResourceData, slack_member_id: value})} />\n              </div>\n\n            </div>\n\n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Phone:</span>\n\n                <Checkbox disabled={!editing} contents='' value={newServiceResourceData.is_phone} onChange={(value) => setNewServiceResourceData({...newServiceResourceData, is_phone: value})} />\n              </div>\n\n              <div className=\"field\">\n                <span>Is Slack:</span>\n\n                <Checkbox disabled={!editing} contents='' value={newServiceResourceData.is_slack} onChange={(value) => setNewServiceResourceData({...newServiceResourceData, is_slack: value})} />\n              </div>\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Info</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Date Created:</span>\n                <input type=\"text\" defaultValue={serviceResourceData.service_resource.created_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Created by:</span>\n                <input type=\"text\" defaultValue={serviceResourceData.service_resource.created_by} disabled={ true } />\n              </div>\n            </div>\n\n            \n            <div className=\"__right\">\n\n              <div className=\"field\">\n                <span>Last Edited:</span>\n                <input type=\"text\" defaultValue={serviceResourceData.service_resource.last_edited_at} disabled={ true } />\n              </div>\n\n              <div className=\"field\">\n                <span>Last Edited By:</span>\n                <input type=\"text\" defaultValue={serviceResourceData.service_resource.last_edited_by} disabled={ true } />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {editing ? (\n          <div className=\"wrapper flex-container sb editing-buttons\">\n            <div>\n              <button className=\"_red\" onClick={() => setDeleting(true)}>Delete Service Resource</button>\n            </div>\n            <div className=\"buttons\">\n              <button className=\"_bordered _red\" onClick={() => setEditing(false)}>\n                Cancel\n              </button>\n              <button disabled={!readyToSave} className=\"_bordered _green\">\n                Save\n              </button>\n            </div>\n          </div>\n        ) : null}\n\n        {/* Item share popup */}\n        {deleting ? (\n          <div className=\"item-delete-popup\" onClick={() => setDeleting(false)}>\n\n            <div className=\"wrapper\" onClick={(e) => e.stopPropagation()}>\n            \n              <div className=\"title\">\n                Delete ServiceResource\n              </div>\n\n              <div className=\"checkbox-wrapper\">\n                <Checkbox contents=\"I understand that after deleting the service resource it will not be possible to recover.\" value={readyToDelete} onChange={(value) => setReadyToDelete(value)} />\n              </div>\n\n              <div className=\"buttons\">\n\n                <button className=\"_bordered _green\" onClick={() => setDeleting(false)}>\n                  Cancel\n                </button>\n\n                <button disabled={!readyToDelete} className=\"_bordered _red\">\n                  Delete\n                </button>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n    ) : null}\n  </>)\n})\nexport default ServiceResourcesPage_Item\n","/Users/nicole/rrrr/crm/src/pages/CallCenter/CallFlows/New.tsx",["641","642","643"],"import axios from \"axios\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport Icon from \"../../../components/Icon\"\nimport { nError } from \"../../../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../../store\";\n\nimport \"../../../styles/pages/common/entity-edit.sass\"\nimport Select from \"../../../components/Select\"\nimport Checkbox from \"../../../components/Checkbox\"\nimport { BaseLink, useRoute } from \"react-router5\"\nimport { CallCenter_CallFlow, CallCenter_CallGroup } from \"../../../models/CallCenter\"\nimport classNames from \"classnames\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\nconst emptyCallGroup: Partial<CallCenter_CallGroup> = {\n  call_group_id: '',\n  name: '',\n  dispatchers: '',\n  call_flows: ''\n}\n\nconst CallCenter_CallFlowsPage_New = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [readyToSave, setReadyToSave] = useState(false)\n\n  const $router = useRoute()\n\n  const [callGroupsData, setCallGroupsData] = useState<CallCenter_CallGroup[]>([])\n\n  const [callGroups, setCallGroups] = useState<CallCenter_CallGroup[] | null>(null)\n  const [availableCallGroups, setAvailableCallGroups] = useState<Partial<CallCenter_CallGroup>[]>([])\n  const [selectedCallGroup, setSelectedCallGroup] = useState<Partial<CallCenter_CallGroup>>(emptyCallGroup)\n  const [newCallFlowData, setNewCallFlowData] = useState({\n    name: '',\n    phrase_start: '',\n    phrase_office_closed: '',\n    phrase_office_temporary_closed: '',\n    phrase_phone_not_available: '',\n    phrase_dispatcher_not_available: ''\n  })\n  \n  // Load info function\n  async function loadInfo() {\n    try {\n      const { data: callFlowsData } = (await axios.get('/json/call_center_call_flows.json'))\n\n      setCallGroups(callFlowsData.edit.call_groups)\n\n      setAvailableCallGroups([emptyCallGroup].concat(callFlowsData.edit.call_groups))\n\n      setSelectedCallGroup(emptyCallGroup)\n\n      setTimeout(() => setReadyToSave(false), 100)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n  // Load callFlow data\n  useEffect(() => {\n    loadInfo()\n  }, [])\n\n  // Add callGroup function\n  function addCallGroup() {\n\n    if (!callGroupsData || !newCallFlowData) return\n\n    const newCallGroupsList = [\n      ...callGroupsData,\n      selectedCallGroup\n    ]\n\n    setCallGroupsData(newCallGroupsList as any)\n\n    let _availableCallGroups = [...availableCallGroups]\n\n    _availableCallGroups = _availableCallGroups.filter(($callGroup) => {\n      \n      return newCallGroupsList.findIndex((callGroup) => {\n        return callGroup.name === $callGroup.name\n      }) === -1\n    })\n\n    setAvailableCallGroups([\n      ..._availableCallGroups\n    ])\n\n    setSelectedCallGroup(emptyCallGroup)\n\n    setReadyToSave(true)\n  }\n\n  // Remove callGroup function\n  function removeCallGroup(i: number) {\n\n    let _callFlowCallGroups = [...callGroupsData]\n\n    let _callGroup = _callFlowCallGroups[i]\n    \n    _callFlowCallGroups.splice(i, 1)\n\n    setCallGroupsData(_callFlowCallGroups)\n\n    setAvailableCallGroups([\n      ...availableCallGroups,\n      _callGroup\n    ])\n\n    setReadyToSave(true)\n  }\n\n  useEffect(() => setReadyToSave(true), [\n    newCallFlowData\n  ])\n  \n  // Render function\n  return (<>\n    {true ? (\n      <div className=\"CallCenter_CallFlowsPage_New entity-edit\">\n\n        {/* Top navigation */}\n        <div className=\"top-nav\">\n          <BaseLink router={$router.router} routeName=\"call_center.phoneNumbers\" className={classNames({_active: $router.route.name === \"call_center.phoneNumbers\"})}>\n            <Icon icon=\"phone-1\" />\n            <span>Phone Numbers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.dispatchers\" className={classNames({_active: $router.route.name === \"call_center.dispatchers\"})}>\n            <Icon icon=\"user-1\" />\n            <span>Dispatchers</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.groups\" className={classNames({_active: $router.route.name === \"call_center.groups\"})}>\n            <Icon icon=\"user-29\" />\n            <span>Groups</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.callFlows\" className={classNames({_active: $router.route.name === \"call_center.callFlows\"})}>\n            <Icon icon=\"share-7\" />\n            <span>Call Flows</span>\n          </BaseLink>\n\n          <BaseLink router={$router.router} routeName=\"call_center.settings\" className={classNames({_active: $router.route.name === \"call_center.settings\"})}>\n            <Icon icon=\"gear-1\" />\n            <span>Settings</span>\n          </BaseLink>\n        </div>\n\n        <div className=\"wrapper flex-container sb\">\n          <h1>New Call Flow</h1>\n        </div>\n        \n        <div className=\"fieldset\">\n          \n          <div className=\"legend\">Main</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field\">\n                <span>Name:</span>\n                <input type=\"text\" onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, name: value})} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"flex-container sb wrap\">\n            <div className=\"legend\">Call Groups</div>\n\n            <div className=\"legend-action-wrapper\">\n              <label>Call Group:</label>\n              <div className=\"input-wrapper\">\n                <Select options={availableCallGroups.map((callGroup) => ({\n                  span: callGroup.name as string,\n                  value: callGroup.name as string\n                }))} selectedOption={selectedCallGroup.name as string} onChange={(value) => setSelectedCallGroup(availableCallGroups.find((_callGroup) => _callGroup.name === value) as CallCenter_CallGroup)}/>\n                <button disabled={!selectedCallGroup.name} className=\"_green\" onClick={() => addCallGroup()}>\n                  Add\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <table className={classNames('table', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Dispatchers</th>\n              <th>Call Flow</th>\n              <th></th>\n            </tr>\n            {(callGroupsData as CallCenter_CallGroup[]).map((callGroup, i) => (\n              <tr key={i}>\n                <td>{callGroup.name}</td>\n                <td>{callGroup.dispatchers}</td>\n                <td>{callGroup.call_flows}</td>\n                <td>\n                  <button className=\"_zeroed _iconed _red\" onClick={(e) => { e.stopPropagation(); removeCallGroup(i) }}>\n                    <Icon icon=\"x-mark-1\" />\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </table>\n\n          <div className={classNames('mobile-table', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            <div className=\"mobile-table-items\">\n\n              {callGroupsData.map((callGroup, i: number) => (\n              <div className=\"item\" key={i}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{callGroup.name}</b></div>\n                    <div>\n                      {callGroup.dispatchers}\n                    </div>\n                  </div>\n\n                  <div className=\"__right\">\n                    \n                  </div>\n                </div>\n\n                <div className=\"__bottom\">\n\n                  <div className=\"__left\">\n                    \n                  </div>\n\n                  <div className=\"__right small\">\n                    <div>\n                      <b>{callGroup.call_flows}</b>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"fieldset\">\n\n          <div className=\"legend\">Call Phrases</div>\n\n          <div className=\"fields\">\n\n            <div className=\"__left\">\n              <div className=\"field _ait\">\n                <span>Start Phrase:</span>\n                <textarea defaultValue={newCallFlowData.phrase_start} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_start: value})}></textarea>\n              </div>\n\n              <div className=\"field _ait\">\n                <span>Office Closed:</span>\n                <textarea defaultValue={newCallFlowData.phrase_office_closed} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_office_closed: value})}></textarea>\n              </div>\n\n              <div className=\"field _ait\">\n                <span>Office Temporary Closed:</span>\n                <textarea defaultValue={newCallFlowData.phrase_office_temporary_closed} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_office_temporary_closed: value})}></textarea>\n              </div>\n            </div>\n\n            <div className=\"__right\">\n              <div className=\"field _ait\">\n                <span>Phone Number Not Available:</span>\n                <textarea defaultValue={newCallFlowData.phrase_phone_not_available} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_phone_not_available: value})}></textarea>\n              </div>\n\n              <div className=\"field _ait\">\n                <span>Dispatchers Not Available:</span>\n                <textarea defaultValue={newCallFlowData.phrase_dispatcher_not_available} onChange={({target: {value}}) => setNewCallFlowData({...newCallFlowData, phrase_dispatcher_not_available: value})}></textarea>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"wrapper flex-container sb editing-buttons\">\n          <div />\n          <div className=\"buttons\">\n            <button className=\"_bordered _red\" onClick={() => $router.router.navigate('call_center.callFlows', {}, {\n              reload: true\n            })}>\n              Cancel\n            </button>\n            <button disabled={!readyToSave} className=\"_bordered _green\">\n              Save\n            </button>\n          </div>\n        </div>\n      </div>\n    ) : null}\n  </>)\n})\nexport default CallCenter_CallFlowsPage_New\n","/Users/nicole/rrrr/crm/src/pages/AccountPermissions/List.tsx",["644","645","646"],"import axios from \"axios\"\nimport classNames from \"classnames\"\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useRoute } from \"react-router5\"\nimport Icon from \"../../components/Icon\"\nimport ReportFilters from \"../../components/reports/Filters\"\nimport ReportTableControls from \"../../components/reports/TableControls\"\nimport ReportTableField from \"../../components/reports/TableField\"\nimport {getActiveAccount, httpClient, nError} from \"../../funcs\"\nimport AccountPermission from \"../../models/AccountPermission\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\n\nimport \"../../styles/pages/common/report-list.sass\"\nimport Account from \"../../models/Account\";\nimport qs from \"qs\";\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch\n}\n\ninterface AccountPermissionsReport {\n\n  interface: {\n\n    max_pages: number,\n    rows_start: number,\n    rows_end: number,\n    rows_all: number,\n  },\n\n  accountPermissions: {\n    show_account_permission: boolean,\n    add_account_permission: boolean\n  },\n\n  permissions_rows: AccountPermission[],\n\n  edit: {\n    actions: string[]\n  }\n}\n\nconst AccountPermissionsPage_List = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const $router = useRoute()\n\n  const activeAccount = getActiveAccount(props.store) as Account;\n  const [$updater, $setUpdater] = useState<any>(Math.random())\n\n  const [reportData, setReportData] = useState<AccountPermissionsReport | null>(null)\n  const [localInterface, setLocalInterface] = useState({\n\n    search: '',\n\n    page: 1,\n\n    sort: {\n      field: 'name',\n      direction: 'up' as 'up' | 'down'\n    },\n    sortFields: [{\n      span: 'Name',\n      value: 'name'\n    },{\n      span: 'Users',\n      value: 'users'\n    }]\n\n  })\n\n  // Load accountPermissions function\n  async function loadAccountPermissions() {\n\n    try {\n      const { data: accountPermissions } = (await httpClient.post('/permissions/accounts/report', qs.stringify({\n\n        limit_rows: props.store.reportsMaxRows,\n        page: localInterface.page,\n        sort_field: localInterface.sort.field,\n        sort_type: localInterface.sort.direction === 'up' ? 'asc' : 'desc',\n        ...(localInterface.search ? {search: localInterface.search} : {})\n      }))) as {data: AccountPermissionsReport}\n\n      setReportData(accountPermissions)\n    }\n    catch (error) {\n      nError(error)\n    }\n  }\n\n\n  // Load accountPermissions on page mount\n  useEffect(() => { loadAccountPermissions() }, [\n    $updater,\n    localInterface.page\n  ])\n\n  // Render function\n  return (<>\n    {reportData ? (\n      <div className=\"AccountPermissionsPage_List\" >\n\n        { /* Page header */}\n        <div className=\"page-header\">\n          <h1>Account`s Permissions</h1>\n        </div>\n\n        { /* List filters */}\n        <ReportFilters\n          onSearchInputChange={(value) => setLocalInterface({...localInterface, search: value})}\n\n          onUpdate={() => {\n            $setUpdater(Math.random());\n          }}\n        />\n\n        {/* Table controls */}\n        <ReportTableControls\n          zIndex={5}\n\n          onMaxRowsChange={() => {\n            $setUpdater(Math.random());\n\n          }}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({ ...localInterface, sort: { ...localInterface.sort, direction: value } })}\n          onSortFire={() => 0}\n        \n          addButton={(\n            <div className=\"add-button-wrapper\">\n              <button className=\"_iconed _rounded add-button\" onClick={() => $router.router.navigate('accounts_permissions.new')}>\n                <Icon icon=\"plus-thin\" />\n                <span>Add Account`s Permission</span>\n                <Icon icon=\"shield-28\" />\n              </button>\n            </div>\n          )}\n        />\n\n        <div className=\"contents\">\n\n          {/* Wide desktop table */}\n          <table className={classNames('table', '__show-on-wide', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <ReportTableField\n                contents={(<span>Name</span>)}\n\n                sortDirection={localInterface.sort.field === 'name' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'name', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n              <ReportTableField\n                contents={(<span>Accounts</span>)}\n\n                sortDirection={localInterface.sort.field === 'accounts' ? localInterface.sort.direction : undefined}\n                onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {field: 'accounts', direction: value}})}\n\n                onFilterFire={() => $setUpdater(Math.random())}\n              />\n            </tr>\n            {reportData.permissions_rows.map((accountPermission, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('accounts_permissions.item', {\n                permissionId: accountPermission.account_permission_id\n              }, {\n                reload: true\n              })}>\n                <td>{accountPermission.name}</td>\n                <td>{accountPermission.accounts}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Medium desktop table */}\n          <table className={classNames('table', '__hide-on-wide', '__hide-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n            <tr>\n              <th>Name</th>\n              <th>Accounts</th>\n            </tr>\n            {reportData.permissions_rows.map((accountPermission, i) => (\n              <tr key={i} onClick={() => $router.router.navigate('accounts_permissions.item', {\n                permissionId: accountPermission.account_permission_id\n              }, {\n                reload: true\n              })}>\n                <td>{accountPermission.name}</td>\n                <td>{accountPermission.accounts}</td>\n              </tr>\n            ))}\n          </table>\n\n          {/* Mobile table items */}\n          <div className={classNames('mobile-table-items', '__show-on-mobile', {\n            __respectAsidePanel: props.store.navActive.is\n          })}>\n\n            {reportData.permissions_rows.map((accountPermission, i: number) => (\n              <div className=\"item\" key={i} onClick={() => $router.router.navigate('accounts_permissions.item', {\n                permissionId: accountPermission.account_permission_id\n              }, {\n                reload: true\n              })}>\n\n                <div className=\"__top\">\n\n                  <div className=\"__left\">\n                    <div><b>{accountPermission.name}</b></div>\n                    <div>\n                      {accountPermission.accounts || <span>&nbsp;</span>}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Table controls */}\n        <ReportTableControls\n          isUnder={true}\n\n          onMaxRowsChange={() => $setUpdater(Math.random())}\n\n          amount={{\n            total: reportData.interface.rows_all,\n            start: reportData.interface.rows_start,\n            end: reportData.interface.rows_end\n          }}\n\n          page={localInterface.page}\n          maxPages={reportData.interface.max_pages}\n          onPagesStart={() => setLocalInterface({...localInterface, page: 1})}\n          onPrevPage={() => setLocalInterface({...localInterface, page: localInterface.page-1})}\n          onNextPage={() => setLocalInterface({...localInterface, page: localInterface.page+1})}\n          onPagesEnd={() => setLocalInterface({...localInterface, page: reportData.interface.max_pages})}\n          \n          sort={localInterface.sort}\n          sortFields={localInterface.sortFields}\n          onSortFieldChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, field: value}})}\n          onSortDirectionChange={(value) => setLocalInterface({...localInterface, sort: {...localInterface.sort, direction: value}})}\n          onSortFire={() => 0}\n        />\n      </div>\n    ) : null}\n  </>)\n})\nexport default AccountPermissionsPage_List\n","/Users/nicole/rrrr/crm/src/funcs/base.ts",["647","648"],"import axios, { AxiosError } from \"axios\"\nimport Account from \"../models/Account\";\nimport { StoreDispatch, StoreState } from \"../store\";\nimport router from '../router'\n\nexport function getActiveAccount(store: StoreState): Account | null {\n  if(store.selectedAccount === null) return null\n  return store.accounts[store.selectedAccount]\n}\n\nexport async function signOut(dispatcher: StoreDispatch) {\n  dispatcher.setAccessToken(null)\n  dispatcher.setAccounts([])\n  dispatcher.setSelectedAccount(null)\n  dispatcher.setUser(null)\n\n  // Perform logout\n  try {await httpClient.post('/logout')} catch(e) {}\n  delete httpClient.defaults.headers['Authorization']\n\n  // Redirect to auth page\n  router.navigate('auth')\n}\n\nexport function nError(error: Error | AxiosError | unknown): {\n  error: Error | AxiosError | unknown,\n  content: {\n    code?: number,\n    errorText: string\n  }\n} {\n\n  // HTTP error (axios)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((<any>error).isAxiosError) {\n    const _error = <AxiosError>error\n    // eslint-disable-next-line no-console\n    console.warn(_error.request, _error.response)\n\n    if (!_error.response) return {\n      content: {\n        errorText: \"Can`t connect to server\"\n      },\n      error\n    }\n\n    const errorText = _error.response.data.message\n\n    return {\n      content: {\n        errorText\n      },\n      error\n    }\n  }\n\n  // Another error\n  else {\n    // eslint-disable-next-line no-console\n    console.error(error)\n  }\n\n  // Return error content\n  return {\n    content: {\n      errorText: String(error)\n    },\n    error\n  }\n}\n\nexport const httpClient = axios.create({\n  baseURL: 'http://crm56new.artemiudintsev.com/api'\n})\n\nexport function leadingZero(int: number) {\n  return (int <= 9 ? '0' : '') + int\n}\n\nexport function formatTime(seconds: number) {\n  return (\n    [\n      0,\n      Math.floor(seconds / 60),\n      Math.floor(seconds % 60),\n    ]\n      .map(x => x.toString())\n      .map(x => (x.length === 1 ? `0${x}` : x))\n      .join(\":\")\n  );\n}\n\nexport function calculatePercent(min: number, max: number) {\n  return min / max * 100\n}\n\nexport function calculateFromPercent(value: number, min: number, max: number) {\n  return max / 100 * value\n}\n","/Users/nicole/rrrr/crm/src/components/Select.tsx",[],"/Users/nicole/rrrr/crm/src/components/Checkbox.tsx",[],"/Users/nicole/rrrr/crm/src/components/Switcher.tsx",[],"/Users/nicole/rrrr/crm/src/components/reports/Filters.tsx",["649"],"import classNames from \"classnames\"\nimport { DateTime } from \"luxon\"\nimport React, { ReactChildren, ReactElement, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { DateRangePreset } from \"../../models/Misc\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../../store\";\nimport DateRangeCalendar from \"../DateRangeCalendar\"\nimport Icon from \"../Icon\"\nimport Select from \"../Select\"\n\nimport \"../../styles/components/reports/filters.sass\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch,\n\n  onSearchInputChange(value: string): void,\n\n  dateRangeType?: string,\n  onDateRangeTypeChange?(value: string): void,\n\n  dateRangePreset?: DateRangePreset,\n  onDateRangePresetChange?(value: DateRangePreset): void,\n\n  minDate?: Date,\n  onMinDateChange?(value: Date): void,\n  \n  maxDate?: Date,\n  onMaxDateChange?(value: Date): void,\n\n  updateButtonActive?: boolean,\n  onUpdate(): void,\n\n  childrenAfterSearch?: ReactElement,\n  childrenBeforeDateType?: ReactElement\n}\n\nconst ReportFilters = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [dateRangeCalendarShown, setDateRangeCalendarShown] = useState(false)\n  \n  // Render function\n  return (\n    <div className=\"ReportFilters\">\n      \n      <div className=\"flex-container\">\n\n        <div className=\"flex-container __left __hide-on-mobile\">\n          \n          { /* Search field */}\n          <div className=\"form-field __search-form\">\n            <input type=\"text\" className=\"_rounded\" onChange={({target: {value}}) => props.onSearchInputChange(value)} />\n            <button className=\"_wa _white _iconed _rounded\" onClick={() => props.onUpdate()}>\n              <Icon icon=\"magnifier-5\" />\n            </button>\n          </div>\n\n          {props.childrenAfterSearch}\n        </div>\n\n        <div className=\"flex-container __right\">\n\n          {props.childrenBeforeDateType}\n\n          { /* Date range type selection */}\n          {(\n            true\n            && props.dateRangeType\n            && props.onDateRangeTypeChange\n          ) ? (\n            <div>\n              <Select zeroed={true} options={[{\n                span: \"Schedule date\",\n                value: \"schedule\"\n              }, {\n                span: \"Created date\",\n                value: \"created\"\n              }]} selectedOption={props.dateRangeType} onChange={(value: string) => {\n                (props.onDateRangeTypeChange as any)(value)\n              }} />\n            </div>\n          ) : null}\n\n          { /* Date range type selection */}\n          {(true\n            && props.dateRangePreset\n            && props.onDateRangePresetChange\n          ) ? (\n            <div>\n              <Select zeroed={true} options={[{\n                span: \"Custom\",\n                value: \"custom\"\n              }, {\n                span: \"Tomorrow & Next\",\n                value: \"tomorrow_and_next\"\n              }, {\n                span: \"Tomorrow\",\n                value: \"tomorrow\"\n              }, {\n                span: \"Today\",\n                value: \"today\"\n              }, {\n                span: \"Yesterday\",\n                value: \"yesterday\"\n              }, {\n                span: \"This week (Sun - today)\",\n                value: \"this_week_sun_today\"\n              }, {\n                span: \"This week (Mon - today)\",\n                value: \"this_week_mon_today\"\n              }, {\n                span: \"Last 7 days\",\n                value: \"last_7_days\"\n              }, {\n                span: \"Last week (Sun - Sat)\",\n                value: \"last_week_sun_sat\"\n              }, {\n                span: \"Last week (Mon - Sun)\",\n                value: \"last_week_mon_sun\"\n              }, {\n                span: \"Last business week\",\n                value: \"last_business_week\"\n              }, {\n                span: \"Last 14 days\",\n                value: \"last_14_days\"\n              }, {\n                span: \"Last 30 days\",\n                value: \"last_30_days\"\n              }, {\n                span: \"This month\",\n                value: \"this_month\"\n              }, {\n                span: \"Last month\",\n                value: \"last_month\"\n              }, {\n                span: \"All\",\n                value: \"all\"\n              }]} selectedOption={props.dateRangePreset} onChange={(value: string) => {\n                (props.onDateRangePresetChange as any)(value as DateRangePreset)\n              }} />\n            </div>\n          ) : null}\n\n          { /* Date range */}\n          {(true\n            && props.minDate\n            && props.maxDate\n            && props.onMinDateChange\n            && props.onMaxDateChange\n          ) ? (\n            <div onFocus={() => setDateRangeCalendarShown(true)} onBlur={() => setDateRangeCalendarShown(false)} tabIndex={-1} className=\"form-field date-range\">\n              <div className=\"form-field _iconed\">\n                <input type=\"text\" readOnly value={DateTime.fromJSDate(props.minDate).toLocaleString(DateTime.DATE_SHORT)} />\n                <button className=\"_zeroed _iconed __noclick\">\n                  <Icon icon=\"calendar-4\" />\n                </button>\n              </div>\n              <div className=\"input-between-text\">to</div>\n              <div className=\"form-field _iconed\">\n                <input type=\"text\" readOnly value={DateTime.fromJSDate(props.maxDate).toLocaleString(DateTime.DATE_SHORT)} />\n                <button className=\"_zeroed _iconed __noclick\">\n                  <Icon icon=\"calendar-4\" />\n                </button>\n              </div>\n\n              <div className={classNames(\"date-range-wrapper\", {_shown: dateRangeCalendarShown})}>\n                <DateRangeCalendar\n                  startDate={props.minDate}\n                  endDate={props.maxDate}\n                    \n                  onStartDateUpdate={(date) => { (props.onMinDateChange as any)(date);}}\n                  onEndDateUpdate={(date) => { (props.onMaxDateChange as any)(date);}}\n                />\n              </div>\n            </div>\n          ) : null}\n\n          { /* Refresh button */}\n          {(true\n            && props.minDate\n            && props.maxDate\n          ) ? (\n            <button\n              className={classNames(['_wa', '_rounded', '_iconed', 'update-button', '__hide-on-mobile', { _blue: props.updateButtonActive }])}\n              onClick={() => props.onUpdate()}\n            >\n              <Icon className=\"_mirrored-y\" icon=\"refresh-2\" />\n            </button>\n          ) : null}\n        </div>\n      </div>\n\n      <div className=\"__show-on-mobile flex-container\">\n\n          { /* Search field */}\n          <div className=\"form-field __search-form\">\n            <input type=\"text\" className=\"_rounded\" onChange={({target: {value}}) => props.onSearchInputChange(value)} />\n            <button className=\"_wa _white _iconed _rounded\" onClick={() => props.onUpdate()}>\n              <Icon icon=\"magnifier-5\" />\n            </button>\n          </div>\n        \n          {props.childrenAfterSearch}\n\n          { /* Refresh button */}\n          {(true\n            && props.minDate\n            && props.maxDate\n          ) ? (\n            <button\n              className={classNames(['_wa', '_rounded', '_iconed', 'update-button', { _blue: props.updateButtonActive }])}\n              onClick={() => props.onUpdate()}\n            >\n              <Icon className=\"_mirrored-y\" icon=\"refresh-2\" />\n            </button>\n          ) : null}\n        </div>\n    </div>\n  )\n})\nexport default ReportFilters\n","/Users/nicole/rrrr/crm/src/components/reports/TableField.tsx",[],"/Users/nicole/rrrr/crm/src/components/reports/TableControls.tsx",[],"/Users/nicole/rrrr/crm/src/funcs/reports.ts",[],"/Users/nicole/rrrr/crm/src/validate.ts",[],"/Users/nicole/rrrr/crm/src/components/AudioPlayer.tsx",["650"],"import React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { calculateFromPercent, calculatePercent, formatTime } from \"../funcs\"\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../store\";\n\nimport \"../styles/components/audio-player.sass\"\nimport Icon from \"./Icon\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch,\n\n  audioSrc: string,\n  progress?: number,\n  playing?: boolean\n}\n\nconst AudioPlayer = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [rerender, setRerender] = useState(0)\n\n  const $player = useRef<HTMLAudioElement>(null)\n  const $playerSeeker = useRef<HTMLDivElement>(null)\n  \n  const [progress, setProgress] = useState(0)\n\n  const [playing, setPlaying] = useState<boolean>(!!props.playing)\n\n  // Set progress from prop\n  useEffect(() => {\n    setProgress(props.progress || 0)\n  }, [props.progress])\n\n  // Start or stop\n  useEffect(() => {\n\n    if (props.playing === undefined) return\n    \n    if(props.playing) $player.current?.play()\n    else $player.current?.pause()\n\n    setPlaying(props.playing)\n  }, [props.playing])\n\n  // On progress change\n  function onProgressChange(event: React.SyntheticEvent<HTMLAudioElement, Event>) {\n    setProgress(calculatePercent($player.current?.currentTime || 0, $player.current?.duration || 0))\n  }\n\n  // Seek function\n  function seek(event: any) {\n\n    let w100 = parseFloat(window.getComputedStyle($playerSeeker.current as any).width)\n    let w = event.nativeEvent.offsetX\n\n    let p = calculatePercent(w, w100);\n\n    ($player.current as any).currentTime = calculateFromPercent(p, ($player.current as any).currentTime, ($player.current as any).duration)\n\n  }\n\n  // Render function\n  return (\n    <div className=\"AudioPlayer\">\n\n      <audio\n        ref={$player}\n        onTimeUpdate={onProgressChange}\n        onPlay={() => setPlaying(true)}\n        onPause={() => setPlaying(false)}\n        onDurationChange={() => setRerender(Math.random())}\n        onTimeUpdateCapture={() => setRerender(Math.random())}\n      >\n        <source src={props.audioSrc}/>\n      </audio>\n      \n      {!playing ? (\n        <button className=\"_zeroed _iconed play-switcher\" onClick={() => $player.current?.play()}>\n          <Icon icon=\"video-15\" />\n        </button>\n      ) : (\n        <button className=\"_zeroed _iconed play-switcher\" onClick={() => $player.current?.pause()}>\n          <Icon icon=\"media-control-49\" />\n        </button>\n      )}\n\n      <div className=\"time\">{formatTime($player.current?.currentTime || 0)}</div>\n\n      <div className=\"player-seeker\" onClick={seek} ref={$playerSeeker}>\n        <div className=\"seeker-progress\" style={{width: `${progress}%`}}></div>\n        <div className=\"seeker-notch\" style={{left: `${progress}%`}}></div>\n      </div>\n\n      <div className=\"time\">{formatTime($player.current?.duration || 0)}</div>\n    </div>\n  )\n})\nexport default AudioPlayer\n","/Users/nicole/rrrr/crm/src/components/DateRangeCalendar.tsx",["651","652","653","654","655","656"],"/Users/nicole/rrrr/crm/src/components/SortSelect.tsx",[],"/Users/nicole/rrrr/crm/src/components/Radio.tsx",[],{"ruleId":"657","replacedBy":"658"},{"ruleId":"659","replacedBy":"660"},{"ruleId":"661","severity":1,"message":"662","line":7,"column":40,"nodeType":"663","messageId":"664","endLine":7,"endColumn":47},{"ruleId":"661","severity":1,"message":"665","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":30},{"ruleId":"661","severity":1,"message":"666","line":31,"column":8,"nodeType":"663","messageId":"664","endLine":31,"endColumn":13},{"ruleId":"661","severity":1,"message":"667","line":79,"column":8,"nodeType":"663","messageId":"664","endLine":79,"endColumn":14},{"ruleId":"661","severity":1,"message":"668","line":102,"column":15,"nodeType":"663","messageId":"664","endLine":102,"endColumn":18},{"ruleId":"661","severity":1,"message":"669","line":104,"column":17,"nodeType":"663","messageId":"664","endLine":104,"endColumn":21},{"ruleId":"670","severity":1,"message":"671","line":150,"column":31,"nodeType":"672","endLine":150,"endColumn":33,"suggestions":"673"},{"ruleId":"674","severity":1,"message":"675","line":174,"column":33,"nodeType":"676","messageId":"677","endLine":174,"endColumn":35},{"ruleId":"674","severity":1,"message":"675","line":174,"column":64,"nodeType":"676","messageId":"677","endLine":174,"endColumn":66},{"ruleId":"670","severity":1,"message":"678","line":193,"column":6,"nodeType":"672","endLine":193,"endColumn":35,"suggestions":"679"},{"ruleId":"670","severity":1,"message":"680","line":212,"column":6,"nodeType":"672","endLine":212,"endColumn":8,"suggestions":"681"},{"ruleId":"670","severity":1,"message":"682","line":235,"column":6,"nodeType":"672","endLine":235,"endColumn":26,"suggestions":"683"},{"ruleId":"684","severity":1,"message":"685","line":668,"column":47,"nodeType":"686","messageId":"687","endLine":668,"endColumn":65},{"ruleId":"684","severity":1,"message":"688","line":669,"column":55,"nodeType":"686","messageId":"687","endLine":669,"endColumn":80},{"ruleId":"684","severity":1,"message":"689","line":670,"column":55,"nodeType":"686","messageId":"687","endLine":670,"endColumn":80},{"ruleId":"684","severity":1,"message":"690","line":671,"column":53,"nodeType":"686","messageId":"687","endLine":671,"endColumn":75},{"ruleId":"684","severity":1,"message":"691","line":673,"column":53,"nodeType":"686","messageId":"687","endLine":673,"endColumn":77},{"ruleId":"684","severity":1,"message":"692","line":674,"column":58,"nodeType":"686","messageId":"687","endLine":674,"endColumn":82},{"ruleId":"684","severity":1,"message":"693","line":675,"column":57,"nodeType":"686","messageId":"687","endLine":675,"endColumn":80},{"ruleId":"684","severity":1,"message":"694","line":677,"column":62,"nodeType":"686","messageId":"687","endLine":677,"endColumn":93},{"ruleId":"684","severity":1,"message":"695","line":678,"column":67,"nodeType":"686","messageId":"687","endLine":678,"endColumn":98},{"ruleId":"684","severity":1,"message":"696","line":679,"column":66,"nodeType":"686","messageId":"687","endLine":679,"endColumn":96},{"ruleId":"684","severity":1,"message":"697","line":681,"column":47,"nodeType":"686","messageId":"687","endLine":681,"endColumn":65},{"ruleId":"684","severity":1,"message":"698","line":682,"column":51,"nodeType":"686","messageId":"687","endLine":682,"endColumn":68},{"ruleId":"684","severity":1,"message":"699","line":683,"column":52,"nodeType":"686","messageId":"687","endLine":683,"endColumn":70},{"ruleId":"684","severity":1,"message":"700","line":685,"column":50,"nodeType":"686","messageId":"687","endLine":685,"endColumn":71},{"ruleId":"684","severity":1,"message":"701","line":686,"column":55,"nodeType":"686","messageId":"687","endLine":686,"endColumn":76},{"ruleId":"684","severity":1,"message":"702","line":687,"column":54,"nodeType":"686","messageId":"687","endLine":687,"endColumn":74},{"ruleId":"684","severity":1,"message":"703","line":689,"column":59,"nodeType":"686","messageId":"687","endLine":689,"endColumn":88},{"ruleId":"684","severity":1,"message":"704","line":690,"column":64,"nodeType":"686","messageId":"687","endLine":690,"endColumn":93},{"ruleId":"684","severity":1,"message":"705","line":691,"column":63,"nodeType":"686","messageId":"687","endLine":691,"endColumn":91},{"ruleId":"684","severity":1,"message":"706","line":695,"column":49,"nodeType":"686","messageId":"687","endLine":695,"endColumn":69},{"ruleId":"684","severity":1,"message":"707","line":696,"column":53,"nodeType":"686","messageId":"687","endLine":696,"endColumn":73},{"ruleId":"684","severity":1,"message":"708","line":697,"column":52,"nodeType":"686","messageId":"687","endLine":697,"endColumn":71},{"ruleId":"684","severity":1,"message":"709","line":699,"column":54,"nodeType":"686","messageId":"687","endLine":699,"endColumn":79},{"ruleId":"684","severity":1,"message":"710","line":700,"column":59,"nodeType":"686","messageId":"687","endLine":700,"endColumn":84},{"ruleId":"684","severity":1,"message":"711","line":702,"column":46,"nodeType":"686","messageId":"687","endLine":702,"endColumn":63},{"ruleId":"684","severity":1,"message":"712","line":703,"column":51,"nodeType":"686","messageId":"687","endLine":703,"endColumn":68},{"ruleId":"684","severity":1,"message":"713","line":708,"column":50,"nodeType":"686","messageId":"687","endLine":708,"endColumn":71},{"ruleId":"684","severity":1,"message":"714","line":709,"column":55,"nodeType":"686","messageId":"687","endLine":709,"endColumn":76},{"ruleId":"684","severity":1,"message":"715","line":710,"column":54,"nodeType":"686","messageId":"687","endLine":710,"endColumn":74},{"ruleId":"684","severity":1,"message":"716","line":714,"column":53,"nodeType":"686","messageId":"687","endLine":714,"endColumn":73},{"ruleId":"684","severity":1,"message":"717","line":715,"column":57,"nodeType":"686","messageId":"687","endLine":715,"endColumn":81},{"ruleId":"684","severity":1,"message":"718","line":716,"column":58,"nodeType":"686","messageId":"687","endLine":716,"endColumn":83},{"ruleId":"684","severity":1,"message":"719","line":719,"column":58,"nodeType":"686","messageId":"687","endLine":719,"endColumn":82},{"ruleId":"684","severity":1,"message":"720","line":720,"column":54,"nodeType":"686","messageId":"687","endLine":720,"endColumn":74},{"ruleId":"684","severity":1,"message":"721","line":721,"column":55,"nodeType":"686","messageId":"687","endLine":721,"endColumn":76},{"ruleId":"684","severity":1,"message":"722","line":722,"column":53,"nodeType":"686","messageId":"687","endLine":722,"endColumn":72},{"ruleId":"684","severity":1,"message":"723","line":724,"column":66,"nodeType":"686","messageId":"687","endLine":724,"endColumn":102},{"ruleId":"684","severity":1,"message":"724","line":725,"column":70,"nodeType":"686","messageId":"687","endLine":725,"endColumn":105},{"ruleId":"684","severity":1,"message":"725","line":726,"column":71,"nodeType":"686","messageId":"687","endLine":726,"endColumn":107},{"ruleId":"684","severity":1,"message":"726","line":728,"column":65,"nodeType":"686","messageId":"687","endLine":728,"endColumn":100},{"ruleId":"684","severity":1,"message":"727","line":729,"column":69,"nodeType":"686","messageId":"687","endLine":729,"endColumn":103},{"ruleId":"684","severity":1,"message":"728","line":730,"column":70,"nodeType":"686","messageId":"687","endLine":730,"endColumn":105},{"ruleId":"684","severity":1,"message":"729","line":732,"column":60,"nodeType":"686","messageId":"687","endLine":732,"endColumn":94},{"ruleId":"684","severity":1,"message":"730","line":733,"column":64,"nodeType":"686","messageId":"687","endLine":733,"endColumn":97},{"ruleId":"684","severity":1,"message":"731","line":734,"column":65,"nodeType":"686","messageId":"687","endLine":734,"endColumn":99},{"ruleId":"684","severity":1,"message":"732","line":736,"column":63,"nodeType":"686","messageId":"687","endLine":736,"endColumn":96},{"ruleId":"684","severity":1,"message":"733","line":737,"column":68,"nodeType":"686","messageId":"687","endLine":737,"endColumn":101},{"ruleId":"684","severity":1,"message":"734","line":738,"column":67,"nodeType":"686","messageId":"687","endLine":738,"endColumn":99},{"ruleId":"684","severity":1,"message":"735","line":740,"column":62,"nodeType":"686","messageId":"687","endLine":740,"endColumn":94},{"ruleId":"661","severity":1,"message":"736","line":5,"column":9,"nodeType":"663","messageId":"664","endLine":5,"endColumn":15},{"ruleId":"737","severity":1,"message":"738","line":56,"column":8,"nodeType":"739","messageId":"740","endLine":56,"endColumn":18},{"ruleId":"737","severity":1,"message":"741","line":57,"column":20,"nodeType":"739","messageId":"740","endLine":57,"endColumn":37},{"ruleId":"661","severity":1,"message":"742","line":17,"column":25,"nodeType":"663","messageId":"664","endLine":17,"endColumn":41},{"ruleId":"661","severity":1,"message":"743","line":3,"column":10,"nodeType":"663","messageId":"664","endLine":3,"endColumn":26},{"ruleId":"661","severity":1,"message":"744","line":13,"column":10,"nodeType":"663","messageId":"664","endLine":13,"endColumn":22},{"ruleId":"661","severity":1,"message":"745","line":17,"column":8,"nodeType":"663","messageId":"664","endLine":17,"endColumn":12},{"ruleId":"661","severity":1,"message":"666","line":18,"column":8,"nodeType":"663","messageId":"664","endLine":18,"endColumn":13},{"ruleId":"661","severity":1,"message":"746","line":60,"column":13,"nodeType":"663","messageId":"664","endLine":60,"endColumn":29},{"ruleId":"670","severity":1,"message":"747","line":132,"column":6,"nodeType":"672","endLine":132,"endColumn":8,"suggestions":"748"},{"ruleId":"674","severity":1,"message":"749","line":139,"column":60,"nodeType":"676","messageId":"677","endLine":139,"endColumn":62},{"ruleId":"661","severity":1,"message":"750","line":74,"column":7,"nodeType":"663","messageId":"664","endLine":74,"endColumn":18},{"ruleId":"670","severity":1,"message":"751","line":154,"column":6,"nodeType":"672","endLine":154,"endColumn":38,"suggestions":"752"},{"ruleId":"670","severity":1,"message":"753","line":208,"column":43,"nodeType":"672","endLine":211,"endColumn":4,"suggestions":"754"},{"ruleId":"670","severity":1,"message":"755","line":217,"column":6,"nodeType":"672","endLine":221,"endColumn":4,"suggestions":"756"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"758","line":15,"column":8,"nodeType":"663","messageId":"664","endLine":15,"endColumn":15},{"ruleId":"670","severity":1,"message":"759","line":142,"column":37,"nodeType":"672","endLine":145,"endColumn":4,"suggestions":"760"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"670","severity":1,"message":"762","line":94,"column":6,"nodeType":"672","endLine":94,"endColumn":39,"suggestions":"763"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"751","line":123,"column":6,"nodeType":"672","endLine":123,"endColumn":38,"suggestions":"764"},{"ruleId":"670","severity":1,"message":"765","line":169,"column":39,"nodeType":"672","endLine":172,"endColumn":4,"suggestions":"766"},{"ruleId":"670","severity":1,"message":"755","line":178,"column":6,"nodeType":"672","endLine":182,"endColumn":4,"suggestions":"767"},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"661","severity":1,"message":"768","line":12,"column":8,"nodeType":"663","messageId":"664","endLine":12,"endColumn":16},{"ruleId":"670","severity":1,"message":"769","line":76,"column":6,"nodeType":"672","endLine":76,"endColumn":39,"suggestions":"770"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"751","line":158,"column":6,"nodeType":"672","endLine":158,"endColumn":38,"suggestions":"771"},{"ruleId":"670","severity":1,"message":"772","line":207,"column":35,"nodeType":"672","endLine":210,"endColumn":4,"suggestions":"773"},{"ruleId":"670","severity":1,"message":"755","line":216,"column":6,"nodeType":"672","endLine":219,"endColumn":4,"suggestions":"774"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"670","severity":1,"message":"775","line":90,"column":6,"nodeType":"672","endLine":90,"endColumn":8,"suggestions":"776"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"777","line":25,"column":8,"nodeType":"663","messageId":"664","endLine":25,"endColumn":15},{"ruleId":"661","severity":1,"message":"778","line":27,"column":9,"nodeType":"663","messageId":"664","endLine":27,"endColumn":17},{"ruleId":"661","severity":1,"message":"779","line":89,"column":9,"nodeType":"663","messageId":"664","endLine":89,"endColumn":12},{"ruleId":"661","severity":1,"message":"780","line":90,"column":9,"nodeType":"663","messageId":"664","endLine":90,"endColumn":13},{"ruleId":"670","severity":1,"message":"751","line":163,"column":6,"nodeType":"672","endLine":163,"endColumn":38,"suggestions":"781"},{"ruleId":"670","severity":1,"message":"755","line":217,"column":6,"nodeType":"672","endLine":220,"endColumn":4,"suggestions":"782"},{"ruleId":"670","severity":1,"message":"783","line":223,"column":36,"nodeType":"672","endLine":226,"endColumn":4,"suggestions":"784"},{"ruleId":"674","severity":1,"message":"675","line":309,"column":15,"nodeType":"676","messageId":"677","endLine":309,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":312,"column":15,"nodeType":"676","messageId":"677","endLine":312,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":319,"column":15,"nodeType":"676","messageId":"677","endLine":319,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":321,"column":21,"nodeType":"676","messageId":"677","endLine":321,"endColumn":23},{"ruleId":"674","severity":1,"message":"675","line":334,"column":23,"nodeType":"676","messageId":"677","endLine":334,"endColumn":25},{"ruleId":"785","severity":1,"message":"786","line":336,"column":24,"nodeType":"787","messageId":"788","endLine":340,"endColumn":12},{"ruleId":"789","severity":1,"message":"790","line":336,"column":35,"nodeType":"787","messageId":"791","endLine":336,"endColumn":37},{"ruleId":"674","severity":1,"message":"675","line":337,"column":19,"nodeType":"676","messageId":"677","endLine":337,"endColumn":21},{"ruleId":"674","severity":1,"message":"675","line":346,"column":15,"nodeType":"676","messageId":"677","endLine":346,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":347,"column":27,"nodeType":"676","messageId":"677","endLine":347,"endColumn":29},{"ruleId":"674","severity":1,"message":"675","line":352,"column":15,"nodeType":"676","messageId":"677","endLine":352,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":353,"column":27,"nodeType":"676","messageId":"677","endLine":353,"endColumn":29},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"751","line":150,"column":6,"nodeType":"672","endLine":150,"endColumn":38,"suggestions":"792"},{"ruleId":"670","severity":1,"message":"755","line":196,"column":6,"nodeType":"672","endLine":199,"endColumn":4,"suggestions":"793"},{"ruleId":"670","severity":1,"message":"783","line":202,"column":36,"nodeType":"672","endLine":205,"endColumn":4,"suggestions":"794"},{"ruleId":"674","severity":1,"message":"675","line":287,"column":15,"nodeType":"676","messageId":"677","endLine":287,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":290,"column":15,"nodeType":"676","messageId":"677","endLine":290,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":297,"column":15,"nodeType":"676","messageId":"677","endLine":297,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":299,"column":21,"nodeType":"676","messageId":"677","endLine":299,"endColumn":23},{"ruleId":"674","severity":1,"message":"675","line":312,"column":21,"nodeType":"676","messageId":"677","endLine":312,"endColumn":23},{"ruleId":"785","severity":1,"message":"786","line":314,"column":22,"nodeType":"787","messageId":"788","endLine":318,"endColumn":10},{"ruleId":"789","severity":1,"message":"790","line":314,"column":33,"nodeType":"787","messageId":"791","endLine":314,"endColumn":35},{"ruleId":"674","severity":1,"message":"675","line":315,"column":17,"nodeType":"676","messageId":"677","endLine":315,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":324,"column":15,"nodeType":"676","messageId":"677","endLine":324,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":325,"column":27,"nodeType":"676","messageId":"677","endLine":325,"endColumn":29},{"ruleId":"674","severity":1,"message":"675","line":330,"column":15,"nodeType":"676","messageId":"677","endLine":330,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":331,"column":27,"nodeType":"676","messageId":"677","endLine":331,"endColumn":29},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"751","line":129,"column":6,"nodeType":"672","endLine":129,"endColumn":38,"suggestions":"795"},{"ruleId":"670","severity":1,"message":"755","line":174,"column":6,"nodeType":"672","endLine":177,"endColumn":4,"suggestions":"796"},{"ruleId":"670","severity":1,"message":"783","line":180,"column":36,"nodeType":"672","endLine":183,"endColumn":4,"suggestions":"797"},{"ruleId":"674","severity":1,"message":"675","line":227,"column":15,"nodeType":"676","messageId":"677","endLine":227,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":230,"column":15,"nodeType":"676","messageId":"677","endLine":230,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":237,"column":15,"nodeType":"676","messageId":"677","endLine":237,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":239,"column":21,"nodeType":"676","messageId":"677","endLine":239,"endColumn":23},{"ruleId":"674","severity":1,"message":"675","line":252,"column":21,"nodeType":"676","messageId":"677","endLine":252,"endColumn":23},{"ruleId":"785","severity":1,"message":"786","line":254,"column":22,"nodeType":"787","messageId":"788","endLine":258,"endColumn":10},{"ruleId":"789","severity":1,"message":"790","line":254,"column":33,"nodeType":"787","messageId":"791","endLine":254,"endColumn":35},{"ruleId":"674","severity":1,"message":"675","line":255,"column":17,"nodeType":"676","messageId":"677","endLine":255,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":264,"column":15,"nodeType":"676","messageId":"677","endLine":264,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":265,"column":27,"nodeType":"676","messageId":"677","endLine":265,"endColumn":29},{"ruleId":"674","severity":1,"message":"675","line":270,"column":15,"nodeType":"676","messageId":"677","endLine":270,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":271,"column":27,"nodeType":"676","messageId":"677","endLine":271,"endColumn":29},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"661","severity":1,"message":"798","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":14},{"ruleId":"661","severity":1,"message":"768","line":12,"column":8,"nodeType":"663","messageId":"664","endLine":12,"endColumn":16},{"ruleId":"661","severity":1,"message":"799","line":14,"column":10,"nodeType":"663","messageId":"664","endLine":14,"endColumn":18},{"ruleId":"661","severity":1,"message":"800","line":16,"column":8,"nodeType":"663","messageId":"664","endLine":16,"endColumn":25},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"751","line":133,"column":6,"nodeType":"672","endLine":133,"endColumn":38,"suggestions":"801"},{"ruleId":"670","severity":1,"message":"755","line":180,"column":6,"nodeType":"672","endLine":183,"endColumn":4,"suggestions":"802"},{"ruleId":"670","severity":1,"message":"783","line":186,"column":36,"nodeType":"672","endLine":190,"endColumn":4,"suggestions":"803"},{"ruleId":"674","severity":1,"message":"675","line":234,"column":15,"nodeType":"676","messageId":"677","endLine":234,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":237,"column":15,"nodeType":"676","messageId":"677","endLine":237,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":244,"column":15,"nodeType":"676","messageId":"677","endLine":244,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":246,"column":21,"nodeType":"676","messageId":"677","endLine":246,"endColumn":23},{"ruleId":"674","severity":1,"message":"675","line":259,"column":21,"nodeType":"676","messageId":"677","endLine":259,"endColumn":23},{"ruleId":"785","severity":1,"message":"786","line":261,"column":22,"nodeType":"787","messageId":"788","endLine":265,"endColumn":10},{"ruleId":"789","severity":1,"message":"790","line":261,"column":33,"nodeType":"787","messageId":"791","endLine":261,"endColumn":35},{"ruleId":"674","severity":1,"message":"675","line":262,"column":17,"nodeType":"676","messageId":"677","endLine":262,"endColumn":19},{"ruleId":"674","severity":1,"message":"675","line":271,"column":15,"nodeType":"676","messageId":"677","endLine":271,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":272,"column":27,"nodeType":"676","messageId":"677","endLine":272,"endColumn":29},{"ruleId":"674","severity":1,"message":"675","line":277,"column":15,"nodeType":"676","messageId":"677","endLine":277,"endColumn":17},{"ruleId":"674","severity":1,"message":"675","line":278,"column":27,"nodeType":"676","messageId":"677","endLine":278,"endColumn":29},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"670","severity":1,"message":"804","line":95,"column":42,"nodeType":"672","endLine":98,"endColumn":4,"suggestions":"805"},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"807","line":27,"column":10,"nodeType":"663","messageId":"664","endLine":27,"endColumn":17},{"ruleId":"670","severity":1,"message":"775","line":54,"column":6,"nodeType":"672","endLine":54,"endColumn":8,"suggestions":"808"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"809","line":130,"column":21,"nodeType":"663","messageId":"664","endLine":130,"endColumn":25},{"ruleId":"810","severity":1,"message":"811","line":130,"column":62,"nodeType":"676","messageId":"812","endLine":130,"endColumn":63},{"ruleId":"670","severity":1,"message":"813","line":139,"column":36,"nodeType":"672","endLine":142,"endColumn":4,"suggestions":"814"},{"ruleId":"661","severity":1,"message":"745","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":12},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"768","line":13,"column":8,"nodeType":"663","messageId":"664","endLine":13,"endColumn":16},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"745","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":12},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"815","line":40,"column":9,"nodeType":"663","messageId":"664","endLine":40,"endColumn":16},{"ruleId":"670","severity":1,"message":"775","line":86,"column":6,"nodeType":"672","endLine":86,"endColumn":8,"suggestions":"816"},{"ruleId":"661","severity":1,"message":"806","line":7,"column":8,"nodeType":"663","messageId":"664","endLine":7,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":14},{"ruleId":"670","severity":1,"message":"775","line":68,"column":6,"nodeType":"672","endLine":68,"endColumn":8,"suggestions":"817"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"818","line":12,"column":8,"nodeType":"663","messageId":"664","endLine":12,"endColumn":14},{"ruleId":"670","severity":1,"message":"759","line":139,"column":38,"nodeType":"672","endLine":142,"endColumn":4,"suggestions":"819"},{"ruleId":"670","severity":1,"message":"775","line":68,"column":6,"nodeType":"672","endLine":68,"endColumn":8,"suggestions":"820"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"768","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":16},{"ruleId":"661","severity":1,"message":"818","line":13,"column":8,"nodeType":"663","messageId":"664","endLine":13,"endColumn":14},{"ruleId":"670","severity":1,"message":"821","line":98,"column":41,"nodeType":"672","endLine":101,"endColumn":4,"suggestions":"822"},{"ruleId":"661","severity":1,"message":"806","line":7,"column":8,"nodeType":"663","messageId":"664","endLine":7,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":14},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"670","severity":1,"message":"775","line":81,"column":6,"nodeType":"672","endLine":81,"endColumn":8,"suggestions":"823"},{"ruleId":"661","severity":1,"message":"806","line":7,"column":8,"nodeType":"663","messageId":"664","endLine":7,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":14},{"ruleId":"661","severity":1,"message":"824","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"768","line":12,"column":8,"nodeType":"663","messageId":"664","endLine":12,"endColumn":16},{"ruleId":"661","severity":1,"message":"825","line":46,"column":10,"nodeType":"663","messageId":"664","endLine":46,"endColumn":22},{"ruleId":"670","severity":1,"message":"775","line":80,"column":6,"nodeType":"672","endLine":80,"endColumn":8,"suggestions":"826"},{"ruleId":"661","severity":1,"message":"806","line":7,"column":8,"nodeType":"663","messageId":"664","endLine":7,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":14},{"ruleId":"661","severity":1,"message":"827","line":14,"column":8,"nodeType":"663","messageId":"664","endLine":14,"endColumn":16},{"ruleId":"661","severity":1,"message":"828","line":69,"column":10,"nodeType":"663","messageId":"664","endLine":69,"endColumn":21},{"ruleId":"661","severity":1,"message":"806","line":7,"column":8,"nodeType":"663","messageId":"664","endLine":7,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":14},{"ruleId":"661","severity":1,"message":"827","line":14,"column":8,"nodeType":"663","messageId":"664","endLine":14,"endColumn":16},{"ruleId":"661","severity":1,"message":"829","line":62,"column":10,"nodeType":"663","messageId":"664","endLine":62,"endColumn":20},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"818","line":13,"column":8,"nodeType":"663","messageId":"664","endLine":13,"endColumn":14},{"ruleId":"670","severity":1,"message":"830","line":130,"column":42,"nodeType":"672","endLine":133,"endColumn":4,"suggestions":"831"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"768","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":16},{"ruleId":"661","severity":1,"message":"818","line":13,"column":8,"nodeType":"663","messageId":"664","endLine":13,"endColumn":14},{"ruleId":"670","severity":1,"message":"832","line":95,"column":40,"nodeType":"672","endLine":98,"endColumn":4,"suggestions":"833"},{"ruleId":"661","severity":1,"message":"834","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":25},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"807","line":27,"column":10,"nodeType":"663","messageId":"664","endLine":27,"endColumn":17},{"ruleId":"670","severity":1,"message":"775","line":54,"column":6,"nodeType":"672","endLine":54,"endColumn":8,"suggestions":"835"},{"ruleId":"661","severity":1,"message":"828","line":41,"column":10,"nodeType":"663","messageId":"664","endLine":41,"endColumn":21},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"836","line":65,"column":9,"nodeType":"663","messageId":"664","endLine":65,"endColumn":22},{"ruleId":"670","severity":1,"message":"837","line":139,"column":39,"nodeType":"672","endLine":142,"endColumn":4,"suggestions":"838"},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"670","severity":1,"message":"775","line":85,"column":6,"nodeType":"672","endLine":85,"endColumn":8,"suggestions":"839"},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"840","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":15},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"815","line":50,"column":9,"nodeType":"663","messageId":"664","endLine":50,"endColumn":16},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"840","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":15},{"ruleId":"661","severity":1,"message":"806","line":8,"column":8,"nodeType":"663","messageId":"664","endLine":8,"endColumn":16},{"ruleId":"661","severity":1,"message":"798","line":11,"column":8,"nodeType":"663","messageId":"664","endLine":11,"endColumn":14},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"841","line":5,"column":10,"nodeType":"663","messageId":"664","endLine":5,"endColumn":18},{"ruleId":"661","severity":1,"message":"768","line":6,"column":8,"nodeType":"663","messageId":"664","endLine":6,"endColumn":16},{"ruleId":"661","severity":1,"message":"842","line":19,"column":8,"nodeType":"663","messageId":"664","endLine":19,"endColumn":17},{"ruleId":"670","severity":1,"message":"843","line":124,"column":47,"nodeType":"672","endLine":127,"endColumn":4,"suggestions":"844"},{"ruleId":"670","severity":1,"message":"775","line":74,"column":6,"nodeType":"672","endLine":74,"endColumn":8,"suggestions":"845"},{"ruleId":"661","severity":1,"message":"761","line":4,"column":8,"nodeType":"663","messageId":"664","endLine":4,"endColumn":12},{"ruleId":"661","severity":1,"message":"846","line":12,"column":8,"nodeType":"663","messageId":"664","endLine":12,"endColumn":18},{"ruleId":"661","severity":1,"message":"841","line":13,"column":10,"nodeType":"663","messageId":"664","endLine":13,"endColumn":18},{"ruleId":"661","severity":1,"message":"815","line":39,"column":9,"nodeType":"663","messageId":"664","endLine":39,"endColumn":16},{"ruleId":"661","severity":1,"message":"768","line":10,"column":8,"nodeType":"663","messageId":"664","endLine":10,"endColumn":16},{"ruleId":"661","severity":1,"message":"847","line":12,"column":10,"nodeType":"663","messageId":"664","endLine":12,"endColumn":29},{"ruleId":"661","severity":1,"message":"829","line":35,"column":10,"nodeType":"663","messageId":"664","endLine":35,"endColumn":20},{"ruleId":"661","severity":1,"message":"757","line":1,"column":8,"nodeType":"663","messageId":"664","endLine":1,"endColumn":13},{"ruleId":"661","severity":1,"message":"836","line":49,"column":9,"nodeType":"663","messageId":"664","endLine":49,"endColumn":22},{"ruleId":"670","severity":1,"message":"848","line":95,"column":49,"nodeType":"672","endLine":98,"endColumn":4,"suggestions":"849"},{"ruleId":"737","severity":1,"message":"738","line":35,"column":8,"nodeType":"739","messageId":"740","endLine":35,"endColumn":18},{"ruleId":"737","severity":1,"message":"741","line":36,"column":20,"nodeType":"739","messageId":"740","endLine":36,"endColumn":37},{"ruleId":"661","severity":1,"message":"850","line":3,"column":17,"nodeType":"663","messageId":"664","endLine":3,"endColumn":30},{"ruleId":"661","severity":1,"message":"851","line":20,"column":10,"nodeType":"663","messageId":"664","endLine":20,"endColumn":18},{"ruleId":"661","severity":1,"message":"852","line":10,"column":9,"nodeType":"663","messageId":"664","endLine":10,"endColumn":12},{"ruleId":"670","severity":1,"message":"853","line":39,"column":5,"nodeType":"672","endLine":39,"endColumn":7,"suggestions":"854"},{"ruleId":"855","severity":1,"message":"856","line":124,"column":67,"nodeType":"857","messageId":"858","endLine":124,"endColumn":69},{"ruleId":"855","severity":1,"message":"856","line":125,"column":73,"nodeType":"857","messageId":"858","endLine":125,"endColumn":75},{"ruleId":"855","severity":1,"message":"859","line":125,"column":73,"nodeType":"857","messageId":"858","endLine":125,"endColumn":75},{"ruleId":"855","severity":1,"message":"859","line":127,"column":65,"nodeType":"857","messageId":"858","endLine":127,"endColumn":67},"no-native-reassign",["860"],"no-negated-in-lhs",["861"],"@typescript-eslint/no-unused-vars","'signOut' is defined but never used.","Identifier","unusedVar","'businessAccountIconImg' is defined but never used.","'Menus' is defined but never used.","'router' is defined but never used.","'key' is assigned a value but never used.","'_key' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: '$router.route.name', '$router.router', and 'props.store.accessToken'. Either include them or remove the dependency array.","ArrayExpression",["862"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: '$router.router', 'props.dispatcher', and 'props.store'. Either include them or remove the dependency array.",["863"],"React Hook useEffect has missing dependencies: '$router.route.name', '$router.router', 'props.dispatcher', 'props.store.accessToken', and 'props.store.user'. Either include them or remove the dependency array.",["864"],"React Hook useEffect has missing dependencies: '$router.router', 'isPageAllowed', 'props.dispatcher', and 'props.store.accessToken'. Either include them or remove the dependency array.",["865"],"react/jsx-pascal-case","Imported JSX component CallsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component CallsSourcesPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallsNumbersPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallsAreaPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component PermissionsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component PermissionsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component PermissionsPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AccountPermissionsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AccountPermissionsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AccountPermissionsPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component UsersPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component UsersPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component UsersPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AccountsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AccountsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AccountsPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ServiceResourcesPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ServiceResourcesPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ServiceResourcesPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ClientsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ClientsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ClientsPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AppointmentsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AppointmentsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JobsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JobsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AbsencesPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AbsencesPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AbsencesPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SupportPage__Faq must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SupportPage__Tickets must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component SupportPage__Contacts must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ListsPage_Appliances must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ListsPage_Brands must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ListsPage_Sources must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component ListsPage_Areas must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_PhoneNumbersPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_PhoneNumbersPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_PhoneNumbersPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_DispatchersPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_DispatchersPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_DispatchersPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_CallGroupsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_CallGroupsPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_CallGroupsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_CallFlowsPage_List must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_CallFlowsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_CallFlowsPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component CallCenter_SettingsPage_Item must be in PascalCase or SCREAMING_SNAKE_CASE","'strict' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as","Use 'as AxiosError' instead of '<AxiosError>'.","'setNotifications' is assigned a value but never used.","'getActiveAccount' is defined but never used.","'validateMany' is defined but never used.","'User' is defined but never used.","'validationErrors' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'authData' and 'props.store.accessToken'. Either include them or remove the dependency array. If 'setAuthData' needs the current value of 'props.store.accessToken', you can also switch to useReducer instead of useState and read 'props.store.accessToken' in the reducer.",["866"],"Expected '!==' and instead saw '!='.","'filterWords' is defined but never used.","React Hook useEffect has missing dependencies: 'localInterface' and 'reportData'. Either include them or remove the dependency array. You can also do a functional update 'setLocalInterface(l => ...)' if you only need 'localInterface' in the 'setLocalInterface' call.",["867"],"React Hook useEffect has a missing dependency: 'loadAppointments'. Either include it or remove the dependency array.",["868"],"React Hook useEffect has a missing dependency: 'reportData'. Either include it or remove the dependency array.",["869"],"'axios' is defined but never used.","'storage' is defined but never used.","React Hook useEffect has a missing dependency: 'loadClients'. Either include it or remove the dependency array.",["870"],"'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'absenceData'. Either include it or remove the dependency array. You can also do a functional update 'setAbsenceData(a => ...)' if you only need 'absenceData' in the 'setAbsenceData' call.",["871"],["872"],"React Hook useEffect has a missing dependency: 'loadAbsences'. Either include it or remove the dependency array.",["873"],["874"],"'Checkbox' is defined but never used.","React Hook useEffect has missing dependencies: 'absenceDataEdit' and 'newAbsenceData'. Either include them or remove the dependency array. You can also do a functional update 'setNewAbsenceData(n => ...)' if you only need 'newAbsenceData' in the 'setNewAbsenceData' call.",["875"],["876"],"React Hook useEffect has a missing dependency: 'loadJobs'. Either include it or remove the dependency array.",["877"],["878"],"React Hook useEffect has a missing dependency: 'loadInfo'. Either include it or remove the dependency array.",["879"],"'filters' is defined but never used.","'userInfo' is defined but never used.","'now' is assigned a value but never used.","'now1' is assigned a value but never used.",["880"],["881"],"React Hook useEffect has a missing dependency: 'loadCalls'. Either include it or remove the dependency array.",["882"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) '$arrType'.","ArrowFunctionExpression","unsafeRefs","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside",["883"],["884"],["885"],["886"],["887"],["888"],"'moment' is defined but never used.","'DateTime' is defined but never used.","'DateTimeComponent' is defined but never used.",["889"],["890"],["891"],"React Hook useEffect has a missing dependency: 'loadPermissions'. Either include it or remove the dependency array.",["892"],"'Datetime' is defined but never used.","'actions' is assigned a value but never used.",["893"],"'user' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["894"],"'$router' is assigned a value but never used.",["895"],["896"],"'Client' is defined but never used.",["897"],["898"],"React Hook useEffect has a missing dependency: 'loadCallGroups'. Either include it or remove the dependency array.",["899"],["900"],"'Select' is defined but never used.","'settingsData' is assigned a value but never used.",["901"],"'Switcher' is defined but never used.","'dispatchers' is assigned a value but never used.","'callGroups' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadDispatchers'. Either include it or remove the dependency array.",["902"],"React Hook useEffect has a missing dependency: 'loadCallFlows'. Either include it or remove the dependency array.",["903"],"'AccountPermission' is defined but never used.",["904"],"'activeAccount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadAccounts'. Either include it or remove the dependency array.",["905"],["906"],"'Account' is defined but never used.","'BaseLink' is defined but never used.","'dashboard' is defined but never used.","React Hook useEffect has a missing dependency: 'loadServiceResources'. Either include it or remove the dependency array.",["907"],["908"],"'classNames' is defined but never used.","'CallCenter_CallFlow' is defined but never used.","React Hook useEffect has a missing dependency: 'loadAccountPermissions'. Either include it or remove the dependency array.",["909"],"'ReactChildren' is defined but never used.","'rerender' is assigned a value but never used.","'log' is defined but never used.","React Hook useEffect has a missing dependency: 'timeZone'. Either include it or remove the dependency array.",["910"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","no-global-assign","no-unsafe-negation",{"desc":"911","fix":"912"},{"desc":"913","fix":"914"},{"desc":"915","fix":"916"},{"desc":"917","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"921","fix":"931"},{"desc":"932","fix":"933"},{"desc":"925","fix":"934"},{"desc":"935","fix":"936"},{"desc":"921","fix":"937"},{"desc":"938","fix":"939"},{"desc":"940","fix":"941"},{"desc":"942","fix":"943"},{"desc":"921","fix":"944"},{"desc":"940","fix":"945"},{"desc":"946","fix":"947"},{"desc":"921","fix":"948"},{"desc":"940","fix":"949"},{"desc":"946","fix":"950"},{"desc":"921","fix":"951"},{"desc":"940","fix":"952"},{"desc":"946","fix":"953"},{"desc":"921","fix":"954"},{"desc":"940","fix":"955"},{"desc":"956","fix":"957"},{"desc":"958","fix":"959"},{"desc":"942","fix":"960"},{"desc":"961","fix":"962"},{"desc":"942","fix":"963"},{"desc":"942","fix":"964"},{"desc":"927","fix":"965"},{"desc":"942","fix":"966"},{"desc":"967","fix":"968"},{"desc":"942","fix":"969"},{"desc":"942","fix":"970"},{"desc":"971","fix":"972"},{"desc":"973","fix":"974"},{"desc":"942","fix":"975"},{"desc":"976","fix":"977"},{"desc":"942","fix":"978"},{"desc":"979","fix":"980"},{"desc":"942","fix":"981"},{"desc":"982","fix":"983"},{"desc":"984","fix":"985"},"Update the dependencies array to be: [$router.route.name, $router.router, props.store.accessToken]",{"range":"986","text":"987"},"Update the dependencies array to be: [$router.router, props.dispatcher, props.store, props.store.selectedAccount]",{"range":"988","text":"989"},"Update the dependencies array to be: [$router.route.name, $router.router, props.dispatcher, props.store.accessToken, props.store.user]",{"range":"990","text":"991"},"Update the dependencies array to be: [$router.route.name, $router.router, isPageAllowed, props.dispatcher, props.store.accessToken]",{"range":"992","text":"993"},"Update the dependencies array to be: [authData, props.store.accessToken]",{"range":"994","text":"995"},"Update the dependencies array to be: [localInterface, localInterface.dateRangePreset, reportData]",{"range":"996","text":"997"},"Update the dependencies array to be: [$updater, loadAppointments, localInterface.page]",{"range":"998","text":"999"},"Update the dependencies array to be: [localInterface.min_date, localInterface.max_date, localInterface.dateRangeType, reportData]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [$updater, loadClients, localInterface.page]",{"range":"1002","text":"1003"},"Update the dependencies array to be: [absenceData, newAbsenceData.service_resource]",{"range":"1004","text":"1005"},{"range":"1006","text":"997"},"Update the dependencies array to be: [$updater, loadAbsences, localInterface.page]",{"range":"1007","text":"1008"},{"range":"1009","text":"1001"},"Update the dependencies array to be: [absenceDataEdit, newAbsenceData, newAbsenceData.service_resource]",{"range":"1010","text":"1011"},{"range":"1012","text":"997"},"Update the dependencies array to be: [$updater, loadJobs, localInterface.page]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [localInterface.min_date, localInterface.max_date, reportData]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [loadInfo]",{"range":"1017","text":"1018"},{"range":"1019","text":"997"},{"range":"1020","text":"1016"},"Update the dependencies array to be: [$updater, loadCalls, localInterface.page]",{"range":"1021","text":"1022"},{"range":"1023","text":"997"},{"range":"1024","text":"1016"},{"range":"1025","text":"1022"},{"range":"1026","text":"997"},{"range":"1027","text":"1016"},{"range":"1028","text":"1022"},{"range":"1029","text":"997"},{"range":"1030","text":"1016"},"Update the dependencies array to be: [$updater, localInterface.page, localInterface.max_rows, loadCalls]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [$updater, loadPermissions, localInterface.page]",{"range":"1033","text":"1034"},{"range":"1035","text":"1018"},"Update the dependencies array to be: [$updater, loadUsers, localInterface.page]",{"range":"1036","text":"1037"},{"range":"1038","text":"1018"},{"range":"1039","text":"1018"},{"range":"1040","text":"1003"},{"range":"1041","text":"1018"},"Update the dependencies array to be: [$updater, loadCallGroups, localInterface.page]",{"range":"1042","text":"1043"},{"range":"1044","text":"1018"},{"range":"1045","text":"1018"},"Update the dependencies array to be: [$updater, loadDispatchers, localInterface.page]",{"range":"1046","text":"1047"},"Update the dependencies array to be: [$updater, loadCallFlows, localInterface.page]",{"range":"1048","text":"1049"},{"range":"1050","text":"1018"},"Update the dependencies array to be: [$updater, loadAccounts, localInterface.page]",{"range":"1051","text":"1052"},{"range":"1053","text":"1018"},"Update the dependencies array to be: [$updater, loadServiceResources, localInterface.page]",{"range":"1054","text":"1055"},{"range":"1056","text":"1018"},"Update the dependencies array to be: [$updater, loadAccountPermissions, localInterface.page]",{"range":"1057","text":"1058"},"Update the dependencies array to be: [timeZone]",{"range":"1059","text":"1060"},[6057,6059],"[$router.route.name, $router.router, props.store.accessToken]",[7301,7330],"[$router.router, props.dispatcher, props.store, props.store.selectedAccount]",[7769,7771],"[$router.route.name, $router.router, props.dispatcher, props.store.accessToken, props.store.user]",[8370,8390],"[$router.route.name, $router.router, isPageAllowed, props.dispatcher, props.store.accessToken]",[3595,3597],"[authData, props.store.accessToken]",[3844,3876],"[localInterface, localInterface.dateRangePreset, reportData]",[5646,5689],"[$updater, loadAppointments, localInterface.page]",[5802,5899],"[localInterface.min_date, localInterface.max_date, localInterface.dateRangeType, reportData]",[3357,3400],"[$updater, loadClients, localInterface.page]",[2257,2290],"[absenceData, newAbsenceData.service_resource]",[3217,3249],[4855,4899],"[$updater, loadAbsences, localInterface.page]",[5012,5109],[2020,2053],"[absenceDataEdit, newAbsenceData, newAbsenceData.service_resource]",[3779,3811],[5375,5419],"[$updater, loadJobs, localInterface.page]",[5532,5594],"[localInterface.min_date, localInterface.max_date, reportData]",[2290,2292],"[loadInfo]",[4361,4393],[6018,6080],[6148,6192],"[$updater, loadCalls, localInterface.page]",[3846,3878],[5507,5569],[5637,5680],[3585,3617],[5168,5230],[5298,5341],[3556,3588],[5302,5364],[5432,5504],"[$updater, localInterface.page, localInterface.max_rows, loadCalls]",[2533,2576],"[$updater, loadPermissions, localInterface.page]",[1672,1674],[3542,3585],"[$updater, loadUsers, localInterface.page]",[2278,2280],[1783,1785],[3705,3749],[1943,1945],[2790,2834],"[$updater, loadCallGroups, localInterface.page]",[2354,2356],[2112,2114],[3512,3556],"[$updater, loadDispatchers, localInterface.page]",[2710,2754],"[$updater, loadCallFlows, localInterface.page]",[1722,1724],[3396,3439],"[$updater, loadAccounts, localInterface.page]",[2499,2501],[3404,3448],"[$updater, loadServiceResources, localInterface.page]",[1821,1823],[2544,2587],"[$updater, loadAccountPermissions, localInterface.page]",[1147,1149],"[timeZone]"]