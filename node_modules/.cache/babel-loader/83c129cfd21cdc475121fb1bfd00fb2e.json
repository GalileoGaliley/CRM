{"ast":null,"code":"import axios from \"axios\";\nimport router from './router';\nexport function getActiveAccount(store) {\n  if (store.selectedAccount === null) return null;\n  return store.accounts[store.selectedAccount];\n}\nexport async function signIn(email, password) {\n  // login\n  try {\n    await httpClient.post('/login', {\n      email,\n      password\n    }).then(_ref => {\n      let {\n        data\n      } = _ref;\n      data = JSON.parse(data);\n      localStorage.setItem('token', data.token);\n    });\n  } catch (e) {} // Redirect to auth page\n\n\n  router.navigate('auth');\n}\nexport async function signOut(dispatcher) {\n  dispatcher.setAccessToken(null);\n  dispatcher.setAccounts([]);\n  dispatcher.setSelectedAccount(null);\n  dispatcher.setUser(null); // Perform logout\n\n  try {\n    await httpClient.post('/logout');\n  } catch (e) {}\n\n  delete httpClient.defaults.headers['Authorization']; // Redirect to auth page\n\n  router.navigate('auth');\n}\nexport function nError(error) {\n  // HTTP error (axios)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (error.isAxiosError) {\n    const _error = error; // eslint-disable-next-line no-console\n\n    console.warn(_error.request, _error.response);\n    if (!_error.response) return {\n      content: {\n        errorText: \"Can`t connect to server\"\n      },\n      error\n    };\n    const errorText = _error.response.data.message;\n    return {\n      content: {\n        errorText\n      },\n      error\n    };\n  } // Another error\n  else {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  } // Return error content\n\n\n  return {\n    content: {\n      errorText: String(error)\n    },\n    error\n  };\n}\nexport const httpClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n});\nexport function leadingZero(int) {\n  return (int <= 9 ? '0' : '') + int;\n}\nexport function formatTime(seconds) {\n  return [0, Math.floor(seconds / 60), Math.floor(seconds % 60)].map(x => x.toString()).map(x => x.length === 1 ? `0${x}` : x).join(\":\");\n}\nexport function calculatePercent(min, max) {\n  return min / max * 100;\n}\nexport function calculateFromPercent(value, min, max) {\n  return max / 100 * value;\n}","map":{"version":3,"sources":["/Users/nicole/rrrr/crm/src/funcs.ts"],"names":["axios","router","getActiveAccount","store","selectedAccount","accounts","signIn","email","password","httpClient","post","then","data","JSON","parse","localStorage","setItem","token","e","navigate","signOut","dispatcher","setAccessToken","setAccounts","setSelectedAccount","setUser","defaults","headers","nError","error","isAxiosError","_error","console","warn","request","response","content","errorText","message","String","create","baseURL","process","env","REACT_APP_API_URL","leadingZero","int","formatTime","seconds","Math","floor","map","x","toString","length","join","calculatePercent","min","max","calculateFromPercent","value"],"mappings":"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","sourcesContent":["import axios, { AxiosError } from \"axios\"\nimport Account from \"./models/Account\";\nimport { StoreDispatch, StoreState } from \"./store\";\nimport router from './router'\nimport {strict} from \"assert\";\n\nexport function getActiveAccount(store: StoreState): Account | null {\n  if(store.selectedAccount === null) return null\n  return store.accounts[store.selectedAccount]\n}\n\nexport async function signIn(email : string, password: string) {\n  // login\n  try {\n    await httpClient.post('/login',{email, password}).then(({data})=>{\n      data = JSON.parse(data);\n      localStorage.setItem('token', data.token);\n    })\n  } catch(e) {\n\n  }\n\n\n\n\n\n  // Redirect to auth page\n  router.navigate('auth')\n}\n\nexport async function signOut(dispatcher: StoreDispatch) {\n  dispatcher.setAccessToken(null)\n  dispatcher.setAccounts([])\n  dispatcher.setSelectedAccount(null)\n  dispatcher.setUser(null)\n\n  // Perform logout\n  try {await httpClient.post('/logout')} catch(e) {}\n  delete httpClient.defaults.headers['Authorization']\n\n  // Redirect to auth page\n  router.navigate('auth')\n}\n\nexport function nError(error: Error | AxiosError | unknown): {\n\n  error: Error | AxiosError | unknown,\n  content: {\n    code?: number,\n    errorText: string\n  }\n} {\n\n  // HTTP error (axios)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((<any>error).isAxiosError) {\n    const _error = <AxiosError>error\n    // eslint-disable-next-line no-console\n    console.warn(_error.request, _error.response)\n\n    if (!_error.response) return {\n      content: {\n        errorText: \"Can`t connect to server\"\n      },\n      error\n    }\n\n    const errorText = _error.response.data.message\n\n    return {\n      content: {\n        errorText\n      },\n      error\n    }\n  }\n\n  // Another error\n  else {\n    // eslint-disable-next-line no-console\n    console.error(error)\n  }\n\n  // Return error content\n  return {\n    content: {\n      errorText: String(error)\n    },\n    error\n  }\n}\n\nexport const httpClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL\n})\n\nexport function leadingZero(int: number) {\n  return (int <= 9 ? '0' : '') + int\n}\n\nexport function formatTime(seconds: number) {\n  return (\n    [\n      0,\n      Math.floor(seconds / 60),\n      Math.floor(seconds % 60),\n    ]\n      .map(x => x.toString())\n      .map(x => (x.length === 1 ? `0${x}` : x))\n      .join(\":\")\n  );\n}\n\nexport function calculatePercent(min: number, max: number) {\n  return min / max * 100\n}\n\nexport function calculateFromPercent(value: number, min: number, max: number) {\n  return max / 100 * value\n}\n"]},"metadata":{},"sourceType":"module"}