{"ast":null,"code":"import { createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: ['accessToken', 'navActive', 'reportsMaxRows']\n};\nexport const mapStateToProps = state => ({\n  store: state\n});\nexport const mapDispatchToProps = dispatch => ({\n  dispatcher: {\n    setAccessToken: accessToken => dispatch({\n      payload: accessToken,\n      type: \"SET_ACCESS_TOKEN\"\n    }),\n    setAccounts: accounts => dispatch({\n      payload: accounts,\n      type: \"SET_ACCOUNTS\"\n    }),\n    setSelectedAccount: i => dispatch({\n      payload: i,\n      type: \"SET_SELECTED_ACCOUNT\"\n    }),\n    setNavMode: mode => dispatch({\n      payload: mode,\n      type: \"SET_NAV_MODE\"\n    }),\n    setUser: user => dispatch({\n      payload: user,\n      type: \"SET_USER\"\n    }),\n    setMenus: menus => dispatch({\n      payload: menus,\n      type: \"SET_MENUS\"\n    }),\n    setRedirectRoute: redirectRoute => dispatch({\n      payload: redirectRoute,\n      type: \"SET_REDIRECT_ROUTE\"\n    }),\n    setNavActive: navActive => dispatch({\n      payload: navActive,\n      type: \"SET_NAV_ACTIVE\"\n    }),\n    setReportsMaxRows: navActive => dispatch({\n      payload: navActive,\n      type: \"SET_REPORTS_MAX_ROWS\"\n    })\n  }\n});\nconst initialState = {\n  accessToken: null,\n  accounts: [],\n  selectedAccount: null,\n  navMode: 'main',\n  user: null,\n  menus: null,\n  redirectRoute: null,\n  navActive: {\n    is: false,\n    floating: false\n  },\n  reportsMaxRows: 100\n};\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // Set access token case\n  if (action.type === \"SET_ACCESS_TOKEN\") {\n    state.accessToken = action.payload;\n    return { ...state,\n      accessToken: action.payload\n    };\n  } // Set selected account case\n\n\n  if (action.type === \"SET_SELECTED_ACCOUNT\") {\n    state.selectedAccount = action.payload;\n    return { ...state,\n      selectedAccount: action.payload\n    };\n  } // Set accounts case\n\n\n  if (action.type === \"SET_ACCOUNTS\") {\n    state.accounts = action.payload;\n    return { ...state,\n      accounts: action.payload\n    };\n  } // Set nav mode\n\n\n  if (action.type === \"SET_NAV_MODE\") {\n    state.navMode = action.payload;\n    return { ...state,\n      navMode: action.payload\n    };\n  } // Set user\n\n\n  if (action.type === \"SET_USER\") {\n    state.user = action.payload;\n    return { ...state,\n      user: action.payload\n    };\n  } // Set menus\n\n\n  if (action.type === \"SET_MENUS\") {\n    state.menus = action.payload;\n    return { ...state,\n      menus: action.payload\n    };\n  } // Set redirect route\n\n\n  if (action.type === \"SET_REDIRECT_ROUTE\") {\n    state.redirectRoute = action.payload;\n    return { ...state,\n      redirectRoute: action.payload\n    };\n  } // Set nav active\n\n\n  if (action.type === \"SET_NAV_ACTIVE\") {\n    state.navActive = action.payload;\n    return { ...state,\n      navActive: action.payload\n    };\n  } // Set nav active\n\n\n  if (action.type === \"SET_REPORTS_MAX_ROWS\") {\n    state.reportsMaxRows = action.payload;\n    return { ...state,\n      reportsMaxRows: action.payload\n    };\n  }\n\n  return state;\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = createStore(persistedReducer);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/nicole/rrrr/crm/src/store.ts"],"names":["createStore","persistReducer","persistStore","storage","persistConfig","key","whitelist","mapStateToProps","state","store","mapDispatchToProps","dispatch","dispatcher","setAccessToken","accessToken","payload","type","setAccounts","accounts","setSelectedAccount","i","setNavMode","mode","setUser","user","setMenus","menus","setRedirectRoute","redirectRoute","setNavActive","navActive","setReportsMaxRows","initialState","selectedAccount","navMode","is","floating","reportsMaxRows","rootReducer","action","persistedReducer","persistor"],"mappings":"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","sourcesContent":["import { Dispatch, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport Account from \"./models/Account\";\nimport Menus from \"./models/Menus\"\nimport User from \"./models/User\"\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: ['accessToken', 'navActive', 'reportsMaxRows']\n};\n\nexport type NavMode = 'main' | 'settings'\n\nexport type NavActive = {\n  is: boolean,\n  floating: boolean\n}\n\nexport interface RedirectRoute {\n  name: string,\n  params: {\n    [key: string]: string\n  }\n}\n\nexport interface StoreState {\n  accessToken: string | 'ijnsdiunsiudniuosnuidusnudnusnu',\n  accounts: Account[],\n  selectedAccount: number | null,\n  user: User | null,\n  menus: Menus | null\n  navMode: NavMode,\n  redirectRoute: RedirectRoute | null,\n  navActive: NavActive,\n  reportsMaxRows: number\n}\n\nexport interface StoreDispatch {\n  setAccessToken(accessToken: string | null): void,\n  setSelectedAccount(i: number | null): void,\n  setAccounts(accounts: Account[]): void,\n  setNavMode(mode: NavMode): void,\n  setUser(user: User | null): void\n  setMenus(menus: Menus | null): void\n  setRedirectRoute(redirectRoute: RedirectRoute | null): void\n  setNavActive(navActive: NavActive): void\n  setReportsMaxRows(rows: number): void\n}\n\nexport interface StoreDispatchAction {\n  type: string,\n  payload: any\n}\n\nexport const mapStateToProps = (state: StoreState): {store: StoreState} => ({ store: state });\nexport const mapDispatchToProps = (dispatch: Dispatch): { dispatcher: StoreDispatch} => ({\n  dispatcher: {\n    setAccessToken: (accessToken) => dispatch({ payload: accessToken, type: \"SET_ACCESS_TOKEN\" }),\n    setAccounts: (accounts) => dispatch({ payload: accounts, type: \"SET_ACCOUNTS\" }),\n    setSelectedAccount: (i) => dispatch({ payload: i, type: \"SET_SELECTED_ACCOUNT\" }),\n    setNavMode: (mode) => dispatch({ payload: mode, type: \"SET_NAV_MODE\" }),\n    setUser: (user) => dispatch({ payload: user, type: \"SET_USER\" }),\n    setMenus: (menus) => dispatch({ payload: menus, type: \"SET_MENUS\" }),\n    setRedirectRoute: (redirectRoute) => dispatch({ payload: redirectRoute, type: \"SET_REDIRECT_ROUTE\" }),\n    setNavActive: (navActive) => dispatch({ payload: navActive, type: \"SET_NAV_ACTIVE\" }),\n    setReportsMaxRows: (navActive) => dispatch({ payload: navActive, type: \"SET_REPORTS_MAX_ROWS\" }),\n  }\n});\n\nconst initialState: StoreState = {\n  accessToken: null,\n  accounts: [],\n  selectedAccount: null,\n  navMode: 'main',\n  user: null,\n  menus: null,\n  redirectRoute: null,\n  navActive: {\n    is: false,\n    floating: false\n  },\n  reportsMaxRows: 100\n}\n\nfunction rootReducer(state = initialState, action: StoreDispatchAction) {\n\n  // Set access token case\n  if (action.type === \"SET_ACCESS_TOKEN\") {\n    state.accessToken = action.payload as string | null;\n    return {\n      ...state,\n      accessToken: action.payload as string | null\n    };\n  }\n\n  // Set selected account case\n  if (action.type === \"SET_SELECTED_ACCOUNT\") {\n    state.selectedAccount = action.payload as number | null;\n    return {\n      ...state,\n      selectedAccount: action.payload as number | null\n    };\n  }\n\n  // Set accounts case\n  if (action.type === \"SET_ACCOUNTS\") {\n    state.accounts = action.payload as Account[];\n    return {\n      ...state,\n      accounts: action.payload as Account[]\n    };\n  }\n\n  // Set nav mode\n  if (action.type === \"SET_NAV_MODE\") {\n    state.navMode = action.payload as NavMode;\n    return {\n      ...state,\n      navMode: action.payload as NavMode\n    };\n  }\n\n  // Set user\n  if (action.type === \"SET_USER\") {\n    state.user = action.payload as User | null;\n    return {\n      ...state,\n      user: action.payload as User | null\n    };\n  }\n\n  // Set menus\n  if (action.type === \"SET_MENUS\") {\n    state.menus = action.payload as Menus | null;\n    return {\n      ...state,\n      menus: action.payload as Menus | null\n    };\n  }\n\n  // Set redirect route\n  if (action.type === \"SET_REDIRECT_ROUTE\") {\n    state.redirectRoute = action.payload as RedirectRoute | null;\n    return {\n      ...state,\n      redirectRoute: action.payload as RedirectRoute | null\n    };\n  }\n\n  // Set nav active\n  if (action.type === \"SET_NAV_ACTIVE\") {\n    state.navActive = action.payload as NavActive;\n    return {\n      ...state,\n      navActive: action.payload as NavActive\n    };\n  }\n\n  // Set nav active\n  if (action.type === \"SET_REPORTS_MAX_ROWS\") {\n    state.reportsMaxRows = action.payload as number;\n    return {\n      ...state,\n      reportsMaxRows: action.payload as number\n    };\n  }\n\n  return state;\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(persistedReducer)\nexport const persistor = persistStore(store as any)\n"]},"metadata":{},"sourceType":"module"}