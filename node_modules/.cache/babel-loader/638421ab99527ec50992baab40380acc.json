{"ast":null,"code":"var _jsxFileName = \"/Users/nicole/rrrr/crm/src/components/DateRangeCalendar.tsx\",\n    _s = $RefreshSig$();\n\nimport classNames from \"classnames\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { mapDispatchToProps, mapStateToProps } from \"../store\";\nimport \"../styles/components/date-range-calendar.sass\";\nimport Icon from \"./Icon\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DateRangeCalendar = connect(mapStateToProps, mapDispatchToProps)(_s(function (props) {\n  _s();\n\n  const [activeDate, setActiveDate] = useState(moment().startOf('day').toDate());\n  const [startDate, setStartDate] = useState(props.startDate || null);\n  const [endDate, setEndDate] = useState(props.endDate || null); // onDayClick function\n\n  function onDayClick(day) {\n    if (!startDate || startDate && endDate) {\n      const date = moment(activeDate).date(day).toDate(); // setStartDate(date)\n\n      props.onStartDateUpdate && props.onStartDateUpdate(date);\n      setEndDate(null);\n      return;\n    }\n\n    if (!endDate) {\n      const date = moment(activeDate).date(day).endOf('day').toDate(); // setEndDate(date)\n\n      props.onEndDateUpdate && props.onEndDateUpdate(date);\n      return;\n    }\n  } // Add or take a month from activeDate function\n\n\n  function updateActiveMonth(x) {\n    setActiveDate(moment(activeDate).add(x, 'M').toDate());\n  } // Get start date from props\n\n\n  useEffect(() => {\n    setStartDate(props.startDate || null);\n  }, [props.startDate]);\n  useEffect(() => {\n    setEndDate(props.endDate || null);\n  }, [props.endDate]); // Render function\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DateRangeCalendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"_zeroed _iconed\",\n        onClick: () => updateActiveMonth(-1),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          className: \"_rotated-180\",\n          icon: \"arrow-25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-month\",\n        children: moment(activeDate).format('MMMM YYYY')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"_zeroed _iconed\",\n        onClick: () => updateActiveMonth(1),\n        children: /*#__PURE__*/_jsxDEV(Icon, {\n          icon: \"arrow-25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"days-grid week-days\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"S\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"M\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"W\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"T\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          children: \"S\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"days-grid calendar-days\",\n        children: [[...Array(moment(activeDate).startOf('month').day())].map((day, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\"\n        }, `${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)), [...Array(moment(activeDate).daysInMonth())].map((day, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames('day', {\n            _selected: i + 1 === moment(startDate).date() && activeDate.getMonth() === (startDate === null || startDate === void 0 ? void 0 : startDate.getMonth()) && activeDate.getFullYear() === (startDate === null || startDate === void 0 ? void 0 : startDate.getFullYear()) || i + 1 === moment(endDate).date() && activeDate.getMonth() === (endDate === null || endDate === void 0 ? void 0 : endDate.getMonth()) && activeDate.getFullYear() === (endDate === null || endDate === void 0 ? void 0 : endDate.getFullYear()),\n            _inRange: startDate && endDate && moment(activeDate).date(i + 1).isAfter(moment(startDate)) && moment(activeDate).date(i + 2).isBefore(moment(endDate)),\n            _rangeStart: moment(activeDate).date(i + 1).isSame(moment(startDate)),\n            _rangeEnd: moment(activeDate).endOf('day').date(i + 1).isSame(moment(endDate))\n          }),\n          onClick: () => onDayClick(i + 1),\n          children: i + 1\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), props.debug ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: moment(startDate).format()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: moment(activeDate).format()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: moment(endDate).format()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: String(moment(startDate).format() === moment(activeDate).format())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}, \"rZP1J0F1m3jfYZAOcAGy3mL//Os=\"));\nexport default DateRangeCalendar;","map":{"version":3,"sources":["/Users/nicole/rrrr/crm/src/components/DateRangeCalendar.tsx"],"names":["classNames","moment","React","useEffect","useState","connect","mapDispatchToProps","mapStateToProps","Icon","DateRangeCalendar","props","activeDate","setActiveDate","startOf","toDate","startDate","setStartDate","endDate","setEndDate","onDayClick","day","date","onStartDateUpdate","endOf","onEndDateUpdate","updateActiveMonth","x","add","format","Array","map","i","daysInMonth","_selected","getMonth","getFullYear","_inRange","isAfter","isBefore","_rangeStart","isSame","_rangeEnd","debug","String"],"mappings":"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","sourcesContent":["import classNames from \"classnames\"\nimport moment from \"moment\"\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { StoreDispatch, StoreState, mapDispatchToProps, mapStateToProps } from \"../store\";\n\nimport \"../styles/components/date-range-calendar.sass\"\nimport Icon from \"./Icon\"\n\ninterface Props {\n  store: StoreState,\n  dispatcher: StoreDispatch,\n\n  startDate?: Date,\n  endDate?: Date,\n\n  onStartDateUpdate?(date: Date): void,\n  onEndDateUpdate?(date: Date): void,\n\n  debug?: any\n}\n\nconst DateRangeCalendar = connect(mapStateToProps, mapDispatchToProps)(function(props: Props) {\n\n  const [activeDate, setActiveDate] = useState(moment().startOf('day').toDate())\n  const [startDate, setStartDate] = useState<Date | null>(props.startDate || null)\n  const [endDate, setEndDate] = useState<Date | null>(props.endDate || null)\n\n  // onDayClick function\n  function onDayClick(day: number) {\n\n    if (!startDate || (startDate && endDate)) {\n      const date = moment(activeDate).date(day).toDate()\n\n      // setStartDate(date)\n      props.onStartDateUpdate && props.onStartDateUpdate(date)\n\n      setEndDate(null)\n      \n      return\n    }\n\n    if (!endDate) {\n      const date = moment(activeDate).date(day).endOf('day').toDate()\n\n      // setEndDate(date)\n      props.onEndDateUpdate && props.onEndDateUpdate(date)\n\n      return\n    }\n  }\n\n  // Add or take a month from activeDate function\n  function updateActiveMonth(x: number) {\n\n    setActiveDate(moment(activeDate).add(x, 'M').toDate())\n  }\n\n  // Get start date from props\n  useEffect(() => {\n    setStartDate(props.startDate || null)\n  }, [props.startDate])\n\n  useEffect(() => {\n    setEndDate(props.endDate || null)\n  }, [props.endDate])\n  \n  // Render function\n  return (\n    <div className=\"DateRangeCalendar\">\n\n      <div className=\"header\">\n\n        <button className=\"_zeroed _iconed\" onClick={() => updateActiveMonth(-1)}>\n          <Icon className=\"_rotated-180\" icon=\"arrow-25\" />\n        </button>\n\n        <div className=\"current-month\">\n          {moment(activeDate).format('MMMM YYYY')}\n        </div>\n\n        <button className=\"_zeroed _iconed\" onClick={() => updateActiveMonth(1)}>\n          <Icon icon=\"arrow-25\" />\n        </button>\n      </div>\n\n      <div className=\"calendar\">\n\n        <div className=\"days-grid week-days\">\n\n          <div className=\"day\">S</div>\n          <div className=\"day\">M</div>\n          <div className=\"day\">T</div>\n          <div className=\"day\">W</div>\n          <div className=\"day\">T</div>\n          <div className=\"day\">F</div>\n          <div className=\"day\">S</div>\n        </div>\n\n        <div className=\"days-grid calendar-days\">\n\n          {[...Array(moment(activeDate).startOf('month').day())].map((day, i) => (\n            <div className=\"day\" key={`${i}`}></div>\n          ))}\n\n        \n          {[...Array(moment(activeDate).daysInMonth())].map((day, i) => (\n            <div\n              className={classNames('day', {\n                _selected: (\n                  i + 1 === moment(startDate).date() &&\n                  activeDate.getMonth() === startDate?.getMonth() &&\n                  activeDate.getFullYear() === startDate?.getFullYear() ||\n                  i + 1 === moment(endDate).date() &&\n                  activeDate.getMonth() === endDate?.getMonth() &&\n                  activeDate.getFullYear() === endDate?.getFullYear()\n                ),\n                _inRange: (\n                  startDate && endDate &&\n                  moment(activeDate).date(i+1).isAfter(moment(startDate)) &&\n                  moment(activeDate).date(i+2).isBefore(moment(endDate))\n                ),\n                _rangeStart: moment(activeDate).date(i + 1).isSame(moment(startDate)),\n                _rangeEnd: moment(activeDate).endOf('day').date(i+1).isSame(moment(endDate))\n              })}\n              key={i}\n              onClick={() => onDayClick(i + 1)}\n            >{i + 1}</div>\n          ))}\n        </div>\n      </div>\n\n      {props.debug ? (<>\n        <div>{moment(startDate).format()}</div>\n        <div>{moment(activeDate).format()}</div>\n        <div>{moment(endDate).format()}</div>\n        <div>{String(moment(startDate).format() === moment(activeDate).format())}</div>\n      </>) : null}\n    </div>\n  )\n})\nexport default DateRangeCalendar\n"]},"metadata":{},"sourceType":"module"}