{"ast":null,"code":"export const validate = (rule, entity, displayFieldText) => {\n  let isValid = null;\n  if (!entity) return `The \"${displayFieldText || rule}\" field is not filled`;\n  /* === Account === */\n  else if ([\"first_name\", \"middle_name\", \"last_name\"].includes(rule)) isValid = /^[A-ZА-ЯЁ][a-zа-яё-]{0,23}[a-zа-яё]$/.test(entity);else if (rule === \"email\") // eslint-disable-next-line max-len\n    isValid = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(entity);else if (rule === \"username\") isValid = /^\\w{5,24}$/.test(entity);else if (rule === \"password\") isValid = /^.{6,64}$/.test(entity);else if ([\"address\", \"law_address\", \"zip_address\", \"res_address\", \"from_address\"].includes(rule)) isValid = /^[a-zа-яё\\d][a-zа-яё\\d\\s.\\-,]{3,98}[a-zа-яё\\d]$/i.test(entity);else if ([\"bank_name\", \"law_name\"].includes(rule)) isValid = /^[a-zа-яё\\d][a-zа-яё\\d\\s.\\-«\"]{3,120}[a-zа-яё\"».]$/i.test(entity);\n  /* === System === */\n  else if (rule === \"boolean\") isValid = [\"true\", \"false\"].includes(entity);else if (rule === \"comment\") isValid = !/^[a-zа-яё\\d\\s.-]{1,509}[^\\s]$/i.test(entity);else if (/_id$/.test(rule)) isValid = /^(?=[a-f\\d]{24}$)(\\d+[a-f]|[a-f]+\\d)/i.test(entity);else if (rule === \"search_query\") isValid = /^[^\\s][a-zа-яё\\d\\s.-]{1,509}[^\\s]$/i.test(entity);else if (rule === \"db_limit\") {\n    const dbLimit = +entity;\n    isValid = !(isNaN(dbLimit) || dbLimit < 1 || dbLimit >= 50);\n  } else if (rule === \"db_offset\") {\n    const dbOffset = +entity;\n    isValid = !(isNaN(dbOffset) || dbOffset < 0);\n  } else if (/^sort_by/.test(rule)) {\n    const sortBy = +entity;\n    isValid = sortBy >= -1 && sortBy <= 1;\n  } else if (/_will_at$/i.test(rule)) {\n    isValid = true;\n    const date = new Date(entity);\n    const now = new Date();\n\n    if (date.toString() === \"Invalid Date\") {\n      isValid = false;\n    } else if (+now - +date > 0) {\n      isValid = false;\n    }\n  } else if (/_did_at$/i.test(rule)) {\n    isValid = true;\n    const date = new Date(entity);\n    const now = new Date();\n\n    if (date.toString() === \"Invalid Date\") {\n      isValid = false;\n    } else if (+now - +date < 0) {\n      isValid = false;\n    }\n  } else if (/_at$/.test(rule)) {\n    let str = entity;\n    if (/^\\d{2}\\.\\d{2}.\\d{4}$/.test(entity)) str = entity.split(\".\").reverse().join(\"-\");\n    isValid = new Date(str).toString() !== \"Invalid Date\";\n  } else if (rule === \"positive_integer\") isValid = !(isNaN(+entity) || +entity < 0);\n  if (isValid === null) return `No validation rule set for this entity: \"${entity}\"`;\n  if (isValid === false) return `\"The \"${displayFieldText || rule}\" field is incorrect`;\n};\nexport const validateMany = vRules => vRules.map(_ref => {\n  let {\n    rule,\n    entity,\n    displayFieldText\n  } = _ref;\n  return validate(rule, entity, displayFieldText);\n}).filter(field => field);","map":{"version":3,"sources":["/Users/nicole/rrrr/crm/src/validate.ts"],"names":["validate","rule","entity","displayFieldText","isValid","includes","test","dbLimit","isNaN","dbOffset","sortBy","date","Date","now","toString","str","split","reverse","join","validateMany","vRules","map","filter","field"],"mappings":"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","sourcesContent":["interface vRule {\n  rule: string,\n  entity: string,\n  displayFieldText?: string\n}\n\nexport const validate = (rule: string, entity: string, displayFieldText?: string): string | undefined => {\n\n  let isValid = null\n\n  if (!entity) return `The \"${displayFieldText || rule}\" field is not filled`\n\n  /* === Account === */\n\n  else if ([\"first_name\", \"middle_name\", \"last_name\"].includes(rule))\n    isValid = (/^[A-ZА-ЯЁ][a-zа-яё-]{0,23}[a-zа-яё]$/).test(entity)\n\n  else if (rule === \"email\")\n    // eslint-disable-next-line max-len\n    isValid = (/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/).test(entity)\n\n  else if (rule === \"username\")\n    isValid = (/^\\w{5,24}$/).test(entity)\n\n  else if (rule === \"password\")\n    isValid = (/^.{6,64}$/).test(entity)\n\n  else if ([\n    \"address\",\n    \"law_address\",\n    \"zip_address\",\n    \"res_address\",\n    \"from_address\"\n  ].includes(rule))\n    isValid = (/^[a-zа-яё\\d][a-zа-яё\\d\\s.\\-,]{3,98}[a-zа-яё\\d]$/i).test(entity)\n\n  else if ([\"bank_name\", \"law_name\"].includes(rule))\n    isValid = (/^[a-zа-яё\\d][a-zа-яё\\d\\s.\\-«\"]{3,120}[a-zа-яё\"».]$/i).test(entity)\n\n  /* === System === */\n\n  else if (rule === \"boolean\")\n    isValid = [\"true\", \"false\"].includes(entity)\n\n  else if (rule === \"comment\")\n    isValid = !(/^[a-zа-яё\\d\\s.-]{1,509}[^\\s]$/i).test(entity)\n\n  else if ((/_id$/).test(rule))\n    isValid = (/^(?=[a-f\\d]{24}$)(\\d+[a-f]|[a-f]+\\d)/i).test(entity)\n\n  else if (rule === \"search_query\")\n    isValid = (/^[^\\s][a-zа-яё\\d\\s.-]{1,509}[^\\s]$/i).test(entity)\n\n  else if (rule === \"db_limit\") {\n    const dbLimit = +entity\n    isValid = !(isNaN(dbLimit) || dbLimit < 1 || dbLimit >= 50)\n  }\n\n  else if (rule === \"db_offset\") {\n    const dbOffset = +entity\n    isValid = !(isNaN(dbOffset) || dbOffset < 0)\n  }\n\n  else if ((/^sort_by/).test(rule)) {\n    const sortBy = +entity\n    isValid = (sortBy >= -1 && sortBy <= 1)\n  }\n\n  else if ((/_will_at$/i).test(rule)) {\n\n    isValid = true\n\n    const date = new Date(entity)\n    const now = new Date()\n\n    if ((date.toString() === \"Invalid Date\")) {\n      isValid = false\n    }\n    else if (+now - +date > 0) {\n      isValid = false\n    }\n\n  }\n\n  else if ((/_did_at$/i).test(rule)) {\n\n    isValid = true\n\n    const date = new Date(entity)\n    const now = new Date()\n\n    if ((date.toString() === \"Invalid Date\")) {\n      isValid = false\n    }\n    else if (+now - +date < 0) {\n      isValid = false\n    }\n\n  }\n\n  else if ((/_at$/).test(rule)) {\n\n    let str = entity\n\n    if ((/^\\d{2}\\.\\d{2}.\\d{4}$/).test(entity))\n      str = entity.split(\".\").reverse().join(\"-\")\n\n    isValid = (new Date(str).toString() !== \"Invalid Date\")\n  }\n\n  else if (rule === \"positive_integer\")\n    isValid = !(isNaN(+entity) || +entity < 0)\n\n  if (isValid === null)\n    return `No validation rule set for this entity: \"${entity}\"`\n\n  if (isValid === false)\n    return `\"The \"${displayFieldText || rule}\" field is incorrect`\n\n}\n\nexport const validateMany = (vRules: vRule[]): (string | undefined)[] =>\n  vRules.map(({ rule, entity, displayFieldText }) => validate(rule, entity, displayFieldText)).filter(field => field)\n"]},"metadata":{},"sourceType":"module"}